substring concatenation words given string array strings words strings words same length concatenated substring substring contains strings any permutation words concatenated example words abcdef abcdef abefcd cdabef cdefab efabcd efcdab concatenated strings acdbef not concatenated substring because not concatenation any permutation words return starting indices concatenated substrings return answer any order example input barfoothefoobarman words foobar output explanation since wordslength wordsilength concatenated substring length substring starting barfoo concatenation barfoo which permutation words substring starting foobar concatenation foobar which permutation words output order does not matter returning fine too example input wordgoodgoodgoodbestword words wordgoodbestword output explanation since wordslength wordsilength concatenated substring length substring length equal concatenation any permutation words return empty array example input barfoofoobarthefoobarman words barfoothe output explanation since wordslength wordsilength concatenated substring length substring starting foobarthe concatenation foobarthe which permutation words substring starting barthefoo concatenation barthefoo which permutation words substring starting thefoobar concatenation thefoobar which permutation words constraints slength wordslength wordsilength wordsi consist lowercase english letters

valid parentheses given string containing characters determine input string valid input string valid open brackets must closed same type brackets open brackets must closed correct order every close bracket corresponding open bracket same type example input output true example input output true example input output false constraints slength consists parentheses only

rank scores sql schema table scores column name type int score decimal primary key table each row table contains score game score floating point value two decimal places write sql query rank scores ranking should calculated according following rules scores should ranked highest lowest tie between two scores both should same ranking after tie next ranking number should next consecutive integer value other words should holes between ranks return result table ordered score descending order query result format following example example input scores table score output score rank

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

simplified fractions given integer return list simplified fractions between exclusive such denominator lessthanorequalto return answer any order example input output explanation only unique fraction denominator lessthanorequalto example input output example input output explanation not simplified fraction because simplified constraints

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

string matching array given array string words return strings words substring another word return answer any order substring contiguous sequence characters within string example input words massasherosuperhero output ashero explanation substring mass hero substring superhero heroas also valid answer example input words leetcodeetcode output etcode explanation code substring leetcode example input words bluegreenbu output explanation string words substring another string constraints wordslength wordsilength wordsi contains only lowercase english letters strings words unique

find kth smallest sum matrix sorted rows given matrix mat rows sorted nondecreasing order integer allowed choose exactly one element each row form array return kth smallest array sum possible arrays example input mat output explanation choosing one element each row first smallest sum where sum example input mat output example input mat output explanation choosing one element each row first smallest sum where sum constraints matlength matlengthi matij min mati nondecreasing array

form largest integer digits add target given array integers cost integer target return maximum integer paint under following rules cost painting digit given costi indexed total cost used must equal target integer does not digits since answer may very large return string way paint any integer given condition return example input cost target output explanation cost paint digit digit cost could also paint but largest number digit cost example input cost target output explanation cost paint digit digit cost example input cost target output explanation impossible paint any integer total cost equal target constraints costlength costi target

kids greatest number candies kids candies given integer array candies where each candiesi represents number candies ith kid integer extracandies denoting number extra candies return boolean array result length where resulti true after giving ith kid extracandies they greatest number candies kids false otherwise note multiple kids greatest number candies example input candies extracandies output truetruetruefalsetrue explanation give extracandies kid they candies which greatest kids kid they candies which greatest kids kid they candies which greatest kids kid they candies which not greatest kids kid they candies which greatest kids example input candies extracandies output truefalsefalsefalsefalse explanation only extra candy kid always greatest number candies even different kid given extra candy example input candies extracandies output truefalsetrue constraints candieslength candiesi extracandies

compare version numbers given two version numbers version version compare them version numbers consist one more revisions joined dot each revision consists digits may contain leading zeros every revision contains least one character revisions indexed left leftmost revision being revision next revision being revision example valid version numbers compare version numbers compare their revisions lefttoright order revisions compared using their integer value ignoring any leading zeros means revisions considered equal version number does not specify revision index treat revision example version less than version because their revision same but their revision respectively return following version version return version version return otherwise return example input version version output explanation ignoring leading zeroes both represent same integer example input version version output explanation version does not specify revision which means treated example input version version output explanation versions revision while versions revision version version constraints versionlength versionlength version version only contain digits version version valid version numbers given revisions version version stored bit integer

minimum value get positive step step sum given array integers nums start initial positive value startvalue each iteration calculate step step sum startvalue plus elements nums left return minimum positive value startvalue such step step sum never less than example input nums output explanation choose startvalue third iteration your step step sum less than step step sum startvalue startvalue nums example input nums output explanation minimum start value should positive example input nums output constraints numslength numsi

find minimum number fibonacci numbers whose sum given integer return minimum number fibonacci numbers whose sum equal same fibonacci number used multiple times fibonacci numbers defined guaranteed given constraints always find such fibonacci numbers sum example input output explanation fibonacci numbers use example input output explanation use example input output explanation use constraints

html entity parser html entity parser parser takes html code input replace entities special characters characters itself special characters their entities html quotation mark entity quot symbol character single quote mark entity apos symbol character ampersand entity amp symbol character greater than sign entity symbol character less than sign entity symbol character slash entity frasl symbol character given input text string html parser implement entity parser return text after replacing entities special characters example input text amp html entity but ambassador not output html entity but ambassador not explanation parser replace amp entity example input text quote quotquot output quote constraints textlength string may contain any possible characters out ascii characters

number steps reduce number binary representation one given binary representation integer string return number steps reduce under following rules current number even divide current number odd add guaranteed always reach one test cases example input output explanation corressponds number their decimal representation step odd add obtain step even divide obtain step odd add obtain step even divide obtain step even divide obtain step even divide obtain example input output explanation corressponds number their decimal representation step even divide obtain example input output constraints slength consists characters

number ways paint grid grid size want paint each cell grid exactly one three colors red yellow green while making sure two adjacent cells same color two cells share vertical horizontal sides same color given number rows grid return number ways paint grid answer may grow large answer must computed modulo example input output explanation possible way paint grid shown example input output constraints gridlength

stone game iii alice bob continue their games piles stones several stones arranged row each stone associated value which integer given array stonevalue alice bob take turns alice starting first each players turn player take stones first remaining stones row score each player sum values stones taken score each player initially objective game end highest score winner player highest score could tie game continues stones taken assume alice bob play optimally return alice alice win bob bob win tie they end game same score example input stonevalue output bob explanation alice always lose her best move take three piles score become score bob bob wins example input stonevalue output alice explanation alice must choose three piles first move win leave bob negative score alice chooses one pile her score next move bobs score becomes next move alice take pile value lose alice chooses two piles her score next move bobs score becomes next move alice take pile value also lose remember both play optimally here alice choose scenario makes her win example input stonevalue output tie explanation alice cannot win game she end game draw she decided choose first three piles otherwise she lose constraints stonevaluelength stonevaluei

check least length places away given binary array nums integer return true least places away each other otherwise return false example input nums output true explanation each least places away each other example input nums output false explanation second third only one apart each other constraints numslength numslength numsi

number ways cutting pizza given rectangular pizza represented rows cols matrix containing following characters apple empty cell given integer cut pizza pieces using cuts each cut choose direction vertical horizontal choose cut position cell boundary cut pizza two pieces cut pizza vertically give left part pizza person cut pizza horizontally give upper part pizza person give last piece pizza last person return number ways cutting pizza such each piece contains least one apple since answer huge number return modulo example input pizza aaaa output explanation figure above shows three ways cut pizza note pieces must contain least one apple example input pizza aaa output example input pizza output constraints rows cols rows pizzalength cols pizzailength pizza consists characters only

build array stack operations given integer array target integer empty stack two following operations push pushes integer top stack pop removes integer top stack also stream integers range use two stack operations numbers stack bottom top equal target should follow following rules stream integers not empty pick next integer stream push top stack stack not empty pop integer top stack any moment elements stack bottom top equal target not read new integers stream not more operations stack return stack operations needed build target following mentioned rules multiple valid answers return any them example input target output pushpushpoppush explanation initially stack empty last element top stack read stream push stack read stream push stack pop integer top stack read stream push stack example input target output pushpushpush explanation initially stack empty last element top stack read stream push stack read stream push stack read stream push stack example input target output pushpush explanation initially stack empty last element top stack read stream push stack read stream push stack since stack bottom top equal target stop stack operations answers read integer stream not accepted constraints targetlength targeti target strictly increasing

longest continuous subarray absolute diff less than equal limit given array integers nums integer limit return size longest nonempty subarray such absolute difference between any two elements subarray less than equal limit example input nums limit output explanation subarrays maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff size longest subarray example input nums limit output explanation subarray longest since maximum absolute diff example input nums limit output constraints numslength numsi limit

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

queries permutation key given array queries positive integers between process queriesi iquerieslength according following rules beginning permutation current find position queriesi permutation indexing move beginning permutation notice position queriesi result queriesi return array containing result given queries example input queries output explanation queries processed follow queriesi position move beginning resulting queriesi position move beginning resulting queriesi position move beginning resulting queriesi position move beginning resulting array containing result example input queries output example input queries output constraints querieslength queriesi

number students doing homework given time given two integer arrays starttime endtime given integer querytime ith student started doing their homework time starttimei finished time endtimei return number students doing their homework time querytime more formally return number students where querytime lays interval starttimei endtimei inclusive example input starttime endtime querytime output explanation students where first student started doing homework time finished time wasnt doing anything time second student started doing homework time finished time also wasnt doing anything time third student started doing homework time finished time only student doing homework time example input starttime endtime querytime output explanation only student doing their homework querytime constraints starttimelength endtimelength starttimelength starttimei endtimei querytime

max difference get changing integer given integer num apply following steps exactly two times pick digit pick another digit digit equal replace occurrences decimal representation num new integer cannot any leading zeros also new integer cannot let results applying operations num first second times respectively return max difference between example input num output explanation first time pick store new integer second time pick store new integer max difference example input num output explanation first time pick store new integer second time pick store new integer max difference constraints num

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

restore array program supposed print array integers program forgot print whitespaces array printed string digits know integers array range leading zeros array given string integer return number possible arrays printed using mentioned program since answer may very large return modulo example input output explanation only possible array example input output explanation cannot array printed way integer example input output explanation possible arrays constraints slength consists only digits does not contain leading zeros

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

build array where find maximum exactly comparisons given three integers consider following algorithm find maximum element array positive integers should build array arr which following properties arr exactly integers arri where after applying mentioned algorithm arr value searchcost equal return number ways build array arr under mentioned conditions answer may grow large answer must computed modulo example input output explanation possible arrays example input output explanation possible arrays satisify mentioned conditions example input output explanation only possible array constraints

minimum subsequence nonincreasing order given array nums obtain subsequence array whose sum elements strictly greater than sum non included elements such subsequence multiple solutions return subsequence minimum size exist multiple solutions return subsequence maximum total sum elements subsequence array obtained erasing some possibly zero elements array note solution given constraints guaranteed unique also return answer sorted nonincreasing order example input nums output explanation subsequences minimal such sum their elements strictly greater than sum elements not included however subsequence maximum total sum elements example input nums output explanation subsequence sum elements equal which not strictly greater than sum elements not included subsequence minimal satisfying conditions note subsequence returned nondecreasing order constraints numslength numsi

display table food orders restaurant given array orders which represents orders customers done restaurant more specifically ordersicustomernameitablenumberifooditemi where customernamei name customer tablenumberi table customer sit fooditemi item customer orders return restaurants “display table” “display table” table whose row entries denote how many each food item each table ordered first column table number remaining columns correspond each food item alphabetical order first row should header whose first column “table” followed names food items note customer names not part table additionally rows should sorted numerically increasing order example input orders davidcevichecorinabeef burritodavidfried chickencarlawatercarlacevicherousceviche output tablebeef burritocevichefried chickenwater explanation displaying table looks tablebeef burritocevichefried chickenwater table david orders ceviche fried chicken rous orders ceviche table carla orders water ceviche table corina orders beef burrito example input orders jamesfried chickenrateshfried chickenamadeusfried chickenadamcanadian wafflesbriannacanadian waffles output tablecanadian wafflesfried chicken explanation table adam brianna order canadian waffles table james ratesh amadeus order fried chicken example input orders laurabean burritojhonbeef burritomelissasoda output tablebean burritobeef burritosoda constraints orderslength ordersilength customernameilength fooditemilength customernamei fooditemi consist lowercase uppercase english letters space character tablenumberi valid integer between

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

rotate array given integer array nums rotate array steps where nonnegative example input nums output explanation rotate steps rotate steps rotate steps example input nums output explanation rotate steps rotate steps constraints numslength numsi follow try come many solutions least three different ways solve problem could inplace extra space

check string break another string given two strings same size check some permutation string break some permutation string viceversa other words break viceversa string break string both size alphabetical order between example input abc xya output true explanation ayx permutation sxya which break string abc which permutation sabc example input abe acd output false explanation permutations sabe abe aeb bae bea eab eba permutation sacd acd adc cad cda dac dca however not any permutation which break some permutation viceversa example input leetcodee interview output true constraints slength slength strings consist lowercase english letters

reducing dishes chef collected data satisfaction level his dishes chef cook any dish unit time liketime coefficient dish defined time taken cook dish previous dishes multiplied satisfaction level timei satisfactioni return maximum sum liketime coefficient chef obtain after dishes preparation dishes prepared any order chef discard some dishes get maximum value example input satisfaction output explanation after removing second last dish maximum total liketime coefficient equal each dish prepared one unit time example input satisfaction output explanation dishes prepared any order example input satisfaction output explanation people not dishes dish prepared constraints satisfactionlength satisfactioni

count good nodes binary tree given binary tree root node tree named good path root nodes value greater than return number good nodes binary tree example input root null output explanation nodes blue good root node always good node node maximum value path starting root node maximum value path node maximum value path example input root null output explanation node not good because higher than example input root output explanation root considered good constraints number nodes binary tree range each nodes value between

maximum points obtain cards several cards arranged row each card associated number points points given integer array cardpoints one step take one card beginning end row take exactly cards your score sum points cards taken given integer array cardpoints integer return maximum score obtain example input cardpoints output explanation after first step your score always however choosing rightmost card first maximize your total score optimal strategy take three cards giving final score example input cardpoints output explanation regardless which two cards take your score always example input cardpoints output explanation take cards your score sum points cards constraints cardpointslength cardpointsi cardpointslength

reformat string given alphanumeric string alphanumeric string string consisting lowercase english letters digits find permutation string where letter followed another letter digit followed another digit two adjacent characters same type return reformatted string return empty string impossible reformat string example input abc output abc explanation two adjacent characters same type abc abc abc cab also valid permutations example input leetcode output explanation leetcode only characters cannot separate them digits example input output explanation only digits cannot separate them characters constraints slength consists only lowercase english letters andor digits

minimum number frogs croaking given string croakoffrogs which represents combination string croak different frogs multiple frogs croak same time multiple croak mixed return minimum number different frogs finish croaks given string valid croak means frog printing five letters sequentially frogs print five letters finish croak given string not combination valid croak return example input croakoffrogs croakcroak output explanation one frog yelling croak twice example input croakoffrogs crcoakroak output explanation minimum number frogs two first frog could yell crcoakroak second frog could yell later crcoakroak example input croakoffrogs croakcrook output explanation given string invalid combination croak different frogs constraints croakoffrogslength croakoffrogs either

maximum score after splitting string given string zeros ones return maximum score after splitting string two nonempty substrings left substring substring score after splitting string number zeros left substring plus number ones substring example input output explanation possible ways splitting two nonempty substrings left score left score left score left score left score example input output explanation when left get maximum score example input output constraints slength string consists characters only

constrained subsequence sum given integer array nums integer return maximum sum nonempty subsequence array such every two consecutive integers subsequence numsi numsj where condition satisfied subsequence array obtained deleting some number elements zero array leaving remaining elements their original order example input nums output explanation subsequence example input nums output explanation subsequence must nonempty choose largest number example input nums output explanation subsequence constraints numslength numsi

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

longest happy string string called happy satisfies following conditions only contains letters does not contain any aaa bbb ccc substring contains most occurrences letter contains most occurrences letter contains most occurrences letter given three integers return longest possible happy string multiple longest happy strings return any them such string return empty string substring contiguous sequence characters within string example input output ccaccbcc explanation ccbccacc would also correct answer example input output aabaa explanation only correct answer case constraints

reverse words string given input string reverse order words word defined sequence nonspace characters words separated least one space return string words reverse order concatenated single space note may contain leading trailing spaces multiple spaces between two words returned string should only single space separating words not include any extra spaces example input sky blue output blue sky example input hello world output world hello explanation your reversed string should not contain leading trailing spaces example input good example output example good explanation need reduce multiple spaces between two words single space reversed string constraints slength contains english letters uppercase lowercase digits spaces least one word followup string data type mutable your language solve inplace extra space

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

kth lexicographical string happy strings length happy string string consists only letters set values slength string indexed example strings abc abcbabcbcb happy strings strings baa ababbc not happy strings given two integers consider list happy strings length sorted lexicographical order return kth string list return empty string less than happy strings length example input output explanation list contains happy strings length third string example input output explanation only happy strings length example input output cab explanation different happy string length aba abc aca acb bab bac bca bcb cab cac cba cbc find string cab constraints

count triplets form two arrays equal xor given array integers arr want select three indices where arrlength lets define follows arri arri arrj arrj arrj arrk note denotes bitwisexor operation return number triplets where example input arr output explanation triplets example input arr output constraints arrlength arri

minimum time collect apples tree given undirected tree consisting vertices numbered which some apples their vertices spend second walk over one edge tree return minimum time seconds spend collect apples tree starting vertex coming back vertex edges undirected tree given array edges where edgesi means exists edge connecting vertices additionally boolean array hasapple where hasapplei true means vertex apple otherwise does not any apple example input edges hasapple falsefalsetruefalsetruetruefalse output explanation figure above represents given tree where red vertices apple one optimal path collect apples shown green arrows example input edges hasapple falsefalsetruefalsefalsetruefalse output explanation figure above represents given tree where red vertices apple one optimal path collect apples shown green arrows example input edges hasapple falsefalsefalsefalsefalsefalsefalse output constraints edgeslength edgesilength hasapplelength

consecutive characters power string maximum length nonempty substring contains only one unique character given string return power example input leetcode output explanation substring length character only example input abbcccddddeeeeedcba output explanation substring eeeee length character only constraints slength consists only lowercase english letters

diagonal traverse given integer array nums return elements nums diagonal order shown below images example input nums output example input nums output constraints numslength numsilength sumnumsilength numsij

destination city given array paths where pathsi cityai citybi means exists direct path going cityai citybi return destination city city without any path outgoing another city guaranteed graph paths forms line without any loop exactly one destination city example input paths londonnew yorknew yorklimalimasao paulo output sao paulo explanation starting london city reach sao paulo city which destination city your trip consist london new york lima sao paulo example input paths bcdbca output explanation possible trips clearly destination city example input paths output constraints pathslength pathsilength cityailength citybilength cityai citybi strings consist lowercase uppercase english letters space character

circle rectangle overlapping given circle represented radius xcenter ycenter axisaligned rectangle represented where coordinates bottomleft corner coordinates topright corner rectangle return true circle rectangle overlapped otherwise return false other words check any point belongs circle rectangle same time example input radius xcenter ycenter output true explanation circle rectangle share point example input radius xcenter ycenter output false example input radius xcenter ycenter output true constraints radius xcenter ycenter

top travellers sql schema table users column name type int name varchar primary key table name name user table rides column name type int userid int distance int primary key table userid user who traveled distance distance write sql query report distance traveled each user return result table ordered travelleddistance descending order two more users traveled same distance order them their name ascending order query result format following example example input users table name alice bob alex donald lee jonathan elvis rides table userid distance output name travelleddistance elvis lee bob jonathan alex alice donald explanation elvis lee traveled miles elvis top traveler his name alphabetically smaller than lee bob jonathan alex alice only one ride order them total distances ride donald did not any rides distance traveled him

number ways wear different hats each other people types hats labeled given integer array hats where hatsi list hats preferred ith person return number ways people wear different hats each other since answer may too large return modulo example input hats output explanation only one way choose hats given conditions first person choose hat second person choose hat last one hat example input hats output explanation ways choose hats example input hats output explanation each person choose hats labeled number permutations constraints hatslength hatsilength hatsij hatsi contains list unique integers

nth highest salary sql schema table employee column name type int salary int primary key column table each row table contains information about salary employee write sql query report nth highest salary employee table nth highest salary query should report null query result format following example example input employee table salary output getnthhighestsalary example input employee table salary output getnthhighestsalary null

subrectangle queries implement class subrectanglequeries which receives rows cols rectangle matrix integers constructor supports two methods updatesubrectangleint row int col int row int col int newvalue updates values newvalue subrectangle whose upper left coordinate rowcol bottom coordinate rowcol getvalueint row int col returns current value coordinate rowcol rectangle example input subrectanglequeriesgetvalueupdatesubrectanglegetvaluegetvalueupdatesubrectanglegetvaluegetvalue output nullnullnull explanation subrectanglequeries subrectanglequeries new subrectanglequeries initial rectangle looks subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle after update rectangle looks subrectanglequeriesgetvalue return subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle after update rectangle looks subrectanglequeriesgetvalue return subrectanglequeriesgetvalue return example input subrectanglequeriesgetvalueupdatesubrectanglegetvaluegetvalueupdatesubrectanglegetvalue output nullnullnull explanation subrectanglequeries subrectanglequeries new subrectanglequeries subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle subrectanglequeriesgetvalue return subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle subrectanglequeriesgetvalue return constraints most operations considering both methods updatesubrectangle getvalue rows cols rows rectanglelength cols rectangleilength row row rows col col cols newvalue rectangleij row rows col cols

course schedule total numcourses courses take labeled numcourses given array prerequisites where prerequisitesi indicates must take course first want take course example pair indicates take course before take course prerequisites also indirect course prerequisite course course prerequisite course course prerequisite course also given array queries where queriesj jth query should answer whether course prerequisite course not return boolean array answer where answerj answer jth query example input numcourses prerequisites queries output falsetrue explanation pair indicates take course before take course course not prerequisite course but opposite true example input numcourses prerequisites queries output falsefalse explanation prerequisites each course independent example input numcourses prerequisites queries output truetrue constraints numcourses prerequisiteslength numcourses numcourses prerequisitesilength pairs unique prerequisites graph cycles querieslength

number subsequences satisfy given sum condition given array integers nums integer target return number nonempty subsequences nums such sum minimum maximum element less equal target since answer may too large return modulo example input nums target output explanation subsequences satisfy condition min value max value target example input nums target output explanation subsequences satisfy condition nums repeated numbers example input nums target output explanation nonempty subsequences two them not satisfy condition number valid subsequences constraints numslength numsi target

check array pairs divisible given array integers arr even length integer want divide array exactly pairs such sum each pair divisible return true find way false otherwise example input arr output true explanation pairs example input arr output true explanation pairs example input arr output false explanation try possible pairs see way divide arr pairs each sum divisible constraints arrlength even arri

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

check string contains binary codes size given binary string integer return true every binary code length substring otherwise return false example input output true explanation binary codes length they found substrings indices respectively example input output true explanation binary codes length clear both exist substring example input output false explanation binary code length does not exist array constraints slength either

cherry pickup given rows cols matrix grid representing field cherries where gridij represents number cherries collect cell two robots collect cherries robot located topleft corner robot located topright corner cols return maximum number cherries collection using both robots following rules below cell robots move cell when any robot passes cell picks cherries cell becomes empty cell when both robots stay same cell only one takes cherries both robots cannot move outside grid any moment both robots should reach bottom row grid example input grid output explanation path robot described color green blue respectively cherries taken robot cherries taken robot total cherries example input grid output explanation path robot described color green blue respectively cherries taken robot cherries taken robot total cherries constraints rows gridlength cols gridilength rows cols gridij

maximum number vowels substring given length given string integer return maximum number vowel letters any substring length vowel letters english example input abciiidef output explanation substring iii contains vowel letters example input aeiou output explanation any substring length contains vowels example input leetcode output explanation lee eet ode contain vowels constraints slength consists lowercase english letters slength

maximum number darts inside circular dartboard alice throwing darts very large wall given array darts where dartsi position ith dart alice threw wall bob knows positions darts wall wants place dartboard radius wall maximum number darts alice throws lies dartboard given integer return maximum number darts lie dartboard example input darts output explanation circle dartboard center radius contain points example input darts output explanation circle dartboard center radius contain points except point constraints dartslength dartsilength darts unique

rearrange words sentence given sentence text sentence string spaceseparated words following format first letter upper case each word text separated single space your task rearrange words text such words rearranged increasing order their lengths two words same length arrange them their original order return new text following format shown above example input text leetcode cool output cool leetcode explanation words leetcode length length cool length output ordered length new first word starts capital letter example input text keep calm code output keep calm code explanation output ordered follows letters letters keep letters case tie order position original text calm letters code letters example input text not output not constraints text begins capital letter contains lowercase letters single space between words textlength

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

path crossing given string path where pathi each representing moving one unit north south east west respectively start origin plane walk path specified path return true path crosses itself any point any time location previously visited return false otherwise example input path nes output false explanation notice path doesnt cross any point more than once example input path nesww output true explanation notice path visits origin twice constraints pathlength pathi either

maximum area piece cake after horizontal vertical cuts given rectangular cake size two arrays integers horizontalcuts verticalcuts where horizontalcutsi distance top rectangular cake ith horizontal cut similarly verticalcutsj distance left rectangular cake jth vertical cut return maximum area piece cake after cut each horizontal vertical position provided arrays horizontalcuts verticalcuts since answer large number return modulo example input horizontalcuts verticalcuts output explanation figure above represents given rectangular cake red lines horizontal vertical cuts after cut cake green piece cake maximum area example input horizontalcuts verticalcuts output explanation figure above represents given rectangular cake red lines horizontal vertical cuts after cut cake green yellow pieces cake maximum area example input horizontalcuts verticalcuts output constraints horizontalcutslength minh verticalcutslength minw horizontalcutsi verticalcutsi elements horizontalcuts distinct elements verticalcuts distinct

max value equation given array points containing coordinates points plane sorted xvalues where pointsi such pointslength also given integer return maximum value equation where pointslength guaranteed exists least one pair points satisfy constraint example input points output explanation first two points satisfy condition calculate equation get third fourth points also satisfy condition give value other pairs satisfy condition return max example input points output explanation only first two points absolute difference less xvalues give value constraints pointslength pointsilength pointslength form strictly increasing sequence

least number unique integers after removals given array integers arr integer find least number unique integers after removing exactly elements example input arr output explanation remove single only left example input arr output explanation remove either one two three left constraints arrlength arri arrlength

parallel courses given integer which indicates courses labeled also given array relations where relationsi prevcoursei nextcoursei representing prerequisite relationship between course prevcoursei course nextcoursei course prevcoursei taken before course nextcoursei also given integer one semester take most courses long taken prerequisites previous semesters courses taking return minimum number semesters needed take courses testcases generated such possible take every course example input relations output explanation figure above represents given graph first semester take courses second semester take course third semester take course example input relations output explanation figure above represents given graph first semester only take courses since cannot take more than two per semester second semester take course third semester take course fourth semester take course constraints relationslength relationsilength prevcoursei nextcoursei prevcoursei nextcoursei pairs prevcoursei nextcoursei unique given graph directed acyclic graph

avoid flood city your country infinite number lakes initially lakes empty but when rains over nth lake nth lake becomes full water rains over lake full water flood your goal avoid floods any lake given integer array rains where rainsi means rains over rainsi lake rainsi means rains day choose one lake day dry return array ans where anslength rainslength ansi rainsi ansi lake choose dry ith day rainsi multiple valid answers return any them impossible avoid flood return empty array notice chose dry full lake becomes empty but chose dry empty lake nothing changes example input rains output explanation after first day full lakes after second day full lakes after third day full lakes after fourth day full lakes theres day dry any lake flood any lake example input rains output explanation after first day full lakes after second day full lakes after third day dry lake full lakes after fourth day dry lake full lakes after fifth day full lakes after sixth day full lakes easy scenario floodfree another acceptable scenario example input rains output explanation after second day full lakes dry one lake third day after rain over lakes easy prove matter which lake choose dry day other one flood constraints rainslength rainsi

reorder routes paths lead city zero cities numbered roads such only one way travel between two different cities network form tree last year ministry transport decided orient roads one direction because they too narrow roads represented connections where connectionsi represents road city city year big event capital city many people want travel city your task consists reorienting some roads such each city visit city return minimum number edges changed guaranteed each city reach city after reorder example input connections output explanation change direction edges show red such each node reach node capital example input connections output explanation change direction edges show red such each node reach node capital example input connections output constraints connectionslength connectionsilength

average salary excluding minimum maximum salary given array unique integers salary where salaryi salary ith employee return average salary employees excluding minimum maximum salary answers within actual answer accepted example input salary output explanation minimum salary maximum salary respectively average salary excluding minimum maximum salary example input salary output explanation minimum salary maximum salary respectively average salary excluding minimum maximum salary constraints salarylength salaryi integers salary unique

group sold products date sql schema table activities column name type selldate date product varchar primary key table may contain duplicates each row table contains product name date sold market write sql query find each date number different products sold their names sold products names each date should sorted lexicographically return result table ordered selldate query result format following example example input activities table selldate product headphone pencil mask basketball bible mask tshirt output selldate numsold products basketballheadphonetshirt biblepencil mask explanation sold items headphone basketball tshirt sort them lexicographically separate them comma sold items pencil bible sort them lexicographically separate them comma sold item mask return

people whose list favorite companies not subset another list given array favoritecompanies where favoritecompaniesi list favorites companies ith person indexed return indices people whose list favorite companies not subset any other list favorites companies must return indices increasing order example input favoritecompanies leetcodegooglefacebookgooglemicrosoftgooglefacebookgoogleamazon output explanation person index favoritecompaniesgooglefacebook which subset favoritecompaniesleetcodegooglefacebook corresponding person index person index favoritecompaniesgoogle which subset favoritecompaniesleetcodegooglefacebook favoritecompaniesgooglemicrosoft other lists favorite companies not subset another list answer example input favoritecompanies leetcodegooglefacebookleetcodeamazonfacebookgoogle output explanation case favoritecompaniesfacebookgoogle subset favoritecompaniesleetcodegooglefacebook answer example input favoritecompanies leetcodegooglefacebookamazon output constraints favoritecompanieslength favoritecompaniesilength favoritecompaniesijlength strings favoritecompaniesi distinct lists favorite companies distinct sort alphabetically each list favoritecompaniesi favoritecompaniesj strings consist lowercase english letters only

house robber professional robber planning rob houses along street each house certain amount money stashed only constraint stopping robbing each them adjacent houses security systems connected automatically contact police two adjacent houses broken same night given integer array nums representing amount money each house return maximum amount money rob tonight without alerting police example input nums output explanation rob house money rob house money total amount rob example input nums output explanation rob house money rob house money rob house money total amount rob constraints numslength numsi

final prices special discount shop given integer array prices where pricesi price ith item shop special discount items shop buy ith item receive discount equivalent pricesj where minimum index such pricesj pricesi otherwise not receive any discount return integer array answer where answeri final price pay ith item shop considering special discount example input prices output explanation item price receive discount equivalent prices final price pay item price receive discount equivalent prices final price pay item price receive discount equivalent prices final price pay items not receive any discount example input prices output explanation case items not receive any discount example input prices output constraints priceslength pricesi

shuffle array given array nums consisting elements form xxxnyyyn return array form xyxyxnyn example input nums output explanation since answer example input nums output example input nums output constraints numslength numsi

longest subarray after deleting one element given binary array nums should delete one element return size longest nonempty subarray containing only resulting array return such subarray example input nums output explanation after deleting number position contains numbers value example input nums output explanation after deleting number position longest subarray value example input nums output explanation must delete one element constraints numslength numsi either

paint house iii row houses small city each house must painted one colors labeled some houses painted last summer should not painted again neighborhood maximal group continuous houses painted same color example houses contains neighborhoods given array houses matrix cost integer target where housesi color house house not painted yet costij cost paint house color return minimum cost painting remaining houses such way exactly target neighborhoods not possible return example input houses cost target output explanation paint houses way array contains target neighborhoods cost paint houses example input houses cost target output explanation some houses already painted paint houses way array contains target neighborhoods cost paint first last house example input houses cost target output explanation houses already painted total neighborhoods different target constraints houseslength costlength costilength target housesi costij

find two nonoverlapping subarrays each target sum given array integers arr integer target find two nonoverlapping subarrays arr each sum equal target multiple answers find answer where sum lengths two subarrays minimum return minimum sum lengths two required subarrays return cannot find such two subarrays example input arr target output explanation only two subarrays sum sum their lengths example input arr target output explanation although three nonoverlapping subarrays sum but choose first third subarrays sum their lengths example input arr target output explanation only one subarray sum constraints arrlength arri target

max dot product two subsequences given two arrays nums nums return maximum dot product between nonempty subsequences nums nums same length subsequence array new array which formed original array deleting some none characters without disturbing relative positions remaining characters subsequence while not example input nums nums output explanation take subsequence nums subsequence nums their dot product example input nums nums output explanation take subsequence nums subsequence nums their dot product example input nums nums output explanation take subsequence nums subsequence nums their dot product constraints numslength numslength numsi numsi

find critical pseudocritical edges minimum spanning tree given weighted undirected connected graph vertices numbered array edges where edgesi weighti represents bidirectional weighted edge between nodes minimum spanning tree mst subset graphs edges connects vertices without cycles minimum possible total edge weight find critical pseudocritical edges given graphs minimum spanning tree mst mst edge whose deletion graph would cause mst weight increase called critical edge other hand pseudocritical edge which appear some msts but not note return indices edges any order example input edges output explanation figure above describes graph following figure shows possible msts notice two edges appear msts they critical edges return them first list output edges only part some msts they considered pseudocritical edges add them second list output example input edges output explanation observe since edges equal weight choosing any edges given yield mst edges pseudocritical constraints edgeslength min edgesilength weighti pairs distinct

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

check word occurs prefix any word sentence given sentence consists some words separated single space searchword check searchword prefix any word sentence return index word sentence indexed where searchword prefix word searchword prefix more than one word return index first word minimum index such word return prefix string any leading contiguous substring example input sentence love eating burger searchword burg output explanation burg prefix burger which word sentence example input sentence problem easy problem searchword pro output explanation pro prefix problem which word sentence but return minimal index example input sentence tired searchword output explanation not prefix any word sentence constraints sentencelength searchwordlength sentence consists lowercase english letters spaces searchword consists lowercase english letters

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

duplicate emails sql schema table person column name type int email varchar primary key column table each row table contains email emails not contain uppercase letters write sql query report duplicate emails note guaranteed email field not null return result table any order query result format following example example input person table email abcom cdcom abcom output email abcom explanation abcom repeated two times

two arrays equal reversing subarrays given two integer arrays equal length target arr one step select any nonempty subarray arr reverse allowed any number steps return true arr equal target false otherwise example input target arr output true explanation follow next steps convert arr target reverse subarray arr becomes reverse subarray arr becomes reverse subarray arr becomes multiple ways convert arr target not only way example input target arr output true explanation arr equal target without any reverses example input target arr output false explanation arr does not value never converted target constraints targetlength arrlength targetlength targeti arri

kth ancestor tree node given tree nodes numbered form parent array parent where parenti parent ith node root tree node find kth ancestor given node kth ancestor tree node kth node path node root node implement treeancestor class treeancestorint int parent initializes object number nodes tree parent array int getkthancestorint node int return kth ancestor given node node such ancestor return example input treeancestor getkthancestor getkthancestor getkthancestor output null explanation treeancestor treeancestor new treeancestor treeancestorgetkthancestor returns which parent treeancestorgetkthancestor returns which grandparent treeancestorgetkthancestor returns because such ancestor constraints parentlength parent parenti node most queries

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

running sum array given array nums define running sum array runningsumi sumnums…numsi return running sum nums example input nums output explanation running sum obtained follows example input nums output explanation running sum obtained follows example input nums output constraints numslength numsi

probability two boxes having same number distinct balls given balls distinct colors given integer array balls size where ballsi number balls color balls shuffled uniformly random distribute first balls first box remaining balls other box please read explanation second example carefully please note two boxes considered different example two balls colors two boxes distribution considered different than distribution please read explanation first example carefully return probability two boxes same number distinct balls answers within actual value accepted correct example input balls output explanation only ways divide balls equally ball color box ball color box ball color box ball color box both ways number distinct colors each box equal probability example input balls output explanation set balls set balls shuffled randomly may one distinct shuffles equal probability after add first two balls first box second two balls second box see these possible random distributions same number distinct colors balls each box probability example input balls output explanation set balls hard display possible random shuffles set but easy check them same number distinct colors each box probability constraints ballslength ballsi sumballs even

allocate mailboxes given array houses where housesi location ith house along street integer allocate mailboxes street return minimum total distance between each house nearest mailbox test cases generated answer fits bit integer example input houses output explanation allocate mailboxes position minimum total distance each houses nearest mailboxes example input houses output explanation allocate mailboxes position minimum total distance each houses nearest mailboxes constraints houseslength housesi integers houses unique

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

pseudopalindromic paths binary tree given binary tree where node values digits path binary tree said pseudopalindromic least one permutation node values path palindrome return number pseudopalindromic paths going root node leaf nodes example input root null output explanation figure above represents given binary tree three paths going root node leaf nodes red path green path path these paths only red path green path pseudopalindromic paths since red path rearranged palindrome green path rearranged palindrome example input root nullnullnullnullnull output explanation figure above represents given binary tree three paths going root node leaf nodes green path path path these paths only green path pseudopalindromic since rearranged palindrome example input root output constraints number nodes tree range nodeval

minimum number days bouquets given integer array bloomday integer integer want bouquets bouquet need use adjacent flowers garden garden consists flowers ith flower bloom bloomdayi used exactly one bouquet return minimum number days need wait able bouquets garden impossible bouquets return example input bloomday output explanation let see what happened first three days means flower bloomed means flower did not bloom garden need bouquets each should contain flower after day only one bouquet after day only two bouquets after day bouquets answer example input bloomday output explanation need bouquets each flowers means need flowers only flowers impossible get needed bouquets return example input bloomday output explanation need bouquets each should flowers here garden after days after day one bouquet first three flowers bloomed cannot another bouquet last three flowers bloomed because they not adjacent after day obvious two bouquets different ways constraints bloomdaylength bloomdayi

making file names unique given array strings names size create folders your file system such ith minute create folder name namesi since two files cannot same name enter folder name previously used system suffix addition name form where smallest positive integer such obtained name remains unique return array strings length where ansi actual name system assign ith folder when create example input names pesfifagtapes output pesfifagtapes explanation lets see how file system creates folder names pes not assigned before remains pes fifa not assigned before remains fifa gta not assigned before remains gta pes not assigned before remains pes example input names gtagtagtaavalon output gtagtagtaavalon explanation lets see how file system creates folder names gta not assigned before remains gta gta not assigned before remains gta gta name reserved system adds since gta also reserved systems put becomes gta avalon not assigned before remains avalon example input names onepieceonepieceonepieceonepieceonepiece output onepieceonepieceonepieceonepieceonepiece explanation when last folder created smallest positive valid becomes onepiece constraints nameslength namesilength namesi consists lowercase english letters digits andor round brackets

valid phone numbers given text file filetxt contains list phone numbers one per line write oneliner bash script print valid phone numbers may assume valid phone number must appear one following two formats xxx xxxxxxx xxxxxxxxxx means digit may also assume each line text file must not contain leading trailing white spaces example assume filetxt following content your script should output following valid phone numbers

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

design browser history browser one tab where start homepage visit another url get back history number steps move forward history number steps implement browserhistory class browserhistorystring homepage initializes object homepage browser void visitstring url visits url current page clears forward history string backint steps move steps back history only return steps history steps return only steps return current url after moving back history most steps string forwardint steps move steps forward history only forward steps history steps forward only steps return current url after forwarding history most steps example input browserhistoryvisitvisitvisitbackbackforwardvisitforwardbackback leetcodecomgooglecomfacebookcomyoutubecomlinkedincom output nullnullnullnullfacebookcomgooglecomfacebookcomnulllinkedincomgooglecomleetcodecom explanation browserhistory browserhistory new browserhistoryleetcodecom browserhistoryvisitgooglecom leetcodecom visit googlecom browserhistoryvisitfacebookcom googlecom visit facebookcom browserhistoryvisityoutubecom facebookcom visit youtubecom browserhistoryback youtubecom move back facebookcom return facebookcom browserhistoryback facebookcom move back googlecom return googlecom browserhistoryforward googlecom move forward facebookcom return facebookcom browserhistoryvisitlinkedincom facebookcom visit linkedincom browserhistoryforward linkedincom cannot move forward any steps browserhistoryback linkedincom move back two steps facebookcom googlecom return googlecom browserhistoryback googlecom move back only one step leetcodecom return leetcodecom constraints homepagelength urllength steps homepage url consist lower case english letters most calls made visit back forward

xor operation array given integer integer start define array nums where numsi start indexed numslength return bitwise xor elements nums example input start output explanation array nums equal where where corresponds bitwise xor operator example input start output explanation array nums equal where constraints start numslength

maximum product two elements array given array integers nums choose two different indices array return maximum value numsinumsj example input nums output explanation choose indices indexed get maximum value numsnums example input nums output explanation choosing indices indexed get maximum value example input nums output constraints numslength numsi

strongest values array given array integers arr integer value arri said stronger than value arrj arri arrj where median array arri arrj arri said stronger than arrj arri arrj return list strongest values array return answer any arbitrary order median middle value ordered integer list more formally length list median element position sorted list indexed arr median obtained sorting array arr median arrm where median arr median obtained sorting array arr median arrm where median example input arr output explanation median elements array sorted strongest strongest elements also accepted answer please note although but stronger than because example input arr output explanation median elements array sorted strongest strongest elements example input arr output explanation median elements array sorted strongest any permutation accepted constraints arrlength arri arrlength

kth factor given two positive integers factor integer defined integer where consider list factors sorted ascending order return kth factor list return less than factors example input output explanation factors list factor example input output explanation factors list factor example input output explanation factors list only factors should return constraints follow could solve problem less than complexity

find longest awesome substring given string awesome substring nonempty substring such any number swaps order palindrome return length maximum length awesome substring example input output explanation longest awesome substring form palindrome some swaps example input output example input output explanation longest awesome substring form palindrome some swaps constraints slength consists only digits

number good leaf nodes pairs given root binary tree integer distance pair two different leaf nodes binary tree said good length shortest path between them less than equal distance return number good leaf node pairs tree example input root null distance output explanation leaf nodes tree length shortest path between them only good pair example input root distance output explanation good pairs shortest path pair not good because length ther shortest path between them example input root nullnullnullnullnullnull distance output explanation only good pair constraints number nodes tree range nodeval distance

string compression runlength encoding string compression method works replacing consecutive identical characters repeated more times concatenation character number marking count characters length run example compress string aabccc replace replace ccc compressed string becomes abc notice problem not adding after single characters given string integer need delete most characters such runlength encoded version minimum length find minimum length runlength encoded version after deleting most characters example input aaabcccd output explanation compressing without deleting anything give abcd length deleting any characters would most decrease length compressed string instance delete abcccd which compressed abcd optimal way delete compressed version length example input aabbaa output explanation delete both characters resulting compressed string would length example input aaaaaaaaaaa output explanation since zero cannot delete anything compressed string length constraints slength slength contains only lowercase english letters

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

generate parentheses given pairs parentheses write function generate combinations wellformed parentheses example input output example input output constraints

combine two tables sql schema table person column name type personid int lastname varchar firstname varchar personid primary key column table table contains information about some persons their first last names table address column name type addressid int personid int city varchar state varchar addressid primary key column table each row table contains information about city state one person personid write sql query report first name last name city state each person person table address personid not present address table report null instead return result table any order query result format following example example input person table personid lastname firstname wang allen alice bob address table addressid personid city state new york city new york leetcode california output firstname lastname city state allen wang null null bob alice new york city new york explanation address address table personid return null their city state addressid contains information about address personid

path maximum probability given undirected weighted graph nodes indexed represented edge list where edgesi undirected edge connecting nodes probability success traversing edge succprobi given two nodes start end find path maximum probability success start end return success probability path start end return your answer accepted differs correct answer most example input edges succprob start end output explanation two paths start end one having probability success other example input edges succprob start end output example input edges succprob start end output explanation path between constraints start end start end succproblength edgeslength succprobi most one edge between every two nodes

find kth bit nth binary string given two positive integers binary string formed follows reverseinvertsi where denotes concatenation operation reversex returns reversed string invertx inverts bits changes changes example first four strings above sequence return kth bit guaranteed valid given example input output explanation bit example input output explanation bit constraints

count good triplets given array integers arr three integers need find number good triplets triplet arri arrj arrk good following conditions true arrlength arri arrj arrj arrk arri arrk where denotes absolute value return number good triplets example input arr output explanation good triplets example input arr output explanation triplet satisfies conditions constraints arrlength arri

number good pairs given array integers nums return number good pairs pair called good numsi numsj example input nums output explanation good pairs indexed example input nums output explanation each pair array good example input nums output constraints numslength numsi

minimum number increments subarrays form target array given integer array target integer array initial same size target elements initially zeros one operation choose any subarray initial increment each value one return minimum number operations form target array initial test cases generated answer fits bit integer example input target output explanation need least operations form target array initial array increment index inclusive increment index inclusive increment index target array formed example input target output explanation example input target output explanation constraints targetlength targeti

best position service centre delivery company wants build new service center new city company knows positions customers city dmap wants build new center position such sum euclidean distances customers minimum given array positions where positionsi position ith customer map return minimum sum euclidean distances customers other words need choose position service center xcentre ycentre such following formula minimized answers within actual value accepted example input positions output explanation shown see choosing xcentre ycentre distance each customer sum distances which minimum possible achieve example input positions output explanation minimum possible sum distances sqrt sqrt constraints positionslength positionsilength

maximum number nonoverlapping subarrays sum equals target given array nums integer target return maximum number nonempty nonoverlapping subarrays such sum values each subarray equal target example input nums target output explanation nonoverlapping subarrays sum equals target example input nums target output explanation subarrays sum equal but only first nonoverlapping constraints numslength numsi target

range sum sorted subarray sums given array nums consisting positive integers computed sum nonempty continuous subarrays array sorted them nondecreasing order creating new array numbers return sum numbers index left index indexed inclusive new array since answer huge number return modulo example input nums left output explanation subarray sums after sorting them nondecreasing order new array sum numbers index example input nums left output explanation given array same example new array sum numbers index example input nums left output constraints numslength numslength numsi left

find value mysterious function closest target winston given above mysterious function func integer array arr integer target wants find values value funcarr target minimum possible return minimum possible value funcarr target notice func should called values where arrlength example input arr target output explanation calling func pairs winston got following results value closest minimum difference example input arr target output explanation winston called func possible values always got min difference example input arr target output constraints arrlength arri target

three consecutive odds given integer array arr return true three consecutive odd numbers array otherwise return false example input arr output false explanation three consecutive odds example input arr output true explanation three consecutive odds constraints arrlength arri

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

find winner array game given integer array arr distinct integers integer game played between first two elements array arr arr each round game compare arr arr larger integer wins remains position smaller integer moves end array game ends when integer wins consecutive rounds return integer which win game guaranteed winner game example input arr output explanation lets see rounds game round arr winner wincount see rounds played winner because wins consecutive games example input arr output explanation win first rounds consecutively constraints arrlength arri arr contains distinct integers

water bottles numbottles water bottles initially full water exchange numexchange empty water bottles market one full water bottle operation drinking full water bottle turns empty bottle given two integers numbottles numexchange return maximum number water bottles drink example input numbottles numexchange output explanation exchange empty bottles get full water bottle number water bottles drink example input numbottles numexchange output explanation exchange empty bottles get full water bottle number water bottles drink constraints numbottles numexchange

number nodes subtree same label given tree connected undirected graph cycles consisting nodes numbered exactly edges root tree node each node tree label which lowercase character given string labels node number label labelsi edges array given form edgesi which means edge between nodes tree return array size where ansi number nodes subtree ith node which same label node subtree tree tree consisting node descendant nodes example input edges labels abaedcd output explanation node label subtree node label answer notice any node part subtree node label subtree node contains nodes nodes different labels than node answer node itself example input edges labels bbbb output explanation subtree node contains only node answer subtree node contains only node answer subtree node contains nodes both label answer subtree node contains nodes label answer example input edges labels aabab output constraints edgeslength edgesilength labelslength labels consisting only lowercase english letters

patients condition sql schema table patients column name type patientid int patientname varchar conditions varchar patientid primary key table conditions contains more code separated spaces table contains information patients hospital write sql query report patientid patientname conditions patients who type diabetes type diabetes always starts diab prefix return result table any order query result format following example example input patients table patientid patientname conditions daniel yfev cough alice bob diab myop george acne diab alain diab output patientid patientname conditions bob diab myop george acne diab explanation bob george both condition starts diab

reformat date given date string form day month year where day set month set jan feb mar apr may jun jul aug sep oct nov dec year range convert date string format yyyymmdd where yyyy denotes digit year denotes digit month denotes digit day example input date oct output example input date jun output example input date may output constraints given dates guaranteed valid error handling necessary

minimum swaps arrange binary grid given binary grid one step choose two adjacent rows grid swap them grid said valid cells above main diagonal zeros return minimum number steps needed grid valid grid cannot valid main diagonal grid diagonal starts cell ends cell example input grid output example input grid output explanation rows similar swaps effect grid example input grid output constraints gridlength gridilength gridij either

maximum number nonoverlapping substrings given string lowercase letters need find maximum number nonempty substrings meet following conditions substrings not overlap any two substrings sij sxy either true substring contains certain character must also contain occurrences find maximum number substrings meet above conditions multiple solutions same number substrings return one minimum total length shown exists unique solution minimum total length notice return substrings any order example input adefaddaccc output efccc explanation following possible substrings meet conditions adefaddaccc adefadda ccc choose first string cannot choose anything else wed get only choose adefadda left ccc which only one doesnt overlap obtaining substrings notice also not optimal choose since split two optimal way choose efccc which gives substrings other solution same number substrings exist example input abbaccd output dbbcc explanation notice while set substrings dabbacc also length considered incorrect since larger total length constraints slength contains only lowercase english letters

number good ways split string given string split called good split two nonempty strings sleft sright where their concatenation equal sleft sright number distinct letters sleft sright same return number good splits example input aacaba output explanation ways split aacaba them good acaba left string string contains different letters respectively caba left string string contains different letters respectively aac aba left string string contains different letters respectively good split aaca left string string contains different letters respectively good split aacab left string string contains different letters respectively example input abcd output explanation split string follows constraints slength consists only lowercase english letters

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum insertions balance parentheses string given parentheses string containing only characters parentheses string balanced any left parenthesis must corresponding two consecutive parenthesis left parenthesis must before corresponding two consecutive parenthesis other words treat opening parenthesis closing parenthesis example balanced not balanced insert characters any position string balance needed return minimum number insertions needed balanced example input output explanation second two matching but first only matching need add one more end string which balanced example input output explanation string already balanced example input output explanation add match first add match last constraints slength consists only

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

find users valid emails sql schema table users column name type userid int name varchar mail varchar userid primary key table table contains information users signed website some emails invalid write sql query find users who valid emails valid email prefix name domain where prefix name string may contain letters upper lower case digits underscore period andor dash prefix name must start letter domain leetcodecom return result table any order query result format following example example input users table userid name mail winston winstonleetcodecom jonathan jonathanisgreat annabelle bellaleetcodecom sally sallycomeleetcodecom marwan quarzleetcodecom david davidgmailcom shapiro shapoleetcodecom output userid name mail winston winstonleetcodecom annabelle bellaleetcodecom sally sallycomeleetcodecom explanation mail user does not domain mail user sign which not allowed mail user does not leetcode domain mail user starts period

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

minimum cost cut stick given wooden stick length units stick labelled example stick length labelled follows given integer array cuts where cutsi denotes position should perform cut should perform cuts order change order cuts wish cost one cut length stick cut total cost sum costs cuts when cut stick split two smaller sticks sum their lengths length stick before cut please refer first example better explanation return minimum total cost cuts example input cuts output explanation using cuts order input leads following scenario first cut done rod length cost second cut done rod length second part first cut third done rod length last cut rod length total cost rearranging cuts example lead scenario total cost shown example photo example input cuts output explanation try given cuts ordering cost much ordering total cost example order total cost which minimum possible constraints cutslength minn cutsi integers cuts array distinct

number substrings only given binary string return number substrings characters since answer may too large return modulo example input output explanation substring total only characters times times time example input output explanation substring shown times example input output explanation each substring contains only characters constraints slength either

count odd numbers interval range given two nonnegative integers low high return count odd numbers between low high inclusive example input low high output explanation odd numbers between example input low high output explanation odd numbers between constraints low high

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

get maximum score given two sorted arrays distinct integers nums nums valid path defined follows choose array nums nums traverse index traverse current array left reading any value present nums nums allowed change your path other array only one repeated value considered valid path score defined sum uniques values valid path return maximum score obtain possible valid paths since answer may too large return modulo example input nums nums output explanation valid paths starting nums starting nums maximum obtained path green example input nums nums output explanation maximum sum obtained path example input nums nums output explanation common elements between nums nums maximum sum obtained path constraints numslength numslength numsi numsi nums nums strictly increasing

minimum difference between largest smallest value three moves given integer array nums one move choose one element nums change any value return minimum difference between largest smallest value nums after performing most three moves example input nums output explanation most moves first move change nums becomes second move change nums becomes third move change nums becomes after performing moves difference between minimum maximum example input nums output explanation most moves first move change nums becomes second move change nums becomes third move change nums becomes after performing moves difference between minimum maximum shown way difference moves example input nums output explanation most moves first move change nums becomes second move change nums becomes third move change nums becomes after performing moves difference between minimum maximum constraints numslength numsi

kth missing positive number given array arr positive integers sorted strictly increasing order integer return kth positive integer missing array example input arr output explanation missing positive integers missing positive integer example input arr output explanation missing positive integers missing positive integer constraints arrlength arri arri arrj arrlength follow could solve problem less than complexity

number subarrays odd sum given array integers arr return number subarrays odd sum since answer very large return modulo example input arr output explanation subarrays subarrays sum odd sums answer example input arr output explanation subarrays subarrays sum subarrays even sum answer example input arr output constraints arrlength arri

majority element given array nums size return majority element majority element element appears more than times may assume majority element always exists array example input nums output example input nums output constraints numslength numsi followup could solve problem linear time space

string great given string lower upper case english letters good string string which doesnt two adjacent characters where slength lowercase letter same letter but uppercase viceversa string good choose two adjacent characters string bad remove them keep doing string becomes good return string after making good answer guaranteed unique under given constraints notice empty string also good example input leeeetcode output leetcode explanation first step either choose both result leeeetcode reduced leetcode example input abbacc output explanation many possible scenarios lead same answer example abbacc aacc abbacc abba example input output constraints slength contains only lower upper case english letters

minimum suffix flips given indexed binary string target length another binary string length initially set zeros want equal target one operation pick index where flip bits inclusive range flip means changing return minimum number operations needed equal target example input target output explanation initially choose index choose index choose index need least flip operations form target example input target output explanation initially choose index choose index choose index need least flip operations form target example input target output explanation not need any operations since initial already equals target constraints targetlength targeti either

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

stone game alice bob take turns playing game alice starting first initially stones pile each players turn player makes move consisting removing any nonzero square number stones pile also player cannot move heshe loses game given positive integer return true only alice wins game otherwise return false assuming both players play optimally example input output true explanation alice remove stone winning game because bob doesnt any moves example input output false explanation alice only remove stone after bob removes last one winning game example input output true explanation already perfect square alice win one move removing stones constraints

count submatrices ones given binary matrix mat return number submatrices ones example input mat output explanation rectangles side rectangles side rectangles side rectangle side rectangle side total number rectangles example input mat output explanation rectangles side rectangles side rectangles side rectangles side rectangles side rectangles side rectangle side total number rectangles constraints matij either

last moment before ants fall out plank wooden plank length units some ants walking plank each ant moves speed unit per second some ants move left other move when two ants moving two different directions meet some point they change their directions continue moving again assume changing directions does not take any additional time when ant reaches one end plank time falls out plank immediately given integer two integer arrays left positions ants moving left return moment when last ants fall out plank example input left output explanation image above ant index named going ant index named going ant index named going left ant index named going left last moment when ant plank seconds after falls immediately out plank say ants plank example input left output explanation ants going ant index needs seconds fall example input left output explanation ants going left ant index needs seconds fall constraints leftlength lefti rightlength righti leftlength rightlength values left unique each value appear only one two arrays

minimum possible integer after most adjacent swaps digits given string num representing digits very large integer integer allowed swap any two adjacent digits integer most times return minimum integer obtain also string example input num output explanation steps obtain minimum integer adjacent swaps shown example input num output explanation output leading zeros but input guaranteed not any leading zeros example input num output explanation keep number without any swaps constraints numlength num consists only digits does not contain leading zeros

shuffle string given string integer array indices same length string shuffled such character ith position moves indicesi shuffled string return shuffled string example input codeleet indices output leetcode explanation shown codeleet becomes leetcode after shuffling example input abc indices output abc explanation after shuffling each character remains position constraints slength indiceslength consists only lowercase english letters indicesi values indices unique

convert string moves given two strings your goal convert moves less ith move choose any index indexed such slength not chosen any previous move shift character index times nothing shifting character means replacing next letter alphabet wrapping around becomes shifting character means applying shift operations times remember any index picked most once return true possible convert more than moves otherwise return false example input input ouput output true explanation move shift times get move shift get example input abc bcd output false explanation need shift each character one time convert shift move however way shift other characters remaining moves obtain example input aab bbb output true explanation move shift first time get move shift second times get constraints slength tlength contain only lowercase english letters

min stack design stack supports push pop top retrieving minimum element constant time implement minstack class minstack initializes stack object void pushint val pushes element val onto stack void pop removes element top stack int top gets top element stack int getmin retrieves minimum element stack must implement solution time complexity each function example input minstackpushpushpushgetminpoptopgetmin output nullnullnullnullnull explanation minstack minstack new minstack minstackpush minstackpush minstackpush minstackgetmin return minstackpop minstacktop return minstackgetmin return constraints val methods pop top getmin operations always called nonempty stacks most calls made push pop top getmin

strange printer strange printer following two special requirements each turn printer print solid rectangular pattern single color grid cover existing colors rectangle once printer used color above operation same color cannot used again given matrix targetgrid where targetgridrowcol color position row col grid return true possible print matrix targetgrid otherwise return false example input targetgrid output true example input targetgrid output true example input targetgrid output false explanation impossible form targetgrid because not allowed print same color different turns constraints targetgridlength targetgridilength targetgridrowcol

minimum operations array equal array arr length where arri valid values one operation select two indices where subtract arrx add arry perform arrx arry goal elements array equal guaranteed elements array made equal using some operations given integer length array return minimum number operations needed elements arr equal example input output explanation arr first operation choose leads arr second operation choose again arr example input output constraints

maximum number coins get piles coins varying size your friends take piles coins follows each step choose any piles coins not necessarily consecutive your choice alice pick pile maximum number coins pick next pile maximum number coins your friend bob pick last pile repeat more piles coins given array integers piles where pilesi number coins ith pile return maximum number coins example input piles output explanation choose triplet alice pick pile coins pile coins bob last one choose triplet alice pick pile coins pile coins bob last one maximum number coins which other hand choose arrangement only get coins which not optimal example input piles output example input piles output constraints pileslength pileslength pilesi

number ways split string given binary string split nonempty strings where return number ways split such number ones same since answer may too large return modulo example input output explanation four ways split parts where each part contain same number letters example input output example input output explanation three ways split parts constraints slength either

minimum time rope colorful alice balloons arranged rope given indexed string colors where colorsi color ith balloon alice wants rope colorful she does not want two consecutive balloons same color she asks bob help bob remove some balloons rope colorful given indexed integer array neededtime where neededtimei time seconds bob needs remove ith balloon rope return minimum time bob needs rope colorful example input colors abaac neededtime output explanation above image blue red green bob remove blue balloon index takes seconds longer two consecutive balloons same color total time example input colors abc neededtime output explanation rope already colorful bob does not need remove any balloons rope example input colors aabaa neededtime output explanation bob remove ballons indices each ballon takes second remove longer two consecutive balloons same color total time constraints colorslength neededtimelength neededtimei colors contains only lowercase english letters

throne inheritance kingdom consists king his children his grandchildren every once while someone family dies child born kingdom welldefined order inheritance consists king first member lets define recursive function successorx curorder which given person inheritance order far returns who should next person after order inheritance successorx curorder children children curorder king return null else return successorxs parent curorder else return oldest child whos not curorder example assume kingdom consists king his children alice bob alice older than bob finally alices son jack beginning curorder king calling successorking curorder return alice append curorder get king alice calling successoralice curorder return jack append curorder get king alice jack calling successorjack curorder return bob append curorder get king alice jack bob calling successorbob curorder return null order inheritance king alice jack bob using above function always obtain unique order inheritance implement throneinheritance class throneinheritancestring kingname initializes object throneinheritance class name king given part constructor void birthstring parentname string childname indicates parentname gave birth childname void deathstring name indicates death name death person doesnt affect successor function nor current inheritance order treat marking person dead string getinheritanceorder returns list representing current order inheritance excluding dead people example input throneinheritance birth birth birth birth birth birth getinheritanceorder death getinheritanceorder king king andy king bob king catherine andy matthew bob alex bob asha null bob null output null null null null null null null king andy matthew bob alex asha catherine null king andy matthew alex asha catherine explanation throneinheritance new throneinheritanceking order king tbirthking andy order king andy tbirthking bob order king andy bob tbirthking catherine order king andy bob catherine tbirthandy matthew order king andy matthew bob catherine tbirthbob alex order king andy matthew bob alex catherine tbirthbob asha order king andy matthew bob alex asha catherine tgetinheritanceorder return king andy matthew bob alex asha catherine tdeathbob order king andy matthew bob alex asha catherine tgetinheritanceorder return king andy matthew alex asha catherine constraints kingnamelength parentnamelength childnamelength namelength kingname parentname childname name consist lowercase english letters only arguments childname kingname distinct name arguments death passed either constructor childname birth first each call birthparentname childname guaranteed parentname alive most calls made birth death most calls made getinheritanceorder

minimum number days disconnect island given binary grid grid where represents land represents water island maximal directionally horizontal vertical connected group grid said connected exactly one island otherwise said disconnected one day allowed change any single land cell water cell return minimum number days disconnect grid example input grid output explanation need least days get disconnected grid change land grid grid water get disconnected island example input grid output explanation grid full water also disconnected islands constraints gridlength gridilength gridij either

maximum profit operating centennial wheel operator centennial wheel four gondolas each gondola room four people ability rotate gondolas counterclockwise which costs runningcost dollars given array customers length where customersi number new customers arriving before ith rotation indexed means must rotate wheel times before customersi customers arrive cannot customers wait room gondola each customer pays boardingcost dollars when they board gondola closest ground exit once gondola reaches ground again stop wheel any time before serving customers decide stop serving customers subsequent rotations free order get customers down safely note currently more than four customers waiting wheel only four board gondola rest wait next rotation return minimum number rotations need perform maximize your profit scenario where profit positive return example input customers boardingcost runningcost output explanation numbers written gondolas number people currently customers arrive board wait next gondola wheel rotates current profit customers arrive waiting board wheel other wait wheel rotates current profit final customers board gondola wheel rotates current profit highest profit after rotating wheel times example input customers boardingcost runningcost output explanation customers arrive board wait next gondola wheel rotates current profit customers arrive board wait originally waiting newly waiting wheel rotates current profit final customers arrive board wait wheel rotates current profit board wait wheel rotates current profit board wait wheel rotates current profit board waits wheel rotates current profit boards wheel rotates current profit highest profit after rotating wheel times example input customers boardingcost runningcost output explanation customers arrive board wait wheel rotates current profit customers arrive board wait wheel rotates current profit customers arrive board wait wheel rotates current profit customers arrive board waits wheel rotates current profit customer arrives board wait wheel rotates current profit profit never positive return constraints customerslength customersi boardingcost runningcost

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

special positions binary matrix given binary matrix mat return number special positions mat position called special matij other elements row column rows columns indexed example input mat output explanation special position because mat other elements row column example input mat output explanation special positions constraints matlength matilength matij either

binary tree side view given root binary tree imagine yourself standing side return values nodes see ordered top bottom example input root nullnull output example input root null output example input root output constraints number nodes tree range nodeval

minimum numbers function calls target array given integer array nums integer array arr same length values set initially also following modify function want use modify function convert arr nums using minimum number calls return minimum number function calls nums arr test cases generated answer fits bit signed integer example input nums output explanation increment second element get operation double elements operations increment both elements operations total operations example input nums output explanation increment both elements operations double elements operation total operations example input nums output explanation initial nums constraints numslength numsi

detect cycles grid given array characters grid size need find exists any cycle consisting same value grid cycle path length more grid starts ends same cell given cell move one cells adjacent one four directions down left same value current cell also cannot move cell visited your last move example cycle invalid because visited which last visited cell return true any cycle same value exists grid otherwise return false example input grid aaaaabbaabbaaaaa output true explanation two valid cycles shown different colors image below example input grid cccacdccccecfccc output true explanation only one valid cycle highlighted image below example input grid abbbzbbba output false constraints gridlength gridilength grid consists only lowercase english letters

number ways where square number equal product two numbers given two arrays integers nums nums return number triplets formed type type under following rules type triplet numsi numsj numsk where numslength numslength type triplet numsi numsj numsk where numslength numslength example input nums nums output explanation type nums nums nums example input nums nums output explanation triplets valid because type numsi numsj numsk type numsi numsj numsk example input nums nums output explanation valid triplets type nums nums nums type nums nums nums constraints numslength numslength numsi numsi

maximum non negative product matrix given matrix grid initially located topleft corner each step only move down matrix possible paths starting topleft corner ending bottomright corner find path maximum nonnegative product product path product integers grid cells visited along path return maximum nonnegative product modulo maximum product negative return notice modulo performed after getting maximum product example input grid output explanation not possible get nonnegative product path return example input grid output explanation maximum nonnegative product shown example input grid output explanation maximum nonnegative product shown constraints gridlength gridilength gridij

find latest group size given array arr represents permutation numbers binary string size initially bits set zero each step assuming both binary string arr indexed bit position arri set also given integer find latest step which exists group ones length group ones contiguous substring such cannot extended either direction return latest step which exists group ones length exactly such group exists return example input arr output explanation step groups step groups step groups step groups step groups latest step which exists group size step example input arr output explanation step groups step groups step groups step groups step groups group size exists any step constraints arrlength arri integers arr distinct

count unhappy friends given list preferences friends where always even each person preferencesi contains list friends sorted order preference other words friend earlier list more preferred than friend later list friends each list denoted integers friends divided pairs pairings given list pairs where pairsi denotes paired paired however pairing may cause some friends unhappy friend unhappy paired exists friend who paired but prefers over prefers over return number unhappy friends example input preferences pairs output explanation friend unhappy because paired but prefers over prefers over friend unhappy because paired but prefers over prefers over friends happy example input preferences pairs output explanation both friends happy example input preferences pairs output constraints even preferenceslength preferencesilength preferencesij preferencesi does not contain values preferencesi unique pairslength pairsilength each person contained exactly one pair

most visited sector circular track given integer integer array rounds circular track which consists sectors labeled marathon held track marathon consists rounds ith round starts sector roundsi ends sector roundsi example round starts sector rounds ends sector rounds return array most visited sectors sorted ascending order notice circulate track ascending order sector numbers counterclockwise direction see first example example input rounds output explanation marathon starts sector order visited sectors follows end round end round end round marathon see both sectors visited twice they most visited sectors sectors visited only once example input rounds output example input rounds output constraints roundslength roundsi roundsi roundsi

maximum sum obtained any permutation array integers nums array requests where requestsi starti endi ith request asks sum numsstarti numsstarti numsendi numsendi both starti endi indexed return maximum total sum requests permutations nums since answer may too large return modulo example input nums requests output explanation one permutation nums following result requests nums nums nums requests nums nums total sum permutation higher total sum following result requests nums nums nums requests nums nums total sum which best example input nums requests output explanation permutation max total sum request sums example input nums requests output explanation permutation max total sum request sums constraints numslength numsi requestslength requestsilength starti endi

thousand separator given integer add dot thousands separator return string format example input output example input output constraints

split string max number unique substrings given string return maximum number unique substrings given string split split string any list nonempty substrings where concatenation substrings forms original string however must split substrings such them unique substring contiguous sequence characters within string example input ababccc output explanation one way split maximally splitting not valid multiple times example input aba output explanation one way split maximally example input output explanation impossible split string any further constraints slength contains only lower case english letters

maximum product subarray given integer array nums find subarray largest product return product test cases generated answer fit bit integer example input nums output explanation largest product example input nums output explanation result cannot because not subarray constraints numslength numsi product any prefix suffix nums guaranteed fit bit integer

magnetic force between two balls universe earth rick discovered special form magnetic force between two balls they put his new invented basket rick empty baskets ith basket positioni morty balls needs distribute balls baskets such minimum magnetic force between any two balls maximum rick stated magnetic force between two different balls positions given integer array position integer return required force example input position output explanation distributing balls baskets magnetic force between ball pairs minimum magnetic force cannot achieve larger minimum magnetic force than example input position output explanation use baskets constraints positionlength positioni integers position distinct positionlength

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

count possible routes given array distinct positive integers locations where locationsi represents position city also given integers start finish fuel representing starting city ending city initial amount fuel respectively each step city pick any city such locationslength move city moving city city reduces amount fuel locationsi locationsj please notice denotes absolute value notice fuel cannot become negative any point time allowed visit any city more than once start finish return count possible routes start finish since answer may too large return modulo example input locations start finish fuel output explanation following possible routes each uses units fuel example input locations start finish fuel output explanation following possible routes used fuel used fuel used fuel used fuel used fuel example input locations start finish fuel output explanation impossible get using only units fuel since shortest route needs units fuel constraints locationslength locationsi integers locations distinct start finish locationslength fuel

stone game several stones arranged row each stone associated value which integer given array stonevalue each round game alice divides row two nonempty rows left row row bob calculates value each row which sum values stones row bob throws away row which maximum value alices score increases value remaining row value two rows equal bob lets alice decide which row thrown away next round starts remaining row game ends when only one stone remaining alices initially zero return maximum score alice obtain example input stonevalue output explanation first round alice divides row left row value row value bob throws away row alices score second round alice divides row time bob throws away left row alices score becomes last round alice only one choice divide row which bob throws away row alices score game ends because only one stone remaining row example input stonevalue output example input stonevalue output constraints stonevaluelength stonevaluei

maximum length subarray positive product given array integers nums find maximum length subarray where product elements positive subarray array consecutive sequence zero more values taken out array return maximum length subarray positive product example input nums output explanation array nums already positive product example input nums output explanation longest subarray positive product which product notice cannot include subarray since thatll product which not positive example input nums output explanation longest subarray positive product constraints numslength numsi

customer who visited but did not any transactions sql schema table visits column name type visitid int customerid int visitid primary key table table contains information about customers who visited mall table transactions column name type transactionid int visitid int amount int transactionid primary key table table contains information about transactions made visitid write sql query find ids users who visited without making any transactions number times they made these types visits return result table sorted any order query result format following example example input visits visitid customerid transactions transactionid visitid amount output customerid countnotrans explanation customer visited mall once made one transaction visit customer visited mall once made one transaction visit customer visited mall once did not any transactions customer visited mall three times visits they did not any transactions one visit they made transactions customer visited mall once did not any transactions see users ids visited mall one time without making any transactions also user visited mall twice did not any transactions

minimum number days eat oranges oranges kitchen decided eat some these oranges every day follows eat one orange number remaining oranges divisible eat oranges number remaining oranges divisible eat oranges only choose one actions per day given integer return minimum number days eat oranges example input output explanation oranges day eat orange day eat oranges since divisible day eat oranges day eat last orange need least days eat oranges example input output explanation oranges day eat oranges since divisible day eat oranges since divisible day eat last orange need least days eat oranges constraints

replace avoid consecutive repeating characters given string containing only lowercase english letters character convert characters lowercase letters such final string does not contain any consecutive repeating characters cannot modify non characters guaranteed consecutive repeating characters given string except return final string after conversions possibly zero made more than one solution return any them shown answer always possible given constraints example input output azs explanation solutions problem azs yzs valid only invalid modification string consist consecutive repeating characters zzs example input ubvw output ubvaw explanation solutions problem only invalid modifications strings consist consecutive repeating characters ubvvw ubvww constraints slength consist lowercase english letters

minimum cost connect two groups points given two groups points where first group size points second group size points size size cost connection between any two points given size size matrix where costij cost connecting point first group point second group groups connected each point both groups connected one more points opposite group other words each point first group must connected least one point second group each point second group must connected least one point first group return minimum cost takes connect two groups example input cost output explanation optimal way connecting groups results total cost example input cost output explanation optimal way connecting groups results total cost note multiple points connected point first group point second group does not matter limit number points connected only care about minimum total cost example input cost output constraints size costlength size costilength size size size size costij

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

kth largest element array given integer array nums integer return kth largest element array note kth largest element sorted order not kth distinct element must solve time complexity example input nums output example input nums output constraints numslength numsi

bank account summary sql schema table users column name type account int name varchar account primary key table each row table contains account number each user bank two users having same name table table transactions column name type transid int account int amount int transactedon date transid primary key table each row table contains changes made accounts amount positive user received money negative they transferred money accounts start balance write sql query report name balance users balance higher than balance account equal sum amounts transactions involving account return result table any order query result format following example example input users table account name alice bob charlie transactions table transid account amount transactedon output name balance alice explanation alices balance bobs balance charlies balance

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

sum divisible given array positive integers nums remove smallest subarray possibly empty such sum remaining elements divisible not allowed remove whole array return length smallest subarray need remove impossible subarray defined contiguous block elements array example input nums output explanation sum elements nums which not divisible remove subarray sum remaining elements which divisible example input nums output explanation cannot remove single element get sum divisible best way remove subarray leaving sum example input nums output explanation here sum which already divisible not need remove anything constraints numslength numsi

sum odd length subarrays given array positive integers arr return sum possible oddlength subarrays arr subarray contiguous subsequence array example input arr output explanation oddlength subarrays arr their sums add these together get example input arr output explanation only subarrays odd length their sum example input arr output constraints arrlength arri follow could solve problem time complexity

remove max number edges keep graph fully traversable alice bob undirected graph nodes three types edges type traversed alice only type traversed bob only type traversed both alice bob given array edges where edgesi typei represents bidirectional edge type typei between nodes find maximum number edges remove after removing edges graph fully traversed both alice bob graph fully traversed alice bob starting any node they reach other nodes return maximum number edges remove return alice bob cannot fully traverse graph example input edges output explanation remove edges graph fully traversable alice bob removing any additional edge not maximum number edges remove example input edges output explanation notice removing any edge not graph fully traversable alice bob example input edges output explanation current graph alice cannot reach node other nodes likewise bob cannot reach impossible graph fully traversable constraints edgeslength min edgesilength typei tuples typei distinct

crawler log folder leetcode file system keeps log each time some user performs change folder operation operations described below move parent folder current folder already main folder remain same folder remain same folder move child folder named folder guaranteed always exist given list strings logs where logsi operation performed user ith step file system starts main folder operations logs performed return minimum number operations needed back main folder after change folder operations example input logs ddd output explanation use change folder operation times back main folder example input logs dddd output example input logs output constraints logslength logsilength logsi contains lowercase english letters digits logsi follows format described statement folder names consist lowercase english letters digits

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

minimum number vertices reach nodes given directed acyclic graph vertices numbered array edges where edgesi fromi toi represents directed edge node fromi node toi find smallest set vertices which nodes graph reachable guaranteed unique solution exists notice return vertices any order example input edges output explanation not possible reach nodes single vertex reach reach output example input edges output explanation notice vertices not reachable any other node must include them also any these vertices reach nodes constraints edgeslength min edgesilength fromi toi pairs fromi toi distinct

matrix diagonal sum given square matrix mat return sum matrix diagonals only include sum elements primary diagonal elements secondary diagonal not part primary diagonal example input mat output explanation diagonals sum notice element mat counted only once example input mat output example input mat output constraints matlength matilength matij

shortest subarray removed array sorted given integer array arr remove subarray empty arr such remaining elements arr nondecreasing return length shortest subarray remove subarray contiguous subsequence array example input arr output explanation shortest subarray remove length remaining elements after which sorted another correct solution remove subarray example input arr output explanation since array strictly decreasing only keep single element need remove subarray length either example input arr output explanation array already nondecreasing not need remove any elements constraints arrlength arri

house robber professional robber planning rob houses along street each house certain amount money stashed houses place arranged circle means first house neighbor last one meanwhile adjacent houses security system connected automatically contact police two adjacent houses broken same night given integer array nums representing amount money each house return maximum amount money rob tonight without alerting police example input nums output explanation cannot rob house money rob house money because they adjacent houses example input nums output explanation rob house money rob house money total amount rob example input nums output constraints numslength numsi

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

check string transformable substring sort operations given two strings transform string string using following operation any number times choose nonempty substring sort place characters ascending order example applying operation underlined substring results return true possible transform otherwise return false substring contiguous sequence characters within string example input output true explanation transform using following sort operations index index example input output true explanation transform using following sort operations example input output false constraints slength tlength slength consist only digits

detect pattern length repeated more times given array positive integers arr find pattern length repeated more times pattern subarray consecutive subsequence consists one more values repeated multiple times consecutively without overlapping pattern defined length number repetitions return true exists pattern length repeated more times otherwise return false example input arr output true explanation pattern length repeated consecutive times notice pattern repeated more times but not less example input arr output true explanation pattern length repeated consecutive times another valid pattern also repeated times example input arr output false explanation pattern length but repeated only times pattern length repeated more times constraints arrlength arri

min cost connect points given array points representing integer coordinates some points dplane where pointsi cost connecting two points manhattan distance between them where val denotes absolute value val return minimum cost points connected points connected exactly one simple path between any two points example input points output explanation connect points shown above get minimum cost notice unique path between every pair points example input points output constraints pointslength pairs distinct

number ways reorder array get same bst given array nums represents permutation integers going construct binary search tree bst inserting elements nums order initially empty bst find number different ways reorder nums constructed bst identical formed original array nums example given nums root left child child array also yields same bst but yields different bst return number ways reorder nums such bst formed identical original bst formed nums since answer may very large return modulo example input nums output explanation reorder nums which yield same bst other ways reorder nums which yield same bst example input nums output explanation following arrays yield same bst example input nums output explanation other orderings nums yield same bst constraints numslength numsi numslength integers nums distinct

rearrange spaces between words given string text words placed some number spaces each word consists one more lowercase english letters separated least one space guaranteed text contains least one word rearrange spaces equal number spaces between every pair adjacent words number maximized cannot redistribute spaces equally place extra spaces end meaning returned string should same length text return string after rearranging spaces example input text sentence output sentence explanation total spaces words evenly divide spaces between words spaces example input text practice makes perfect output practice makes perfect explanation total spaces words spaces plus extra space place extra space end string constraints textlength text consists lowercase english letters text contains least one word

number sets nonoverlapping line segments given points plane where ith point find number ways draw exactly nonoverlapping line segments such each segment covers two more points endpoints each segment must integral coordinates line segments not cover points they allowed share endpoints return number ways draw nonoverlapping line segments since number huge return modulo example input output explanation two line segments shown red blue image above shows different ways example input output explanation ways example input output explanation total number possible ways draw line segments taking number modulo gives constraints

check array formation concatenation given array distinct integers arr array integer arrays pieces where integers pieces distinct your goal form arr concatenating arrays pieces any order however not allowed reorder integers each array piecesi return true possible form array arr pieces otherwise return false example input arr pieces output true explanation concatenate example input arr pieces output false explanation even though numbers match cannot reorder pieces example input arr pieces output true explanation concatenate constraints pieceslength arrlength sumpiecesilength arrlength piecesilength arrlength arri piecesij integers arr distinct integers pieces distinct flatten pieces array integers array distinct

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

split two strings palindrome given two strings same length choose index split both strings same index splitting two strings aprefix asuffix where aprefix asuffix splitting two strings bprefix bsuffix where bprefix bsuffix check aprefix bsuffix bprefix asuffix forms palindrome when split string sprefix ssuffix either ssuffix sprefix allowed empty example abc abc abc valid splits return true possible form palindrome string otherwise return false notice denotes concatenation strings example input output true explaination either palindromes answer true since split following way aprefix asuffix bprefix bsuffix aprefix bsuffix which palindrome example input xbdef xecab output false example input ulacfd jizalu output true explaination split them index aprefix ula asuffix cfd bprefix jiz bsuffix alu aprefix bsuffix ula alu ulaalu which palindrome constraints alength blength alength blength consist lowercase english letters

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

even odd tree binary tree named evenodd meets following conditions root binary tree level index children level index their children level index etc every evenindexed level nodes level odd integer values strictly increasing order left every oddindexed level nodes level even integer values strictly decreasing order left given root binary tree return true binary tree evenodd otherwise return false example input root nullnullnull output true explanation node values each level level level level level since levels odd increasing levels even decreasing tree evenodd example input root output false explanation node values each level level level level node values level must strictly increasing order tree not evenodd example input root output false explanation node values level should even integers constraints number nodes tree range nodeval

create sorted array instructions given integer array instructions asked create sorted array elements instructions start empty container nums each element left instructions insert nums cost each insertion minimum following number elements currently nums strictly less than instructionsi number elements currently nums strictly greater than instructionsi example inserting element nums cost insertion min elements less than element greater than nums become return total cost insert elements instructions nums since answer may large return modulo example input instructions output explanation begin nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums total cost example input instructions output explanation begin nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums total cost example input instructions output explanation begin nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums insert cost min nums total cost constraints instructionslength instructionsi

maximum nesting depth parentheses string valid parentheses string denoted vps meets one following empty string single character not equal written concatenated where vpss written where vps similarly define nesting depth depths any vps follows depth depthc where string single character not equal deptha maxdeptha depthb where vpss depth deptha where vps example vpss nesting depths not vpss given vps represented string return nesting depth example input output explanation digit inside nested parentheses string example input output constraints slength consists digits characters guaranteed parentheses expression vps

coordinate maximum network quality given array network towers towers where towersi denotes ith network tower location quality factor coordinates integral coordinates plane distance between two coordinates euclidean distance also given integer radius where tower reachable distance less than equal radius outside distance signal becomes garbled tower not reachable signal quality ith tower coordinate calculated formula ⌊qi where distance between tower coordinate network quality coordinate sum signal qualities reachable towers return array representing integral coordinate where network quality maximum multiple coordinates same network quality return lexicographically minimum nonnegative coordinate note coordinate lexicographically smaller than either ⌊val⌋ greatest integer less than equal val floor function example input towers radius output explanation coordinate total quality quality results sqrt⌋ quality results sqrt⌋ quality results sqrt⌋ other coordinate higher network quality example input towers radius output explanation since only one tower network quality highest towers location example input towers radius output explanation coordinate highest network quality constraints towerslength towersilength radius

kth smallest instructions bob standing cell wants reach destination row column only travel down going help bob providing instructions him reach destination instructions represented string where each character either meaning move horizontally meaning move vertically down multiple instructions lead bob destination example destination both hhhvv hvhvh valid instructions however bob very picky bob lucky number wants kth lexicographically smallest instructions lead him destination indexed given integer array destination integer return kth lexicographically smallest instructions take bob destination example input destination output hhhvv explanation instructions reach lexicographic order follows hhhvv hhvhv hhvvh hvhhv hvhvh hvvhh vhhhv vhhvh vhvhh vvhhh example input destination output hhvhv example input destination output hhvvh constraints destinationlength row column ncrrow column row where ncra denotes choose

rank transform matrix given matrix return new matrix answer where answerrowcol rank matrixrowcol rank integer represents how large element compared other elements calculated using following rules rank integer starting two elements same row column rankp rankq rankp rankq rankp rankq rank should small possible test cases generated answer unique under given rules example input matrix output explanation rank matrix because smallest integer row column rank matrix because matrix matrix matrix rank rank matrix because matrix matrix matrix rank rank matrix because matrix matrix matrix matrix both matrix matrix rank example input matrix output example input matrix output constraints matrixlength matrixilength matrixrowcol

mean array after removing some elements given integer array arr return mean remaining integers after removing smallest largest elements answers within actual answer considered accepted example input arr output explanation after erasing minimum maximum values array elements equal mean example input arr output example input arr output constraints arrlength arrlength multiple arri

path minimum effort hiker preparing upcoming hike given heights array size rows columns where heightsrowcol represents height cell row col situated topleft cell hope travel bottomright cell rows columns indexed move down left wish find route requires minimum effort routes effort maximum absolute difference heights between two consecutive cells route return minimum effort required travel topleft cell bottomright cell example input heights output explanation route maximum absolute difference consecutive cells better than route where maximum absolute difference example input heights output explanation route maximum absolute difference consecutive cells which better than route example input heights output explanation route does not require any effort constraints rows heightslength columns heightsilength rows columns heightsij

sort array increasing frequency given array integers nums sort array increasing order based frequency values multiple values same frequency sort them decreasing order return sorted array example input nums output explanation frequency frequency frequency example input nums output explanation both frequency they sorted decreasing order example input nums output constraints numslength numsi

percentage users attended contest sql schema table users column name type userid int username varchar userid primary key table each row table contains name user table register column name type contestid int userid int contestid userid primary key table each row table contains user contest they registered write sql query find percentage users registered each contest rounded two decimals return result table ordered percentage descending order case tie order contestid ascending order query result format following example example input users table userid username alice bob alex register table contestid userid output contestid percentage explanation users registered contests percentage sort them answer table contestid ascending order alice alex registered contest percentage bob registered contest percentage

jump game given indexed array integers nums length initially positioned nums each element numsi represents maximum length forward jump index other words numsi jump any numsi where numsi return minimum number jumps reach numsn test cases generated such reach numsn example input nums output explanation minimum number jumps reach last index jump step index steps last index example input nums output constraints numslength numsi guaranteed reach numsn

remove linked list elements given head linked list integer val remove nodes linked list nodeval val return new head example input head val output example input head val output example input head val output constraints number nodes list range nodeval val

get maximum generated array given integer indexed integer array nums length generated following way nums nums nums numsi when nums numsi numsi when return maximum integer array nums example input output explanation according given rules nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums maximum max example input output explanation according given rules nums maximum max example input output explanation according given rules nums maximum max constraints

slowest key newly designed keypad tested where tester pressed sequence keys one time given string keyspressed length where keyspressedi ith key pressed testing sequence sorted list releasetimes where releasetimesi time ith key released both arrays indexed key pressed time every subsequent key pressed exact time previous key released tester wants know key keypress longest duration ith keypress duration releasetimesi releasetimesi keypress duration releasetimes note same key could pressed multiple times test these multiple presses same key may not same duration return key keypress longest duration multiple such keypresses return lexicographically largest key keypresses example input releasetimes keyspressed cbcd output explanation keypresses follows keypress duration pressed time released time keypress duration pressed time after release previous character released time keypress duration pressed time after release previous character released time keypress duration pressed time after release previous character released time longest these keypress second keypress both duration lexicographically larger than answer example input releasetimes keyspressed spuda output explanation keypresses follows keypress duration keypress duration keypress duration keypress duration keypress duration longest these keypress duration constraints releasetimeslength keyspressedlength releasetimesi releasetimesi releasetimesi keyspressed contains only lowercase english letters

alert using same keycard three more times one hour period leetcode company workers use keycards unlock office doors each time worker uses their keycard security system saves workers name time when used system emits alert any worker uses keycard three more times onehour period given list strings keyname keytime where keynamei keytimei corresponds persons name time when their keycard used single day access times given hour time format hhmm such return list unique worker names who received alert frequent keycard use sort names ascending order alphabetically notice considered within onehour period while not considered within onehour period example input keyname danieldanieldanielluisluisluisluis keytime output daniel explanation daniel used keycard times onehour period example input keyname alicealicealicebobbobbobbob keytime output bob explanation bob used keycard times onehour period constraints keynamelength keytimelength keynamelength keytimelength keytimei format hhmm keynamei keytimei unique keynameilength keynamei contains only lowercase english letters

count substrings differ one character given two strings find number ways choose nonempty substring replace single character different character such resulting substring substring other words find number substrings differ some substring exactly one character example underlined substrings computer computation only differ valid way return number substrings satisfy condition above substring contiguous sequence characters within string example input aba baba output explanation following pairs substrings differ exactly character aba baba aba baba aba baba aba baba aba baba aba baba underlined portions substrings chosen example input output explanation following pairs substrings differ character underlined portions substrings chosen constraints slength tlength consist lowercase english letters only

furthest building reach given integer array heights representing heights buildings some bricks some ladders start your journey building move next building possibly using bricks ladders while moving building building indexed current buildings height greater than equal next buildings height not need ladder bricks current buildings height less than next buildings height either use one ladder bricks return furthest building index indexed reach use given ladders bricks optimally example input heights bricks ladders output explanation starting building follow these steps building without using ladders nor bricks since building using bricks must use either bricks ladders because building without using ladders nor bricks since building using your only ladder must use either bricks ladders because impossible beyond building because not any more bricks ladders example input heights bricks ladders output example input heights bricks ladders output constraints heightslength heightsi bricks ladders heightslength

design parking system design parking system parking lot parking lot three kinds parking spaces big medium small fixed number slots each size implement parkingsystem class parkingsystemint big int medium int small initializes object parkingsystem class number slots each parking space given part constructor bool addcarint cartype checks whether parking space cartype car wants get parking lot cartype three kinds big medium small which represented respectively car only park parking space cartype space available return false else park car size space return true example input parkingsystem addcar addcar addcar addcar output null true true false false explanation parkingsystem parkingsystem new parkingsystem parkingsystemaddcar return true because available slot big car parkingsystemaddcar return true because available slot medium car parkingsystemaddcar return false because available slot small car parkingsystemaddcar return false because available slot big car already occupied constraints big medium small cartype most calls made addcar

find servers handled most number requests servers numbered being used handle multiple requests simultaneously each server infinite computational capacity but cannot handle more than one request time requests assigned servers according specific algorithm ith indexed request arrives servers busy request dropped not handled kth server available assign request server otherwise assign request next available server wrapping around list servers starting necessary example ith server busy try assign request ith server ith server given strictly increasing array arrival positive integers where arrivali represents arrival time ith request another array load where loadi represents load ith request time takes complete your goal find busiest servers server considered busiest handled most number requests successfully servers return list containing ids indexed busiest servers may return ids any order example input arrival load output explanation servers start out available first requests handled first servers order request comes server busy assigned next available server which request comes cannot handled since servers busy dropped servers handled one request each while server handled two requests server busiest server example input arrival load output explanation first requests handled first servers request comes handled server since server available server handled two requests while servers handled one request each server busiest server example input arrival load output explanation each server handles single request they considered busiest constraints arrivallength loadlength arrivallength loadlength arrivali loadi arrival strictly increasing

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

number ways form target string given dictionary given list strings same length words string target your task form target using given words under following rules target should formed left form ith character indexed target choose kth character jth string words targeti wordsjk once use kth character jth string words longer use xth character any string words where other words characters left index become unusuable every string repeat process form string target notice use multiple characters same string words provided conditions above met return number ways form target words since answer may too large return modulo example input words accabbbbcaca target aba output explanation ways form target aba index acca index bbbb index caca aba index acca index bbbb index caca aba index acca index bbbb index acca aba index acca index bbbb index acca aba index caca index bbbb index acca aba index caca index bbbb index caca example input words abbabaab target bab output explanation ways form target bab index baab index baab index abba bab index baab index baab index baab bab index baab index baab index baab bab index abba index baab index baab constraints wordslength wordsilength strings words same length targetlength wordsi target contain only lowercase english letters

fancy sequence write api generates fancy sequences using append addall multall operations implement fancy class fancy initializes object empty sequence void appendval appends integer val end sequence void addallinc increments existing values sequence integer inc void multallm multiplies existing values sequence integer int getindexidx gets current value index idx indexed sequence modulo index greater equal than length sequence return example input fancy append addall append multall getindex addall append multall getindex getindex getindex output null null null null null null null null explanation fancy fancy new fancy fancyappend fancy sequence fancyaddall fancy sequence fancyappend fancy sequence fancymultall fancy sequence fancygetindex return fancyaddall fancy sequence fancyappend fancy sequence fancymultall fancy sequence fancygetindex return fancygetindex return fancygetindex return constraints val inc idx most calls total made append addall multall getindex

contains duplicate given integer array nums return true any value appears least twice array return false every element distinct example input nums output true example input nums output false example input nums output true constraints numslength numsi

sell diminishingvalued colored balls inventory different colored balls customer wants orders balls any color customer weirdly values colored balls each colored balls value number balls color currently your inventory example own yellow balls customer would pay first yellow ball after transaction only yellow balls left next yellow ball valued value balls decreases sell more customer given integer array inventory where inventoryi represents number balls ith color initially own also given integer orders which represents total number balls customer wants sell balls any order return maximum total value attain after selling orders colored balls answer may too large return modulo example input inventory orders output explanation sell color time color times maximum total value example input inventory orders output explanation sell color times color times maximum total value constraints inventorylength inventoryi orders minsuminventoryi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

maximum number achievable transfer requests buildings numbered each building number employees transfer season some employees want change building they reside given array requests where requestsi fromi toi represents employees request transfer building fromi building toi buildings full list requests achievable only each building net change employee transfers zero means number employees leaving equal number employees moving example two employees leaving building one leaving building one leaving building should two employees moving building one employee moving building one employee moving building return maximum number achievable requests example input requests output explantion lets see requests building employees both want move building building employees they want move buildings respectively building employee they want move building building employee they want move building building dont any requests achieve requests users swapping their places achieve requests users swapping places buildings example input requests output explantion lets see requests building employee they want stay same building building employee they want move building building employee they want move building achieve requests example input requests output constraints requestslength requestsilength fromi toi

maximal network rank infrastructure cities some number roads connecting these cities each roadsi indicates bidirectional road between cities network rank two different cities defined total number directly connected roads either city road directly connected both cities only counted once maximal network rank infrastructure maximum network rank pairs different cities given integer array roads return maximal network rank entire infrastructure example input roads output explanation network rank cities roads connected either road between only counted once example input roads output explanation roads connected cities example input roads output explanation network rank notice cities not connected constraints roadslength roadsilength each pair cities most one road connecting them

lexicographically smallest string after applying operations given string even length consisting digits two integers apply either following two operations any number times any order add odd indices indexed digits post cycled back example becomes rotate positions example becomes return lexicographically smallest string obtain applying above operations any number times string lexicographically smaller than string same length first position where differ string letter appears earlier alphabet than corresponding letter example lexicographically smaller than because first position they differ third letter comes before example input output explanation apply following operations start rotate add add rotate add add rotate add way obtain string lexicographically smaller example input output explanation apply following operations start rotate add rotate way obtain string lexicographically smaller example input output explanation sequence operations give lexicographically smaller string than constraints slength slength even consists digits only slength

maximum number visible points given array points integer angle your location where location posx posy pointsi both denote integral coordinates plane initially facing directly east your position cannot move your position but rotate other words posx posy cannot changed your field view degrees represented angle determining how wide see any given view direction let amount degrees rotate counterclockwise your field view inclusive range angles angle angle your browser does not support video tag video format see some set points each point angle formed point your position immediate east direction your position your field view multiple points one coordinate may points your location always see these points regardless your rotation points not obstruct your vision other points return maximum number points see example input points angle location output explanation shaded region represents your field view points made visible your field view even though front same line sight example input points angle location output explanation points made visible your field view one your location example input points angle location output explanation only see one two points shown above constraints pointslength pointsilength locationlength angle posx posy

special array elements greater than equal given array nums nonnegative integers nums considered special exists number such exactly numbers nums greater than equal notice does not element nums return array special otherwise return proven nums special value unique example input nums output explanation values greater than equal example input nums output explanation numbers fit criteria should numbers but should number but should numbers but cannot greater since only numbers nums example input nums output explanation values greater than equal constraints numslength numsi

graph connectivity threshold cities labeled two different cities labels directly connected bidirectional road only share common divisor strictly greater than some threshold more formally cities labels road between them exists integer such following true threshold given two integers threshold array queries must determine each queriesi cities connected directly indirectly some path between them return array answer where answerlength querieslength answeri true ith query path between answeri false path example input threshold queries output falsefalsetrue explanation divisors each number using underlined divisors above threshold only cities share common divisor they only ones directly connected result each query not connected not connected connected path example input threshold queries output truetruetruetruetrue explanation divisors each number same previous example however since threshold divisors used since numbers share divisor cities connected example input threshold queries output falsefalsefalsefalsefalse explanation only cities share common divisor which strictly greater than threshold they only ones directly connected please notice multiple queries same pair nodes query equivalent query constraints threshold querieslength queriesilength cities

minimum deletions character frequencies unique string called good two different characters same frequency given string return minimum number characters need delete good frequency character string number times appears string example string aab frequency while frequency example input aab output explanation already good example input aaabbbcc output explanation delete two resulting good string aaabcc another way delete one one resulting good string aaabbc example input ceabaacb output explanation delete both resulting good string eabaab note only care about characters string end frequency ignored constraints slength contains only lowercase english letters

course schedule total numcourses courses take labeled numcourses given array prerequisites where prerequisitesi indicates must take course first want take course example pair indicates take course first take course return ordering courses should take finish courses many valid answers return any them impossible finish courses return empty array example input numcourses prerequisites output explanation total courses take take course should finished course correct course order example input numcourses prerequisites output explanation total courses take take course should finished both courses both courses should taken after finished course one correct course order another correct ordering example input numcourses prerequisites output constraints numcourses prerequisiteslength numcourses numcourses prerequisitesilength numcourses pairs distinct

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

minimum one bit operations integers zero given integer must transform using following operations any number times change rightmost bit binary representation change ith bit binary representation ith bit set ith bits set return minimum number operations transform example input output explanation binary representation operation since bit operation example input output explanation binary representation operation since bit bits operation operation since bit operation constraints

best team conflicts manager basketball team upcoming tournament want choose team highest overall score score team sum scores players team however basketball team not allowed conflicts conflict exists younger player strictly higher score than older player conflict does not occur between players same age given two lists scores ages where each scoresi agesi represents score age ith player respectively return highest overall score possible basketball teams example input scores ages output explanation choose players example input scores ages output explanation best choose last players notice allowed choose multiple people same age example input scores ages output explanation best choose first players constraints scoreslength ageslength scoreslength ageslength scoresi agesi

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

count sorted vowel strings given integer return number strings length consist only vowels lexicographically sorted string lexicographically sorted valid same comes before alphabet example input output explanation sorted strings consist vowels only aeiou example input output explanation sorted strings consist vowels only aaaeaiaoaueeeieoeuiiioiuooouuu note not valid string since comes after alphabet example input output constraints

count subtrees max distance between cities cities numbered given array edges size where edgesi represents bidirectional edge between cities exists unique path between each pair cities other words cities form tree subtree subset cities where every city reachable every other city subset where path between each pair passes only cities subset two subtrees different city one subtree not present other each find number subtrees which maximum distance between any two cities subtree equal return array size where dth element indexed number subtrees which maximum distance between any two cities equal notice distance between two cities number edges path between them example input edges output explanation subtrees subsets max distance subtrees subsets max distance subtree two nodes where max distance between them example input edges output example input edges output constraints edgeslength edgesilength pairs distinct

largest substring between two equal characters given string return length longest substring between two equal characters excluding two characters such substring return substring contiguous sequence characters within string example input output explanation optimal substring here empty substring between two example input abca output explanation optimal substring here example input cbzxy output explanation characters appear twice constraints slength contains only lowercase english letters

widest vertical area between two points containing points given points plane where pointsi return widest vertical area between two points such points inside area vertical area area fixedwidth extending infinitely along yaxis infinite height widest vertical area one maximum width note points edge vertical area not considered included area example input points output explanation both red blue area optimal example input points output constraints pointslength pointsilength

find valid matrix given row column sums given two arrays rowsum colsum nonnegative integers where rowsumi sum elements ith row colsumj sum elements jth column matrix other words not know elements matrix but know sums each row column find any matrix nonnegative integers size rowsumlength colsumlength satisfies rowsum colsum requirements return array representing any matrix fulfills requirements guaranteed least one matrix fulfills requirements exists example input rowsum colsum output explanation row rowsum row rowsum column colsum column colsum row column sums match matrix elements nonnegative another possible matrix example input rowsum colsum output constraints rowsumlength colsumlength rowsumi colsumi sumrowsum sumcolsum

arithmetic subarrays sequence numbers called arithmetic consists least two elements difference between every two consecutive elements same more formally sequence arithmetic only valid example these arithmetic sequences following sequence not arithmetic given array integers nums two arrays integers each representing range queries where ith query range arrays indexed return list boolean elements answer where answeri true subarray numsli numsli numsri rearranged form arithmetic sequence false otherwise example input nums output truefalsetrue explanation query subarray rearranged which arithmetic sequence query subarray cannot rearranged arithmetic sequence query subarray rearranged which arithmetic sequence example input nums output falsetruefalsefalsetruetrue constraints numslength llength rlength numsi

basic calculator given string representing valid expression implement basic calculator evaluate return result evaluation note not allowed use any builtin function which evaluates strings mathematical expressions such eval example input output example input output example input output constraints slength consists digits represents valid expression not used unary operation invalid could used unary operation valid two consecutive operators input every number running calculation fit signed bit integer

minimum deletions string balanced given string consisting only characters delete any number characters balanced balanced pair indices such return minimum number deletions needed balanced example input aababbab output explanation either delete characters indexed positions aababbab aaabbb delete characters indexed positions aababbab aabbbb example input bbaaaaabb output explanation only solution delete first two characters constraints slength

minimum number removals mountain array may recall array arr mountain array only arrlength exists some index indexed arrlength such arr arr arri arri arri arri arrarrlength given integer array nums return minimum number elements remove nums mountain array example input nums output explanation array itself mountain array not need remove any elements example input nums output explanation one solution remove elements indices making array nums constraints numslength numsi guaranteed mountain array out nums

maximum erasure value given array positive integers nums want erase subarray containing unique elements score get erasing subarray equal sum elements return maximum score get erasing exactly one subarray array called subarray forms contiguous subsequence equal alalar some example input nums output explanation optimal subarray here example input nums output explanation optimal subarray here constraints numslength numsi

maximize grid happiness given four integers introvertscount extrovertscount grid two types people introverts extroverts introvertscount introverts extrovertscount extroverts should decide how many people want live grid assign each them one grid cell note not people living grid happiness each person calculated follows introverts start happiness lose happiness each neighbor introvert extrovert extroverts start happiness gain happiness each neighbor introvert extrovert neighbors live directly adjacent cells north east south west persons cell grid happiness sum each persons happiness return maximum possible grid happiness example input introvertscount extrovertscount output explanation assume grid indexed coordinates row column put introvert cell put extroverts cells introvert happiness starting happiness neighbors extrovert happiness starting happiness neighbor extrovert happiness starting happiness neighbor grid happiness above figure shows grid example each persons happiness introvert stays light green cell while extroverts live light purple cells example input introvertscount extrovertscount output explanation place two introverts extrovert introvert happiness starting happiness neighbor extrovert happiness starting happiness neighbors introvert happiness starting happiness neighbor grid happiness example input introvertscount extrovertscount output constraints introvertscount extrovertscount minm

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

richest customer wealth given integer grid accounts where accountsij amount money ith customer jth bank return wealth richest customer customers wealth amount money they their bank accounts richest customer customer maximum wealth example input accounts output explanation customer wealth customer wealth both customers considered richest wealth each return example input accounts output explanation customer wealth customer wealth customer wealth customer richest wealth example input accounts output constraints accountslength accountsilength accountsij

sum absolute differences sorted array given integer array nums sorted nondecreasing order build return integer array result same length nums such resulti equal summation absolute differences between numsi other elements array other words resulti equal sumnumsinumsj where numslength indexed example input nums output explanation assuming arrays indexed result result result example input nums output constraints numslength numsi numsi

minimum initial energy finish tasks given array tasks where tasksi actuali minimumi actuali actual amount energy spend finish ith task minimumi minimum amount energy require begin ith task example task your current energy cannot start task however your current energy complete task your energy after finishing finish tasks any order return minimum initial amount energy need finish tasks example input tasks output explanation starting energy finish tasks following order task energy task energy task energy notice even though leftover energy starting energy does not work because cannot task example input tasks output explanation starting energy finish tasks following order task energy task energy task energy task energy task energy example input tasks output explanation starting energy finish tasks following order task energy task energy task energy task energy task energy task energy constraints taskslength actuali minimumi

smallest string given numeric value numeric value lowercase character defined position indexed alphabet numeric value numeric value numeric value numeric value string consisting lowercase characters defined sum characters numeric values example numeric value string abe equal given two integers return lexicographically smallest string length equal numeric value equal note string lexicographically smaller than string comes before dictionary order either prefix first position such comes before alphabetic order example input output aay explanation numeric value string smallest string such value length equal example input output aaszz constraints

minimum incompatibility given integer array nums integer asked distribute array subsets equal size such two equal elements same subset subsets incompatibility difference between maximum minimum elements array return minimum possible sum incompatibilities subsets after distributing array optimally return not possible subset group integers appear array particular order example input nums output explanation optimal distribution subsets incompatibility note would result smaller sum but first subset contains equal elements example input nums output explanation optimal distribution subsets incompatibility example input nums output explanation impossible distribute nums subsets where two elements equal same subset constraints numslength numslength divisible numsi numslength

implement stack using queues implement lastinfirstout lifo stack using only two queues implemented stack should support functions normal stack push top pop empty implement mystack class void pushint pushes element top stack int pop removes element top stack returns int top returns element top stack boolean empty returns true stack empty false otherwise notes must use only standard operations queue which means only push back peekpop front size empty operations valid depending your language queue may not supported natively may simulate queue using list deque doubleended queue long use only queues standard operations example input mystack push push top pop empty output null null null false explanation mystack mystack new mystack mystackpush mystackpush mystacktop return mystackpop return mystackempty return false constraints most calls made push pop top empty calls pop top valid followup implement stack using only one queue

delivering boxes storage ports task delivering some boxes storage their ports using only one ship however ship limit number boxes total weight carry given array boxes where boxesi portsi weighti three integers portscount maxboxes maxweight portsi port where need deliver ith box weightsi weight ith box portscount number ports maxboxes maxweight respective box weight limits ship boxes need delivered order they given ship follow these steps ship take some number boxes boxes queue not violating maxboxes maxweight constraints each loaded box order ship trip port box needs delivered deliver ship already correct port trip needed box immediately delivered ship makes return trip storage take more boxes queue ship must end storage after boxes delivered return minimum number trips ship needs deliver boxes their respective ports example input boxes portscount maxboxes maxweight output explanation optimal strategy follows ship takes boxes queue goes port port port again returns storage trips total number trips note first third boxes cannot delivered together because boxes need delivered order second box needs delivered port before third box example input boxes portscount maxboxes maxweight output explanation optimal strategy follows ship takes first box goes port returns storage trips ship takes second third fourth boxes goes port returns storage trips ship takes fifth box goes port returns storage trips total number trips example input boxes portscount maxboxes maxweight output explanation optimal strategy follows ship takes first second boxes goes port returns storage trips ship takes third fourth boxes goes port returns storage trips ship takes fifth sixth boxes goes port returns storage trips total number trips constraints boxeslength portscount maxboxes maxweight portsi portscount weightsi maxweight

checking existence edge length limited paths undirected graph nodes defined edgelist where edgelisti disi denotes edge between nodes distance disi note may multiple edges between two nodes given array queries where queriesj limitj your task determine each queriesj whether path between such each edge path distance strictly less than limitj return boolean array answer where answerlength querieslength jth value answer true path queriesj true false otherwise example input edgelist queries output falsetrue explanation above figure shows given graph note two overlapping edges between distances first query between path where each distance less than return false query second query path two edges distances less than return true query example input edgelist queries output truefalse explanation above figure shows given graph constraints edgelistlength querieslength edgelistilength queriesjlength disi limitj may multiple edges between two nodes

fix names table sql schema table users column name type userid int name varchar userid primary key table table contains name user name consists only lowercase uppercase characters write sql query fix names only first character uppercase rest lowercase return result table ordered userid query result format following example example input users table userid name alice bob output userid name alice bob

minimum moves array complementary given integer array nums even length integer limit one move replace any integer nums another integer between limit inclusive array nums complementary indices indexed numsi numsn equals same number example array complementary because indices numsi numsn return minimum number moves required nums complementary example input nums limit output explanation move change nums underlined elements changed nums nums nums nums nums nums nums nums numsi numsni every nums complementary example input nums limit output explanation moves change nums cannot change any number since limit example input nums limit output explanation nums already complementary constraints numslength numsi limit even

maximum height stacking cuboids given cuboids where dimensions ith cuboid cuboidsi widthi lengthi heighti indexed choose subset cuboids place them each other place cuboid cuboid widthi widthj lengthi lengthj heighti heightj rearrange any cuboids dimensions rotating put another cuboid return maximum height stacked cuboids example input cuboids output explanation cuboid placed bottom side facing down height cuboid placed next side facing down height cuboid placed next side facing down height total height example input cuboids output explanation cant place any cuboids other choose cuboid rotate side facing down height example input cuboids output explanation after rearranging cuboids see cuboids same dimension place side down cuboids their heights maximum height stacked cuboids constraints cuboidslength widthi lengthi heighti

stone game vii alice bob take turns playing game alice starting first stones arranged row each players turn they remove either leftmost stone rightmost stone row receive points equal sum remaining stones values row winner one higher score when stones left remove bob found always lose game poor bob always loses decided minimize scores difference alices goal maximize difference score given array integers stones where stonesi represents value ith stone left return difference alice bobs score they both play optimally example input stones output explanation alice removes gets points alice bob stones bob removes gets points alice bob stones alice removes gets points alice bob stones bob removes gets points alice bob stones alice removes gets points alice bob stones score difference example input stones output constraints stoneslength stonesi

find most competitive subsequence given integer array nums positive integer return most competitive subsequence nums size arrays subsequence resulting sequence obtained erasing some possibly zero elements array define subsequence more competitive than subsequence same length first position where differ subsequence number less than corresponding number example more competitive than because first position they differ final number less than example input nums output explanation set every possible subsequence most competitive example input nums output constraints numslength numsi numslength

design ordered stream stream idkey value pairs arriving arbitrary order where idkey integer between value string two pairs same design stream returns values increasing order their ids returning chunk list values after each insertion concatenation chunks should result list sorted values implement orderedstream class orderedstreamint constructs stream take values string insertint idkey string value inserts pair idkey value stream returns largest possible chunk currently inserted values appear next order example input orderedstream insert insert insert insert insert ccccc aaaaa bbbbb eeeee ddddd output null aaaaa bbbbb ccccc ddddd eeeee explanation note values ordered aaaaa bbbbb ccccc ddddd eeeee orderedstream new orderedstream osinsert ccccc inserts ccccc returns osinsert aaaaa inserts aaaaa returns aaaaa osinsert bbbbb inserts bbbbb returns bbbbb ccccc osinsert eeeee inserts eeeee returns osinsert ddddd inserts ddddd returns ddddd eeeee concatentating chunks returned aaaaa bbbbb ccccc ddddd eeeee aaaaa bbbbb ccccc ddddd eeeee resulting order same order above constraints valuelength value consists only lowercase letters each call insert unique exactly calls made insert

reformat phone number given phone number string number number consists digits spaces andor dashes would reformat phone number certain manner firstly remove spaces dashes group digits left blocks length fewer digits final digits grouped follows digits single block length digits single block length digits two blocks length each blocks joined dashes notice reformatting process should never produce any blocks length produce most two blocks length return phone number after formatting example input number output explanation digits step more than digits group next digits block step digits remaining put them single block length block joining blocks gives example input number output explanation digits step more than digits group next digits block step digits left split them two blocks length blocks joining blocks gives example input number output explanation digits step block step block step digits left put them single block length block joining blocks gives constraints numberlength number consists digits characters least two digits number

count number consistent strings given string allowed consisting distinct characters array strings words string consistent characters string appear string allowed return number consistent strings array words example input allowed words adbdaaabbaabadab output explanation strings aaab baa consistent since they only contain characters example input allowed abc words abcabacbcabc output explanation strings consistent example input allowed cad words ccacdbbabacbadacd output explanation strings acd consistent constraints wordslength allowedlength wordsilength characters allowed distinct wordsi allowed contain only lowercase english letters

basic calculator given string which represents expression evaluate expression return value integer division should truncate toward zero may assume given expression always valid intermediate results range note not allowed use any builtin function which evaluates strings mathematical expressions such eval example input output example input output example input output constraints slength consists integers operators separated some number spaces represents valid expression integers expression nonnegative integers range answer guaranteed fit bit integer

max number ksum pairs given integer array nums integer one operation pick two numbers array whose sum equals remove them array return maximum number operations perform array example input nums output explanation starting nums remove numbers nums remove numbers nums more pairs sum total operations example input nums output explanation starting nums remove first two nums more pairs sum total operation constraints numslength numsi

ways fair array given integer array nums choose exactly one index indexed remove element notice index elements may change after removal example nums choosing remove index results nums choosing remove index results nums choosing remove index results nums array fair sum oddindexed values equals sum evenindexed values return number indices could choose such after removal nums fair example input nums output explanation remove index even sum odd sum not fair remove index even sum odd sum fair remove index even sum odd sum not fair remove index even sum odd sum not fair index remove nums fair example input nums output explanation remove any index remaining array fair example input nums output explanation cannot fair array after removing any index constraints numslength numsi

maximum repeating substring string sequence string word krepeating word concatenated times substring sequence words maximum krepeating value highest value where word krepeating sequence word not substring sequence words maximum krepeating value given strings sequence word return maximum krepeating value word sequence example input sequence ababc word output explanation abab substring ababc example input sequence ababc word output explanation substring ababc baba not substring ababc example input sequence ababc word output explanation not substring ababc constraints sequencelength wordlength sequence word contains only lowercase english letters

distribute repeating integers given array integers nums where most unique values array also given array customer order quantities quantity where quantityi amount integers ith customer ordered determine possible distribute nums such ith customer gets exactly quantityi integers integers ith customer gets equal every customer satisfied return true possible distribute nums according above conditions example input nums quantity output false explanation customer cannot given two different integers example input nums quantity output true explanation customer given integers not used example input nums quantity output true explanation customer given customer given constraints numslength numsi quantitylength quantityi most unique values nums

minimum operations reduce zero given integer array nums integer one operation either remove leftmost rightmost element array nums subtract value note modifies array future operations return minimum number operations reduce exactly possible otherwise return example input nums output explanation optimal solution remove last two elements reduce zero example input nums output example input nums output explanation optimal solution remove last three elements first two elements operations total reduce zero constraints numslength numsi

number students unable eat lunch school cafeteria offers circular square sandwiches lunch break referred numbers respectively students stand queue each student either prefers square circular sandwiches number sandwiches cafeteria equal number students sandwiches placed stack each step student front queue prefers sandwich top stack they take leave queue otherwise they leave queues end continues none queue students want take top sandwich unable eat given two integer arrays students sandwiches where sandwichesi type ith sandwich stack top stack studentsj preference jth student initial queue front queue return number students unable eat example input students sandwiches output explanation front student leaves top sandwich returns end line making students front student leaves top sandwich returns end line making students front student takes top sandwich leaves line making students sandwiches front student leaves top sandwich returns end line making students front student takes top sandwich leaves line making students sandwiches front student leaves top sandwich returns end line making students front student takes top sandwich leaves line making students sandwiches front student takes top sandwich leaves line making students sandwiches students able eat example input students sandwiches output constraints studentslength sandwicheslength studentslength sandwicheslength sandwichesi studentsi

goal parser interpretation own goal parser interpret string command command consists alphabet andor some order goal parser interpret string string string interpreted strings concatenated original order given string command return goal parsers interpretation command example input command gal output goal explanation goal parser interprets command follows final concatenated result goal example input command gal output gooooal example input command algalg output algaloog constraints commandlength command consists andor some order

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

concatenation consecutive binary numbers given integer return decimal value binary string formed concatenating binary representations order modulo example input output explanation binary corresponds decimal value example input output explanation binary corresponds after concatenating them which corresponds decimal value example input output explanation concatenation results decimal value after modulo result constraints

daily leads partners sql schema table dailysales column name type dateid date makename varchar leadid int partnerid int table does not primary key table contains date name product sold ids lead partner sold name consists only lowercase english letters write sql query each dateid makename return number distinct leadids distinct partnerids return result table any order query result format following example example input dailysales table dateid makename leadid partnerid toyota toyota toyota toyota toyota honda honda honda honda honda output dateid makename uniqueleads uniquepartners toyota toyota honda honda explanation toyota gets leads partners while honda gets leads partners toyota gets leads partners while honda gets leads partners

search matrix write efficient algorithm searches value target integer matrix matrix matrix following properties integers each row sorted ascending left integers each column sorted ascending top bottom example input matrix target output true example input matrix target output false constraints matrixlength matrixilength matrixij integers each row sorted ascending order integers each column sorted ascending order target

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

partitioning minimum number decibinary numbers decimal number called decibinary each digits either without any leading zeros example decibinary while not given string represents positive decimal integer return minimum number positive decibinary numbers needed they sum example input output explanation example input output example input output constraints nlength consists only digits does not contain any leading zeros represents positive integer

determine two strings close two strings considered close attain one other using following operations operation swap any two existing characters example abcde aecdb operation transform every occurrence one existing character another existing character same other character example aacabb bbcbaa turn turn use operations either string many times necessary given two strings word word return true word word close false otherwise example input word abc word bca output true explanation attain word word operations apply operation abc acb apply operation acb bca example input word word output false explanation impossible attain word word vice versa any number operations example input word cabbba word abbccc output true explanation attain word word operations apply operation cabbba caabbb apply operation caabbb baaccc apply operation baaccc abbccc constraints wordlength wordlength word word contain only lowercase english letters

average time process per machine sql schema table activity column name type machineid int processid int activitytype enum timestamp float table shows user activities factory website machineid processid activitytype primary key table machineid machine processid process running machine machineid activitytype enum type start end timestamp float representing current time seconds start means machine starts process given timestamp end means machine ends process given timestamp start timestamp always before end timestamp every machineid processid pair factory website several machines each running same number processes write sql query find average time each machine takes complete process time complete process end timestamp minus start timestamp average time calculated total time complete every process machine divided number processes run resulting table should machineid along average time processingtime which should rounded decimal places return result table any order query result format following example example input activity table machineid processid activitytype timestamp start end start end start end start end start end start end output machineid processingtime explanation machines running processes each machine average time machine average time machine average time

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

merge between linked lists given two linked lists list list sizes respectively remove lists nodes ath node bth node put list their place blue edges nodes following figure indicate result build result list return head example input list list output explanation remove nodes put entire list their place blue edges nodes above figure indicate result example input list list output explanation blue edges nodes above figure indicate result constraints listlength listlength listlength

minimum jumps reach home certain bugs home xaxis position help them get position bug jumps according following rules jump exactly positions forward jump exactly positions backward left cannot jump backward twice row cannot jump any forbidden positions bug may jump forward beyond home but cannot jump positions numbered negative integers given array integers forbidden where forbiddeni means bug cannot jump position forbiddeni integers return minimum number jumps needed bug reach home possible sequence jumps lands bug position return example input forbidden output explanation jumps forward get bug home example input forbidden output example input forbidden output explanation one jump forward one jump backward get bug home constraints forbiddenlength forbiddeni elements forbidden distinct position not forbidden

invalid tweets sql schema table tweets column name type tweetid int content varchar tweetid primary key table table contains tweets social media app write sql query find ids invalid tweets tweet invalid number characters used content tweet strictly greater than return result table any order query result format following example example input tweets table tweetid content vote biden let america great again output tweetid explanation tweet length valid tweet tweet length invalid tweet

check two string arrays equivalent given two string arrays word word return true two arrays represent same string false otherwise string represented array array elements concatenated order forms string example input word word output true explanation word represents string abc word represents string abc strings same return true example input word word output false example input word abc defg word abcddefg output true constraints wordlength wordlength wordilength wordilength sumwordilength sumwordilength wordi wordi consist lowercase letters

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

skyline problem citys skyline outer contour silhouette formed buildings city when viewed distance given locations heights buildings return skyline formed these buildings collectively geometric information each building given array buildings where buildingsi lefti righti heighti lefti coordinate left edge ith building righti coordinate edge ith building heighti height ith building may assume buildings perfect rectangles grounded absolutely flat surface height skyline should represented list key points sorted their xcoordinate form xyxy each key point left endpoint some horizontal segment skyline except last point list which always ycoordinate used mark skylines termination where rightmost building ends any ground between leftmost rightmost buildings should part skylines contour note must consecutive horizontal lines equal height output skyline instance not acceptable three lines height should merged one final output such example input buildings output explanation figure shows buildings input figure shows skyline formed those buildings red points figure represent key points output list example input buildings output constraints buildingslength lefti righti heighti buildings sorted lefti nondecreasing order

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

count matches tournament given integer number teams tournament strange rules current number teams even each team gets paired another team total matches played teams advance next round current number teams odd one team randomly advances tournament rest gets paired total matches played teams advance next round return number matches played tournament winner decided example input output explanation details tournament round teams matches teams advance round teams matches teams advance round teams matches team declared winner total number matches example input output explanation details tournament round teams matches teams advance round teams matches teams advance round teams matches teams advance round teams matches team declared winner total number matches constraints

minimize deviation array given array nums positive integers perform two types operations any element array any number times element even divide example array operation last element array element odd multiply example array operation first element array deviation array maximum difference between any two elements array return minimum deviation array after performing some number operations example input nums output explanation transform array deviation example input nums output explanation transform array after two operations deviation example input nums output constraints numslength numsi

jump game given indexed integer array nums integer initially standing index one move jump most steps forward without going outside boundaries array jump index any index range minn inclusive want reach last index array index your score sum numsj each index visited array return maximum score get example input nums output explanation choose your jumps forming subsequence underlined above sum example input nums output explanation choose your jumps forming subsequence underlined above sum example input nums output constraints numslength numsi

design front middle back queue design queue supports push pop operations front middle back implement frontmiddleback class frontmiddleback initializes queue void pushfrontint val adds val front queue void pushmiddleint val adds val middle queue void pushbackint val adds val back queue int popfront removes front element queue returns queue empty return int popmiddle removes middle element queue returns queue empty return int popback removes back element queue returns queue empty return notice when two middle position choices operation performed frontmost middle position choice example pushing middle results popping middle returns results example input frontmiddlebackqueue pushfront pushback pushmiddle pushmiddle popfront popmiddle popmiddle popback popfront output null null null null null explanation frontmiddlebackqueue new frontmiddlebackqueue qpushfront qpushback qpushmiddle qpushmiddle qpopfront return qpopmiddle return qpopmiddle return qpopback return qpopfront return queue empty constraints val most calls made pushfront pushmiddle pushback popfront popmiddle popback

stone game alice bob take turns playing game alice starting first stones pile each players turn they remove stone pile receive points based stones value alice bob may value stones differently given two integer arrays length alicevalues bobvalues each alicevaluesi bobvaluesi represents how alice bob respectively value ith stone winner person most points after stones chosen both players same amount points game results draw both players play optimally both players know others values determine result game alice wins return bob wins return game results draw return example input alicevalues bobvalues output explanation alice takes stone indexed first alice receive points bob only choose stone only receive points alice wins example input alicevalues bobvalues output explanation alice takes stone bob takes stone they both point draw example input alicevalues bobvalues output explanation regardless how alice plays bob able more points than alice example alice takes stone bob take stone alice takes stone alice points bobs bob wins constraints alicevalueslength bobvalueslength alicevaluesi bobvaluesi

defuse bomb bomb defuse your time running out your informer provide circular array code length key decrypt code must replace every number numbers replaced simultaneously replace ith number sum next numbers replace ith number sum previous numbers replace ith number code circular next element coden code previous element code coden given circular array code integer key return decrypted code defuse bomb example input code output explanation each number replaced sum next numbers decrypted code notice numbers wrap around example input code output explanation when zero numbers replaced example input code output explanation decrypted code notice numbers wrap around again negative sum previous numbers constraints codelength codei

swapping nodes linked list given head linked list integer return head linked list after swapping values kth node beginning kth node end list indexed example input head output example input head output constraints number nodes list nodeval

maximum absolute sum any subarray given integer array nums absolute sum subarray numsl numsl numsr numsr absnumsl numsl numsr numsr return maximum absolute sum any possibly empty subarray nums note absx defined follows negative integer absx nonnegative integer absx example input nums output explanation subarray absolute sum abs abs example input nums output explanation subarray absolute sum abs abs constraints numslength numsi

maximum number balls box working ball factory where balls numbered lowlimit highlimit inclusive highlimit lowlimit infinite number boxes numbered infinity your job factory put each ball box number equal sum digits balls number example ball number put box number ball number put box number given two integers lowlimit highlimit return number balls box most balls example input lowlimit highlimit output explanation box number ball count box most number balls balls example input lowlimit highlimit output explanation box number ball count boxes most number balls balls each example input lowlimit highlimit output explanation box number ball count box most number balls balls constraints lowlimit highlimit

count complete tree nodes given root complete binary tree return number nodes tree according wikipedia every level except possibly last completely filled complete binary tree nodes last level far left possible between nodes inclusive last level design algorithm runs less than time complexity example input root output example input root output example input root output constraints number nodes tree range nodeval tree guaranteed complete

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

construct lexicographically largest valid sequence given integer find sequence satisfies following integer occurs once sequence each integer between occurs twice sequence every integer between distance between two occurrences exactly distance between two numbers sequence absolute difference their indices return lexicographically largest sequence guaranteed under given constraints always solution sequence lexicographically larger than sequence same length first position where differ sequence number greater than corresponding number example lexicographically larger than because first position they differ third number greater than example input output explanation also valid sequence but lexicographically largest valid sequence example input output constraints

find total time spent each employee sql schema table employees column name type empid int eventday date intime int outtime int empid eventday intime primary key table table shows employees entries exits office eventday day which event happened intime minute which employee entered office outtime minute which they left office intime outtime between guaranteed two events same day intersect time intime outtime write sql query calculate total time minutes spent each employee each day office note within one day employee enter leave more than once time spent office single entry outtime intime return result table any order query result format following example example input employees table empid eventday intime outtime output day empid totaltime explanation employee three events two day total one day total employee two events one day total one day total

minimize hamming distance after swap operations given two integer arrays source target both length also given array allowedswaps where each allowedswapsi indicates allowed swap elements index index indexed array source note swap elements specific pair indices multiple times any order hamming distance two arrays same length source target number positions where elements different formally number indices where sourcei targeti indexed return minimum hamming distance source target after performing any amount swap operations array source example input source target allowedswaps output explanation source transformed following way swap indices source swap indices source hamming distance source target they differ position index example input source target allowedswaps output explanation allowed swaps hamming distance source target they differ positions index index example input source target allowedswaps output constraints sourcelength targetlength sourcei targeti allowedswapslength allowedswapsilength

minimum length string after deleting similar ends given string consisting only characters asked apply following algorithm string any number times pick nonempty prefix string where characters prefix equal pick nonempty suffix string where characters suffix equal prefix suffix should not intersect any index characters prefix suffix must same delete both prefix suffix return minimum length after performing above operation any number times possibly zero times example input output explanation cant remove any characters string stays example input cabaabac output explanation optimal sequence operations take prefix suffix remove them abaaba take prefix suffix remove them baab take prefix suffix remove them take prefix suffix remove them example input aabccabba output explanation optimal sequence operations take prefix suffix remove them bccabb take prefix suffix remove them cca constraints slength only consists characters

largest submatrix rearrangements given binary matrix matrix size allowed rearrange columns matrix any order return area largest submatrix within matrix where every element submatrix after reordering columns optimally example input matrix output explanation rearrange columns shown above largest submatrix bold area example input matrix output explanation rearrange columns shown above largest submatrix bold area example input matrix output explanation notice must rearrange entire columns way submatrix larger than area constraints matrixlength matrixilength matrixij either

cat mouse game played cat mouse named cat mouse environment represented grid size rows cols where each element wall floor player cat mouse food players represented characters ccatmmouse floors represented character walked walls represented character cannot walked food represented character walked only one each character grid mouse cat play according following rules mouse moves first they take turns move each turn cat mouse jump one four directions left down they cannot jump over wall nor outside grid catjump mousejump maximum lengths cat mouse jump time respectively cat mouse jump less than maximum length staying same position allowed mouse jump over cat game end ways cat occupies same position mouse cat wins cat reaches food first cat wins mouse reaches food first mouse wins mouse cannot get food within turns cat wins given rows cols matrix grid two integers catjump mousejump return true mouse win game both cat mouse play optimally otherwise return false example input grid fcm catjump mousejump output true explanation cat cannot catch mouse turn nor get food before mouse example input grid mcf catjump mousejump output true example input grid mcf catjump mousejump output false constraints rows gridlength cols gridilength rows cols gridij consist only characters only one each character grid catjump mousejump

ways split array three subarrays split integer array good array split three nonempty contiguous subarrays named left mid respectively left sum elements left less than equal sum elements mid sum elements mid less than equal sum elements given nums array nonnegative integers return number good ways split nums number may too large return modulo example input nums output explanation only good way split nums example input nums output explanation three good ways splitting nums example input nums output explanation good way split nums constraints numslength numsi

maximum number eaten apples special kind apple tree grows apples every day days ith day tree grows applesi apples rot after daysi days day daysi apples rotten cannot eaten some days apple tree does not grow any apples which denoted applesi daysi decided eat most one apple day keep doctors away note keep eating after first days given two integer arrays days apples length return maximum number apples eat example input apples days output explanation eat apples first day eat apple grew first day second day eat apple grew second day third day eat apple grew second day after day apples grew third day rot fourth seventh days eat apples grew fourth day example input apples days output explanation eat apples first third day eat apples grew first day nothing fouth fifth days sixth seventh days eat apples grew sixth day constraints appleslength dayslength applesi daysi daysi only applesi

maximum score removing substrings given string two integers perform two types operations any number times remove substring gain points example when removing cabxbae becomes cxbae remove substring gain points example when removing cabxbae becomes cabxe return maximum points gain after applying above operations example input cdbcbbaaabab output explanation remove underlined cdbcbbaaabab cdbcbbaaab points added score remove underlined cdbcbbaaab cdbcbbaa points added score remove underlined cdbcbbaa cdbcba points added score remove underlined cdbcba cdbc points added score total score example input aabbaaxybbaabb output constraints slength consists lowercase english letters

maximal square given binary matrix filled find largest square containing only return area example input matrix output example input matrix output example input matrix output constraints matrixlength matrixilength matrixij

find highest altitude biker going road trip road trip consists points different altitudes biker starts his trip point altitude equal given integer array gain length where gaini net gain altitude between points return highest altitude point example input gain output explanation altitudes highest example input gain output explanation altitudes highest constraints gainlength gaini

maximum binary string after change given binary string binary consisting only apply each following operations any number times operation number contains substring replace example operation number contains substring replace example return maximum binary string obtain after any number operations binary string greater than binary string decimal representation greater than decimal representation example input binary output explanation valid transformation sequence example input binary output explanation cannot transformed any further constraints binarylength binary consist

where ball fall grid size representing box balls box open top bottom sides each cell box diagonal board spanning two corners cell redirect ball left board redirects ball spans topleft corner bottomright corner represented grid board redirects ball left spans topright corner bottomleft corner represented grid drop one ball top each column box each ball get stuck box fall out bottom ball gets stuck hits shaped pattern between two boards board redirects ball either wall box return array answer size where answeri column ball falls out bottom after dropping ball ith column top ball gets stuck box example input grid output explanation example shown photo ball dropped column falls out box column ball dropped column get stuck box between column row ball dropped column get stuck box between column row ball dropped column get stuck box between column row ball dropped column get stuck box between column row example input grid output explanation ball gets stuck left wall example input grid output constraints gridlength gridilength gridij

decode xored permutation integer array perm permutation first positive integers where always odd encoded another integer array encoded length such encodedi permi xor permi example perm encoded given encoded array return original array perm guaranteed answer exists unique example input encoded output explanation perm encoded xor xor example input encoded output constraints odd encodedlength

calculate money leetcode bank hercy wants save money his first car puts money leetcode bank every day starts putting monday first day every day tuesday sunday put more than day before every subsequent monday put more than previous monday given return total amount money leetcode bank end nth day example input output explanation after day total example input output explanation after day total notice monday hercy only puts example input output explanation after day total constraints

minimum adjacent swaps consecutive ones given integer array nums integer nums comprises only one move choose two adjacent indices swap their values return minimum number moves required nums consecutive example input nums output explanation move nums could consecutive example input nums output explanation moves leftmost shifted nums example input nums output explanation nums already consecutive constraints numslength numsi sumnums

restore array adjacent pairs integer array nums consists unique elements but forgotten however remember every pair adjacent elements nums given integer array adjacentpairs size where each adjacentpairsi indicates elements adjacent nums guaranteed every adjacent pair elements numsi numsi exist adjacentpairs either numsi numsi numsi numsi pairs appear any order return original array nums multiple solutions return any them example input adjacentpairs output explanation array adjacent pairs adjacentpairs notice adjacentpairsi may not lefttoright order example input adjacentpairs output explanation negative numbers another solution which would also accepted example input adjacentpairs output constraints numslength adjacentpairslength adjacentpairsilength numsi exists some nums adjacentpairs pairs

maximum units truck assigned put some amount boxes onto one truck given array boxtypes where boxtypesi numberofboxesi numberofunitsperboxi numberofboxesi number boxes type numberofunitsperboxi number units each box type also given integer trucksize which maximum number boxes put truck choose any boxes put truck long number boxes does not exceed trucksize return maximum total number units put truck example input boxtypes trucksize output explanation box first type contains units boxes second type contain units each boxes third type contain unit each take boxes first second types one box third type total number units example input boxtypes trucksize output constraints boxtypeslength numberofboxesi numberofunitsperboxi trucksize

maximum xor element array given array nums consisting nonnegative integers also given queries array where queriesi answer ith query maximum bitwise xor value any element nums does not exceed other words answer maxnumsj xor such numsj elements nums larger than answer return integer array answer where answerlength querieslength answeri answer ith query example input nums queries output explanation only two integers not greater than xor xor larger two xor xor example input nums queries output constraints numslength querieslength queriesilength numsj

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

longest common prefix write function find longest common prefix string amongst array strings common prefix return empty string example input strs flowerflowflight output example input strs dogracecarcar output explanation common prefix input strings constraints strslength strsilength strsi consists only lowercase english letters

kth smallest element bst given root binary search tree integer return kth smallest value indexed values nodes tree example input root null output example input root nullnull output constraints number nodes tree nodeval follow bst modified often insert delete operations need find kth smallest frequently how would optimize

find kth largest xor coordinate value given matrix size consisting nonnegative integers also given integer value coordinate matrix xor matrixij where indexed find kth largest value indexed coordinates matrix example input matrix output explanation value coordinate xor which largest value example input matrix output explanation value coordinate which largest value example input matrix output explanation value coordinate xor which largest value constraints matrixlength matrixilength matrixij

decode xored array hidden integer array arr consists nonnegative integers encoded another integer array encoded length such encodedi arri xor arri example arr encoded given encoded array also given integer first first element arr arr return original array arr proved answer exists unique example input encoded first output explanation arr first encoded xor xor xor example input encoded first output constraints encodedlength encodedi first

average waiting time restaurant single chef given array customers where customersi arrivali timei arrivali arrival time ith customer arrival times sorted nondecreasing order timei time needed prepare order ith customer when customer arrives gives chef his order chef starts preparing once idle customer waits till chef finishes preparing his order chef does not prepare food more than one customer time chef prepares food customers order they given input return average waiting time customers solutions within actual answer considered accepted example input customers output explanation first customer arrives time chef takes his order starts preparing immediately time finishes time waiting time first customer second customer arrives time chef takes his order starts preparing time finishes time waiting time second customer third customer arrives time chef takes his order starts preparing time finishes time waiting time third customer average waiting time example input customers output explanation first customer arrives time chef takes his order starts preparing immediately time finishes time waiting time first customer second customer arrives time chef takes his order starts preparing time finishes time waiting time second customer third customer arrives time chef takes his order starts preparing time finishes time waiting time third customer fourth customer arrives time chef takes his order starts preparing immediately time finishes time waiting time fourth customer average waiting time constraints customerslength arrivali timei arrivali arrivali

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

palindrome partitioning given string return true possible split string three nonempty palindromic substrings otherwise return false string said palindrome same string when reversed example input abcbdd output true explanation abcbdd bcb three substrings palindromes example input bcbddxy output false explanation cannot split palindromes constraints slength consists only lowercase english letters

determine string halves alike given string even length split string two halves equal lengths let first half second half two strings alike they same number vowels notice contains uppercase lowercase letters return true alike otherwise return false example input book output true explanation vowel vowel they alike example input textbook output false explanation text book vowel whereas they not alike notice vowel counted twice constraints slength slength even consists uppercase lowercase letters

number ways reconstruct tree given array pairs where pairsi duplicates let ways number rooted trees satisfy following conditions tree consists nodes whose values appeared pairs pair exists pairs only ancestor ancestor note tree does not binary tree two ways considered different least one node different parents both ways return ways ways ways rooted tree tree single root node edges oriented outgoing root ancestor node any node path root node excluding node itself root ancestors example input pairs output explanation exactly one valid rooted tree which shown above figure example input pairs output explanation multiple valid rooted trees three them shown above figures example input pairs output explanation valid rooted trees constraints pairslength elements pairs unique

latest time replacing hidden digits given string time form hhmm where some digits string hidden represented valid times those inclusively between return latest valid time get time replacing hidden digits example input time output explanation latest hour beginning digit latest minute ending digit example input time output example input time output constraints time format hhmm guaranteed produce valid time given string

number rectangles form largest square given array rectangles where rectanglesi represents ith rectangle length width cut ith rectangle form square side length both example rectangle cut get square side length most let maxlen side length largest square obtain any given rectangles return number rectangles square side length maxlen example input rectangles output explanation largest squares get each rectangle lengths largest possible square length get out rectangles example input rectangles output constraints rectangleslength rectanglesilength

count primes given integer return number prime numbers strictly less than example input output explanation prime numbers less than they example input output example input output constraints

minimum number people teach social network consisting users some friendships between users two users communicate each other they know common language given integer array languages array friendships where languages numbered languagesi set languages ith user knows friendshipsi denotes friendship between users choose one language teach some users friends communicate each other return minimum number users need teach note friendships not transitive meaning friend friend doesnt guarantee friend example input languages friendships output explanation either teach user second language user first language example input languages friendships output explanation teach third language users yielding two users teach constraints languageslength languagesilength languagesij languageslength friendshipslength tuples unique languagesi contains only unique values

count good meals good meal meal contains exactly two different food items sum deliciousness equal power two pick any two different foods good meal given array integers deliciousness where deliciousnessi deliciousness ith item food return number different good meals list modulo note items different indices considered different even they same deliciousness value example input deliciousness output explanation good meals their respective sums which powers example input deliciousness output explanation good meals ways ways ways constraints deliciousnesslength deliciousnessi

sum unique elements given integer array nums unique elements array elements appear exactly once array return sum unique elements nums example input nums output explanation unique elements sum example input nums output explanation unique elements sum example input nums output explanation unique elements sum constraints numslength numsi

tuple same product given array nums distinct positive integers return number tuples such where elements nums example input nums output explanation valid tuples example input nums output explanation valid tuples constraints numslength numsi elements nums distinct

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

find minimum time finish jobs given integer array jobs where jobsi amount time takes complete ith job workers assign jobs each job should assigned exactly one worker working time worker sum time takes complete jobs assigned them your goal devise optimal assignment such maximum working time any worker minimized return minimum possible maximum working time any assignment example input jobs output explanation assigning each person one job maximum time example input jobs output explanation assign jobs following way worker working time worker working time maximum working time constraints jobslength jobsi

count ways array product given integer array queries each queriesi where queriesi find number different ways place positive integers array size such product integers number ways may too large answer ith query number ways modulo return integer array answer where answerlength querieslength answeri answer ith query example input queries output explanation each query independent ways fill array size multiply way fill array size multiply ways fill array size multiply modulo example input queries output constraints querieslength

change minimum characters satisfy one three conditions given two strings consist lowercase letters one operation change any character any lowercase letter your goal satisfy one following three conditions every letter strictly less than every letter alphabet every letter strictly less than every letter alphabet both consist only one distinct letter return minimum number operations needed achieve your goal example input aba caa output explanation consider best way each condition true change ccc operations every letter less than every letter change bbb aaa operations every letter less than every letter change aaa aaa operations consist one distinct letter best way done operations either condition condition example input dabadd cda output explanation best way condition true changing eee constraints alength blength consist only lowercase letters

building boxes cubic storeroom where width length height room equal units asked place boxes room where each box cube unit side length however some rules placing boxes place boxes anywhere floor box placed top box each side four vertical sides box must either adjacent another box wall given integer return minimum possible number boxes touching floor example input output explanation figure above placement three boxes these boxes placed corner room where corner left side example input output explanation figure above placement four boxes these boxes placed corner room where corner left side example input output explanation figure above placement ten boxes these boxes placed corner room where corner back side constraints

design add search words data structure design data structure supports adding new words finding string matches any previously added string implement worddictionary class worddictionary initializes object void addwordword adds word data structure matched later bool searchword returns true any string data structure matches word false otherwise word may contain dots where dots matched any letter example input worddictionaryaddwordaddwordaddwordsearchsearchsearchsearch baddadmadpadbadadb output nullnullnullnullfalsetruetruetrue explanation worddictionary worddictionary new worddictionary worddictionaryaddwordbad worddictionaryaddworddad worddictionaryaddwordmad worddictionarysearchpad return false worddictionarysearchbad return true worddictionarysearchad return true worddictionarysearchb return true constraints wordlength word addword consists lowercase english letters word search consist lowercase english letters most dots word search queries most calls made addword search

find followers count sql schema table followers column name type userid int followerid int userid followerid primary key table table contains ids user follower social media app where follower follows user write sql query each user return number followers return result table ordered userid ascending order query result format following example example input followers table userid followerid output userid followerscount explanation followers followers followers

minimum operations subsequence given array target consists distinct integers another integer array arr duplicates one operation insert any integer any position arr example arr add middle note insert integer very beginning end array return minimum number operations needed target subsequence arr subsequence array new array generated original array deleting some elements possibly none without changing remaining elements relative order example subsequence underlined elements while not example input target arr output explanation add such way makes arr target subsequence arr example input target arr output constraints targetlength arrlength targeti arri target contains duplicates

eat your favorite candy your favorite day given indexed array positive integers candiescount where candiescounti represents number candies ith type also given array queries where queriesi favoritetypei favoritedayi dailycapi play game following rules start eating candies day cannot eat any candy type unless eaten candies type must eat least one candy per day eaten candies construct boolean array answer such answerlength querieslength answeri true eat candy type favoritetypei day favoritedayi without eating more than dailycapi candies any day false otherwise note eat different types candy same day provided follow rule return constructed array answer example input candiescount queries output truefalsetrue explanation eat candies type day candies type day eat candy type day eat most candies each day eat candies every day eat candies type day candies type type day day only eat candies type type cannot eat candy type day eat candy each day eat candy type day example input candiescount queries output falsetruetruefalsefalse constraints candiescountlength candiescounti querieslength queriesilength favoritetypei candiescountlength favoritedayi dailycapi

number employees which report each employee sql schema table employees column name type employeeid int name varchar reportsto int age int employeeid primary key table table contains information about employees manager they report some employees not report anyone reportsto null problem consider manager employee who least other employee reporting them write sql query report ids names managers number employees who report directly them average age reports rounded nearest integer return result table ordered employeeid query result format following example example input employees table employeeid name reportsto age hercy null alice bob winston null output employeeid name reportscount averageage hercy explanation hercy people report directly him alice bob their average age which after rounding nearest integer

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

sliding window maximum given array integers nums sliding window size which moving very left array very only see numbers window each time sliding window moves one position return max sliding window example input nums output explanation window position max example input nums output constraints numslength numsi numslength

replace digits characters given indexed string lowercase english letters even indices digits odd indices function shiftc where character digit returns xth character after example shifta shiftx every odd index want replace digit shiftsi return after replacing digits guaranteed shiftsi never exceed example input ace output abcdef explanation digits replaced follows shifta shiftc shifte example input abcde output abbdcfdhe explanation digits replaced follows shifta shiftb shiftc shiftd constraints slength consists only lowercase english letters digits shiftsi odd indices

truncate sentence sentence list words separated single space leading trailing spaces each words consists only uppercase lowercase english letters punctuation example hello world hello hello world hello world sentences given sentence integer want truncate such contains only first words return after truncating example input hello how contestant output hello how explanation words hello how contestant first words hello how should return hello how example input what solution problem output what solution explanation words what solution problem first words what solution should return what solution example input chopper not tanuki output chopper not tanuki constraints slength range number words consist only lowercase uppercase english letters spaces words separated single space leading trailing spaces

finding users active minutes given logs users actions leetcode integer logs represented integer array logs where each logsi idi timei indicates user idi performed action minute timei multiple users perform actions simultaneously single user perform multiple actions same minute user active minutes uam given user defined number unique minutes which user performed action leetcode minute only counted once even multiple actions occur calculate indexed array answer size such each answerj number users whose uam equals return array answer described above example input logs output explanation user performed actions minutes again they uam minute only counted once user performed actions minutes they uam since both users uam answer remaining answerj values example input logs output explanation user performed single action minute they uam user performed actions minutes they uam one user uam one uam answer answer remaining values constraints logslength idi timei range maximum uam user

sign product array function signfuncx returns positive negative equal given integer array nums let product product values array nums return signfuncproduct example input nums output explanation product values array signfunc example input nums output explanation product values array signfunc example input nums output explanation product values array signfunc constraints numslength numsi

queries number points inside circle given array points where pointsi coordinates ith point plane multiple points same coordinates also given array queries where queriesj describes circle centered radius each query queriesj compute number points inside jth circle points border circle considered inside return array answer where answerj answer jth query example input points queries output explanation points circles shown above queries green circle queries red circle queries blue circle example input points queries output explanation points circles shown above queries green queries red queries blue queries purple constraints pointslength pointsilength querieslength queriesjlength coordinates integers follow could find answer each query better complexity than

minimum distance target element given integer array nums indexed two integers target start find index such numsi target absi start minimized note absx absolute value return absi start guaranteed target exists nums example input nums target start output explanation nums only value equal target answer abs example input nums target start output explanation nums only value equal target answer abs example input nums target start output explanation every value nums but nums minimizes absi start which abs constraints numslength numsi start numslength target nums

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

maximum value given index bounded array given three positive integers index maxsum want construct array nums indexed satisfies following conditions numslength numsi positive integer where absnumsi numsi where sum elements nums does not exceed maxsum numsindex maximized return numsindex constructed array note absx equals otherwise example input index maxsum output explanation nums one array satisfies conditions arrays satisfy conditions nums maximum nums example input index maxsum output constraints maxsum index

number orders backlog given integer array orders where each ordersi pricei amounti ordertypei denotes amounti orders placed type ordertypei price pricei ordertypei batch buy orders batch sell orders note ordersi represents batch amounti independent orders same price order type orders represented ordersi placed before orders represented ordersi valid backlog consists orders not executed backlog initially empty when order placed following happens order buy order look sell order smallest price backlog sell orders price smaller than equal current buy orders price they match executed sell order removed backlog else buy order added backlog vice versa order sell order look buy order largest price backlog buy orders price larger than equal current sell orders price they match executed buy order removed backlog else sell order added backlog return total amount orders backlog after placing orders input since number large return modulo example input orders output explanation here what happens orders orders type buy price placed sell orders orders added backlog orders type sell price placed buy orders prices larger than equal orders added backlog order type sell price placed buy orders prices larger than equal backlog order added backlog orders type buy price placed first orders matched sell orders least price which these sell orders removed backlog order matched sell order least price which sell order removed backlog more sell orders backlog order added backlog finally backlog buy orders price buy order price total number orders backlog example input orders output explanation here what happens orders orders type sell price placed buy orders orders added backlog orders type buy price placed they matched sell orders least price which those sell orders removed backlog orders type buy price placed least price sell order orders added backlog order type sell price placed matched buy order highest price which buy order removed backlog finally backlog sell orders price buy orders price total number orders which equal constraints orderslength ordersilength pricei amounti ordertypei either

maximum number groups getting fresh donuts donuts shop bakes donuts batches batchsize they rule where they must serve donuts batch before serving any donuts next batch given integer batchsize integer array groups where groupsi denotes group groupsi customers visit shop each customer get exactly one donut when group visits shop customers group must served before serving any following groups group happy they get fresh donuts first customer group does not receive donut left over previous group freely rearrange ordering groups return maximum possible number happy groups after rearranging groups example input batchsize groups output explanation arrange groups groups happy example input batchsize groups output constraints batchsize groupslength groupsi

rectangle area given coordinates two rectilinear rectangles plane return total area covered two rectangles first rectangle defined bottomleft corner topright corner second rectangle defined bottomleft corner topright corner example input output example input output constraints

sum digits base given integer base base return sum digits after converting base base after converting each digit should interpreted base number sum should returned base example input output explanation base expressed base example input output explanation already base constraints

longest substring vowels order string considered beautiful satisfies following conditions each english vowels must appear least once letters must sorted alphabetical order before before etc example strings aeiou aaaaaaeiiiioou considered beautiful but uaeio aeoiu aaaeeeooo not beautiful given string word consisting english vowels return length longest beautiful substring word such substring exists return substring contiguous sequence characters string example input word aeiaaioaaaaeiiiiouuuooaauuaeiu output explanation longest beautiful substring word aaaaeiiiiouuu length example input word aeeeiiiioooauuuaeiou output explanation longest beautiful substring word aeiou length example input word output explanation beautiful substring return constraints wordlength word consists characters

check sentence pangram pangram sentence where every letter english alphabet appears least once given string sentence containing only lowercase english letters return true sentence pangram false otherwise example input sentence thequickbrownfoxjumpsoverthelazydog output true explanation sentence contains least one every letter english alphabet example input sentence leetcode output false constraints sentencelength sentence consists lowercase english letters

maximum ice cream bars sweltering summer day boy wants buy some ice cream bars store ice cream bars given array costs length where costsi price ith ice cream bar coins boy initially coins coins spend wants buy many ice cream bars possible note boy buy ice cream bars any order return maximum number ice cream bars boy buy coins coins must solve problem counting sort example input costs coins output explanation boy buy ice cream bars indices total price example input costs coins output explanation boy cannot afford any ice cream bars example input costs coins output explanation boy buy ice cream bars total price constraints costslength costsi coins

determine color chessboard square given coordinates string represents coordinates square chessboard below chessboard your reference return true square white false square black coordinate always represent valid chessboard square coordinate always letter first number second example input coordinates output false explanation chessboard above square coordinates black return false example input coordinates output true explanation chessboard above square coordinates white return true example input coordinates output false constraints coordinateslength coordinates coordinates

minimum adjacent swaps reach kth smallest number given string num representing large integer integer call some integer wonderful permutation digits num greater value than num many wonderful integers however only care about smallestvalued ones example when num smallest wonderful integer smallest wonderful integer smallest wonderful integer smallest wonderful integer return minimum number adjacent digit swaps needs applied num reach kth smallest wonderful integer tests generated such way kth smallest wonderful integer exists example input num output explanation smallest wonderful number get number swap index index swap index index example input num output explanation smallest wonderful number get number swap index index swap index index swap index index swap index index example input num output explanation smallest wonderful number get number swap index index constraints numlength num only consists digits

minimum absolute sum difference given two positive integer arrays nums nums both length absolute sum difference arrays nums nums defined sum numsi numsi each indexed replace most one element nums any other element nums minimize absolute sum difference return minimum absolute sum difference after replacing most one element array nums since answer may large return modulo defined example input nums nums output explanation two possible optimal solutions replace second element first replace second element third both yield absolute sum difference example input nums nums output explanation nums equal nums replacement needed result absolute sum difference example input nums nums output explanation replace first element second yields absolute sum difference constraints numslength numslength numsi numsi

seat reservation manager design system manages reservation state seats numbered implement seatmanager class seatmanagerint initializes seatmanager object manage seats numbered seats initially available int reserve fetches smallestnumbered unreserved seat reserves returns number void unreserveint seatnumber unreserves seat given seatnumber example input seatmanager reserve reserve unreserve reserve reserve reserve reserve unreserve output null null null explanation seatmanager seatmanager new seatmanager initializes seatmanager seats seatmanagerreserve seats available return lowest numbered seat which seatmanagerreserve available seats return lowest them which seatmanagerunreserve unreserve seat available seats seatmanagerreserve available seats return lowest them which seatmanagerreserve available seats return lowest them which seatmanagerreserve available seats return lowest them which seatmanagerreserve only available seat seat return seatmanagerunreserve unreserve seat available seats constraints seatnumber each call reserve guaranteed least one unreserved seat each call unreserve guaranteed seatnumber reserved most calls total made reserve unreserve

closest room hotel rooms rooms represented integer array rooms where roomsi roomidi sizei denotes room room number roomidi size equal sizei each roomidi guaranteed unique also given queries array queries where queriesj preferredj minsizej answer jth query room number room such room size least minsizej absid preferredj minimized where absx absolute value tie absolute difference use room smallest such such room answer return array answer length where answerj contains answer jth query example input rooms queries output explanation answers queries follows query room number closest abs size least answer query rooms size least answer query room number closest abs size least answer example input rooms queries output explanation answers queries follows query room number closest abs size least answer query room numbers both sizes least answer since smaller query room number only room size least answer constraints roomslength querieslength roomidi preferredj sizei minsizej

maximize number nice divisors given positive integer primefactors asked construct positive integer satisfies following conditions number prime factors not necessarily distinct most primefactors number nice divisors maximized note divisor nice divisible every prime factor example prime factors nice divisors while not return number nice divisors since number too large return modulo note prime number natural number greater than not product two smaller natural numbers prime factors number list prime numbers such their product equals example input primefactors output explanation valid value prime factors nice divisors not other value most prime factors more nice divisors example input primefactors output constraints primefactors

reverse linked list given head singly linked list reverse list return reversed list example input head output example input head output example input head output constraints number nodes list range nodeval follow linked list reversed either iteratively recursively could implement both

singlethreaded cpu given tasks labeled represented integer array tasks where tasksi enqueuetimei processingtimei means ith task available process enqueuetimei take processingtimei finish processing singlethreaded cpu process most one task time act following way cpu idle available tasks process cpu remains idle cpu idle available tasks cpu choose one shortest processing time multiple tasks same shortest processing time choose task smallest index once task started cpu process entire task without stopping cpu finish task start new one instantly return order which cpu process tasks example input tasks output explanation events follows time task available process available tasks also time idle cpu starts processing task available tasks time task available process available tasks time task available process available tasks also time cpu finishes task starts processing task shortest available tasks time task available process available tasks time cpu finishes task starts processing task shortest available tasks time cpu finishes task starts processing task available tasks time cpu finishes task becomes idle example input tasks output explanation events follows time tasks become available available tasks also time idle cpu starts processing task available tasks time cpu finishes task starts processing task available tasks time cpu finishes task starts processing task available tasks time cpu finishes task starts processing task available tasks time cpu finishes task starts processing task available tasks time cpu finishes task becomes idle constraints taskslength enqueuetimei processingtimei

evaluate bracket pairs string given string contains some bracket pairs each pair containing nonempty key example string nameisageyearsold two bracket pairs contain keys name age know values wide range keys represented string array knowledge where each knowledgei keyi valuei indicates key keyi value valuei tasked evaluate bracket pairs when evaluate bracket pair contains some key keyi replace keyi bracket pair keys corresponding valuei not know value key replace keyi bracket pair question mark without quotation marks each key appear most once your knowledge not any nested brackets return resulting string after evaluating bracket pairs example input nameisageyearsold knowledge namebobagetwo output bobistwoyearsold explanation key name value bob replace name bob key age value two replace age two example input hiname knowledge output explanation not know value key name replace name example input aaaaaa knowledge ayes output yesyesyesaaa explanation same key appear multiple times key value yes replace occurrences yes notice not bracket pair not evaluated constraints slength knowledgelength knowledgeilength keyilength valueilength consists lowercase english letters round brackets every open bracket corresponding close bracket key each bracket pair nonempty not any nested bracket pairs keyi valuei consist lowercase english letters each keyi knowledge unique

minimum number operations string sorted given string indexed asked perform following operation get sorted string find largest index such slength find largest index such slength possible values range inclusive swap two characters indices reverse suffix starting index return number operations needed string sorted since answer too large return modulo example input cba output explanation simulation goes follows operation swap get scab reverse suffix starting scab operation swap get sbac reverse suffix starting sbca operation swap get sbac reverse suffix starting sbac operation swap get sabc reverse suffix starting sacb operation swap get sabc reverse suffix starting sabc example input aabaa output explanation simulation goes follows operation swap get saaaab reverse substring starting saaaba operation swap get saaaab reverse substring starting saaaab constraints slength consists only lowercase english letters

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum number operations reinitialize permutation given even integer initially permutation perm size where permi indexed one operation create new array arr each arri permi arri permn assign arr perm return minimum nonzero number operations need perform perm return permutation initial value example input output explanation perm initially after operation perm takes only operation example input output explanation perm initially after operation perm after operation perm takes only operations example input output constraints even

minimum sideway jumps lane road length consists points labeled frog starts point second lane wants jump point however could obstacles along way given array obstacles length where each obstaclesi ranging describes obstacle lane obstaclesi point obstaclesi obstacles point most one obstacle lanes each point example obstacles obstacle lane point frog only travel point point same lane not obstacle lane point avoid obstacles frog also perform side jump jump another lane even they not adjacent same point obstacle new lane example frog jump lane point lane point return minimum number side jumps frog needs reach any lane point starting lane point note obstacles points example input obstacles output explanation optimal solution shown arrows above side jumps red arrows note frog jump over obstacles only when making side jumps shown point example input obstacles output explanation obstacles lane side jumps required example input obstacles output explanation optimal solution shown arrows above side jumps constraints obstacleslength obstaclesi obstacles obstaclesn

splitting string descending consecutive values given string consists only digits check split two more nonempty substrings such numerical values substrings descending order difference between numerical values every two adjacent substrings equal example string split numerical values values descending order adjacent values differ way valid another example string split however ways invalid because they numerical values respectively which not descending order return true possible split described above false otherwise substring contiguous sequence characters string example input output false explanation valid way split example input output true explanation split numerical values values descending order adjacent values differing example input output false explanation valid way split constraints slength only consists digits

sentence similarity iii sentence list words separated single space leading trailing spaces example hello world hello hello world hello world sentences words consist only uppercase lowercase english letters two sentences sentence sentence similar possible insert arbitrary sentence possibly empty inside one these sentences such two sentences become equal example sentence hello name jane sentence hello jane made equal inserting name between hello jane sentence given two sentences sentence sentence return true sentence sentence similar otherwise return false example input sentence name haley sentence haley output true explanation sentence turned sentence inserting name between haley example input sentence sentence lot words output false explanation single sentence inserted inside one sentences equal other example input sentence eating sentence eating output true explanation sentence turned sentence inserting end sentence constraints sentencelength sentencelength sentence sentence consist lowercase uppercase english letters spaces words sentence sentence separated single space

maximum element after decreasing rearranging given array positive integers arr perform some operations possibly none arr satisfies these conditions value first element arr must absolute difference between any adjacent elements must less than equal other words absarri arri each where arrlength indexed absx absolute value types operations perform any number times decrease value any element arr smaller positive integer rearrange elements arr any order return maximum possible value element arr after performing operations satisfy conditions example input arr output explanation satisfy conditions rearranging arr becomes largest element arr example input arr output explanation one possible way satisfy conditions doing following rearrange arr becomes decrease value second element decrease value third element arr which satisfies conditions largest element arr example input arr output explanation array already satisfies conditions largest element constraints arrlength arri

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

valid anagram given two strings return true anagram false otherwise anagram word phrase formed rearranging letters different word phrase typically using original letters exactly once example input anagram nagaram output true example input rat car output false constraints slength tlength consist lowercase english letters follow what inputs contain unicode characters how would adapt your solution such case

count pairs xor range given indexed integer array nums two integers low high return number nice pairs nice pair pair where numslength low numsi xor numsj high example input nums low high output explanation nice pairs follows nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums example input nums low high output explanation nice pairs follows nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums constraints numslength numsi low high

finding average given two integers stream integers tasked implement data structure calculates mkaverage stream mkaverage calculated using these steps number elements stream less than should consider mkaverage otherwise copy last elements stream separate container remove smallest elements largest elements container calculate average value rest elements rounded down nearest integer implement mkaverage class mkaverageint int initializes mkaverage object empty stream two integers void addelementint num inserts new element num stream int calculatemkaverage calculates returns mkaverage current stream rounded down nearest integer example input mkaverage addelement addelement calculatemkaverage addelement calculatemkaverage addelement addelement addelement calculatemkaverage output null null null null null null null explanation mkaverage obj new mkaverage objaddelement current elements objaddelement current elements objcalculatemkaverage return because only elements exist objaddelement current elements objcalculatemkaverage last elements after removing smallest largest element container average equals return objaddelement current elements objaddelement current elements objaddelement current elements objcalculatemkaverage last elements after removing smallest largest element container average equals return constraints num most calls made addelement calculatemkaverage

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

number different integers string given string word consists digits lowercase english letters replace every nondigit character space example abcdef become notice left some integers separated least one space return number different integers after performing replacement operations word two integers considered different their decimal representations without any leading zeros different example input word abcdef output explanation three different integers notice only counted once example input word leetcode output example input word abc output explanation three integers represent same integer because leading zeros ignored when comparing their decimal values constraints wordlength word consists digits lowercase english letters

count nice pairs array given array nums consists nonnegative integers let define revx reverse nonnegative integer example rev rev pair indices nice satisfies following conditions numslength numsi revnumsj numsj revnumsi return number nice pairs indices since number too large return modulo example input nums output explanation two pairs rev rev rev rev example input nums output constraints numslength numsi

number different subsequences gcds given array nums consists positive integers gcd sequence numbers defined greatest integer divides numbers sequence evenly example gcd sequence subsequence array sequence formed removing some elements possibly none array example subsequence return number different gcds nonempty subsequences nums example input nums output explanation figure shows nonempty subsequences their gcds different gcds example input nums output constraints numslength numsi

find xor sum pairs bitwise xor sum list bitwise xor elements list only contains one element xor sum equal element example xor sum equal xor xor xor xor sum equal given two indexed arrays arr arr consist only nonnegative integers consider list containing result arri arrj bitwise every pair where arrlength arrlength return xor sum aforementioned list example input arr arr output explanation list xor sum xor xor xor xor xor example input arr arr output explanation list xor sum constraints arrlength arrlength arri arrj

maximum building height want build new buildings city new buildings built line labeled however city restrictions heights new buildings height each building must nonnegative integer height first building must height difference between any two adjacent buildings cannot exceed additionally city restrictions maximum height specific buildings these restrictions given integer array restrictions where restrictionsi idi maxheighti indicates building idi must height less than equal maxheighti guaranteed each building appear most once restrictions building not restrictions return maximum possible height tallest building example input restrictions output explanation green area image indicates maximum allowed height each building build buildings heights tallest building height example input restrictions output explanation green area image indicates maximum allowed height each building build buildings heights tallest building height example input restrictions output explanation green area image indicates maximum allowed height each building build buildings heights tallest building height constraints restrictionslength minn idi idi unique maxheighti

find winner circular game friends playing game friends sitting circle numbered clockwise order more formally moving clockwise ith friend brings ith friend moving clockwise nth friend brings friend rules game follows start friend count next friends clockwise direction friend started counting wraps around circle may count some friends more than once last friend counted leaves circle loses game more than one friend circle back step starting friend immediately clockwise friend who lost repeat else last friend circle wins game given number friends integer return winner game example input output explanation here steps game start friend count friends clockwise which friends friend leaves circle next start friend count friends clockwise which friends friend leaves circle next start friend count friends clockwise which friends friend leaves circle next start friend count friends clockwise which friends friend leaves circle only friend left they winner example input output explanation friends leave order winner friend constraints follow could solve problem linear time constant space

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

contains duplicate iii given integer array nums two integers indexdiff valuediff find pair indices such absi indexdiff absnumsi numsj valuediff return true such pair exists false otherwise example input nums indexdiff valuediff output true explanation choose satisfy three conditions absi indexdiff abs absnumsi numsj valuediff abs example input nums indexdiff valuediff output false explanation after trying possible pairs cannot satisfy three conditions return false constraints numslength numsi indexdiff numslength valuediff

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

maximum xor each query given sorted array nums nonnegative integers integer maximumbit want perform following query times find nonnegative integer maximumbit such nums xor nums xor xor numsnumslength xor maximized answer ith query remove last element current array nums return array answer where answeri answer ith query example input nums maximumbit output explanation queries answered follows query nums since xor xor xor xor query nums since xor xor xor query nums since xor xor query nums since xor example input nums maximumbit output explanation queries answered follows query nums since xor xor xor xor query nums since xor xor xor query nums since xor xor query nums since xor example input nums maximumbit output constraints numslength maximumbit numsi maximumbit nums sorted ascending order

frequency most frequent element frequency element number times occurs array given integer array nums integer one operation choose index nums increment element index return maximum possible frequency element after performing most operations example input nums output explanation increment first element three times second element two times nums frequency example input nums output explanation multiple optimal solutions increment first element three times nums frequency increment second element four times nums frequency increment third element five times nums frequency example input nums output constraints numslength numsi

minimum operations array increasing given integer array nums indexed one operation choose element array increment example nums choose increment nums nums return minimum number operations needed nums strictly increasing array nums strictly increasing numsi numsi numslength array length trivially strictly increasing example input nums output explanation following operations increment nums nums becomes increment nums nums becomes increment nums nums becomes example input nums output example input nums output constraints numslength numsi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

delete node linked list singlylinked list head want delete node node given node deleted node not given access first node head values linked list unique guaranteed given node node not last node linked list delete given node note deleting node not mean removing memory mean value given node should not exist linked list number nodes linked list should decrease one values before node should same order values after node should same order custom testing input should provide entire linked list head node given node node should not last node list should actual node list build linked list pass node your function output entire list after calling your function example input head node output explanation given second node value linked list should become after calling your function example input head node output explanation given third node value linked list should become after calling your function constraints number nodes given list range nodeval value each node list unique node deleted list not tail node

minimum absolute difference queries minimum absolute difference array defined minimum value where alength elements same minimum absolute difference example minimum absolute difference array note not because must different given integer array nums array queries where queriesi each query compute minimum absolute difference subarray numsliri containing elements nums between based indices inclusive return array ans where ansi answer ith query subarray contiguous sequence elements array value defined example input nums queries output explanation queries processed follows queries subarray minimum absolute difference queries subarray minimum absolute difference queries subarray minimum absolute difference queries subarray minimum absolute difference example input nums queries output explanation queries processed follows queries subarray minimum absolute difference because elements same queries subarray minimum absolute difference queries subarray minimum absolute difference queries subarray minimum absolute difference constraints numslength numsi querieslength numslength

minimum cost reach destination time country cities numbered where cities connected bidirectional roads roads represented integer array edges where edgesi timei denotes road between cities takes timei minutes travel may multiple roads differing travel times connecting same two cities but road connects city itself each time pass city must pay passing fee represented indexed integer array passingfees length where passingfeesj amount dollars must pay when pass city beginning city want reach city maxtime minutes less cost your journey summation passing fees each city passed some moment your journey source destination cities given maxtime edges passingfees return minimum cost complete your journey cannot complete within maxtime minutes example input maxtime edges passingfees output explanation path take which takes minutes worth passing fees example input maxtime edges passingfees output explanation path take which takes minutes worth passing fees cannot take path since would take too long example input maxtime edges passingfees output explanation way reach city city within minutes constraints maxtime passingfeeslength edgeslength timei passingfeesj graph may contain multiple edges between two nodes graph does not contain self loops

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

number full rounds played participating online chess tournament chess round starts every minutes first round day starts after every minutes new round starts example second round starts fourth round starts seventh round starts given two strings logintime logouttime where logintime time login game logouttime time logout game logouttime earlier than logintime means played logintime midnight midnight logouttime return number full chess rounds played tournament note given times follow hour clock means first round day starts last round day starts example input logintime logouttime output explanation played one full round did not play full round because logged after began did not play full round because logged out before ended example input logintime logouttime output explanation played full rounds full rounds constraints logintime logouttime format hhmm logintime logouttime not equal

count good numbers digit string good digits indexed even indices even digits odd indices prime example good because digits even positions even digits odd positions prime however not good because even index but not even given integer return total number good digit strings length since answer may large return modulo digit string string consisting digits may contain leading zeros example input output explanation good numbers length example input output example input output constraints

maximum genetic difference query rooted tree consisting nodes numbered each nodes number denotes unique genetic value genetic value node genetic difference between two genetic values defined bitwisexor their values given integer array parents where parentsi parent node node root tree parentsx also given array queries where queriesi nodei vali each query find maximum genetic difference between vali where genetic value any node path between nodei root nodei root more formally want maximize vali xor return array ans where ansi answer ith query example input parents queries output explanation queries processed follows node maximum genetic difference difference xor node maximum genetic difference difference xor node maximum genetic difference difference xor example input parents queries output explanation queries processed follows node maximum genetic difference difference xor node maximum genetic difference difference xor node maximum genetic difference difference xor constraints parentslength parentsi parentslength every node not root parentsroot querieslength nodei parentslength vali

largest number after mutating substring given string num which represents large integer also given indexed integer array change length maps each digit another digit more formally digit maps digit changed may choose mutate single substring num mutate substring replace each digit numi digit maps change replace numi changenumi return string representing largest possible integer after mutating choosing not single substring num substring contiguous sequence characters within string example input num change output explanation replace substring maps change becomes largest number created return example input num change output explanation replace substring maps change maps change maps change becomes largest number created return example input num change output explanation already largest number created return constraints numlength num consists only digits changelength changed

count ways build rooms ant colony ant tasked adding new rooms numbered your colony given expansion plan indexed integer array length prevroom where prevroomi indicates must build room prevroomi before building room these two rooms must connected directly room already built prevroom expansion plan given such once rooms built every room reachable room only build one room time travel freely between rooms already built only they connected choose build any room long previous room already built return number different orders build rooms since answer may large return modulo example input prevroom output explanation only one way build additional rooms example input prevroom output explanation ways constraints prevroomlength prevroom prevroomi every room reachable room once rooms built

delete duplicate folders system due bug many duplicate folders file system given array paths where pathsi array representing absolute path ith folder file system example one two three represents path onetwothree two folders not necessarily same level identical they contain same nonempty set identical subfolders underlying subfolder structure folders not need root level identical two more folders identical mark folders their subfolders example folders file structure below identical they their subfolders should marked axy bxy however file structure also included path folders would not identical note would considered identical even added folder once identical folders their subfolders marked file system delete them file system only runs deletion once any folders become identical after initial deletion not deleted return array ans containing paths remaining folders after deleting marked folders paths may returned any order example input paths acdabcbda output dda explanation file structure shown folders their subfolders marked deletion because they both contain empty folder named example input paths acabcbabxabxywwy output ccbaab explanation file structure shown folders abx their subfolders marked deletion because they both contain empty folder named note folders identical after deletion but they not deleted because they not marked beforehand example input paths abcdca output ccdaab explanation folders unique file system note returned array different order order does not matter constraints pathslength pathsilength pathsijlength sumpathsijlength pathij consists lowercase english letters two paths lead same folder any folder not root level parent folder also input

count sub islands given two binary matrices grid grid containing only representing water representing land island group connected directionally horizontal vertical any cells outside grid considered water cells island grid considered subisland island grid contains cells island grid return number islands grid considered subislands example input grid grid output explanation picture above grid left grid grid grid colored red grid those considered part subisland three subislands example input grid grid output explanation picture above grid left grid grid grid colored red grid those considered part subisland two subislands constraints gridlength gridlength gridilength gridilength gridij gridij either

isomorphic strings given two strings determine they isomorphic two strings isomorphic characters replaced get occurrences character must replaced another character while preserving order characters two characters may map same character but character may map itself example input egg add output true example input foo bar output false example input paper title output true constraints slength tlength slength consist any valid ascii character

find peak element peak element grid element strictly greater than adjacent neighbors left top bottom given indexed matrix mat where two adjacent cells equal find any peak element matij return length array may assume entire matrix surrounded outer perimeter value each cell must write algorithm runs logn logm time example input mat output explanation both peak elements both acceptable answers example input mat output explanation both peak elements both acceptable answers constraints matlength matilength matij two adjacent cells equal

maximum product difference between two pairs product difference between two pairs defined example product difference between given integer array nums choose four distinct indices such product difference between pairs numsw numsx numsy numsz maximized return maximum such product difference example input nums output explanation choose indices first pair indices second pair product difference example input nums output explanation choose indices first pair indices second pair product difference constraints numslength numsi

maximum number words type malfunctioning keyboard where some letter keys not work other keys keyboard work properly given string text words separated single space leading trailing spaces string brokenletters distinct letter keys broken return number words text fully type using keyboard example input text hello world brokenletters output explanation cannot type world because key broken example input text leet code brokenletters output explanation cannot type leet because keys broken example input text leet code brokenletters output explanation cannot type either word because key broken constraints textlength brokenletterslength text consists words separated single space without any leading trailing spaces each word only consists lowercase english letters brokenletters consists distinct lowercase english letters

count square sum triples square triple abc triple where integers given integer return number square triples such example input output explanation square triples example input output explanation square triples constraints

remove one element array strictly increasing given indexed integer array nums return true made strictly increasing after removing exactly one element false otherwise array already strictly increasing return true array nums strictly increasing numsi numsi each index numslength example input nums output true explanation removing index nums becomes strictly increasing return true example input nums output false explanation result removing element index result removing element index result removing element index result removing element index resulting array strictly increasing return false example input nums output false explanation result removing any element not strictly increasing return false constraints numslength numsi

unique length palindromic subsequences given string return number unique palindromes length three subsequence note even multiple ways obtain same subsequence only counted once palindrome string reads same forwards backwards subsequence string new string generated original string some characters none deleted without changing relative order remaining characters example ace subsequence abcde example input aabca output explanation palindromic subsequences length aba subsequence aabca aaa subsequence aabca aca subsequence aabca example input adc output explanation palindromic subsequences length adc example input bbcbaba output explanation palindromic subsequences length bbb subsequence bbcbaba bcb subsequence bbcbaba bab subsequence bbcbaba aba subsequence bbcbaba constraints slength consists only lowercase english letters

count salary categories sql schema table accounts column name type accountid int income int accountid primary key table each row contains information about monthly income one bank account write sql query report number bank accounts each salary category salary categories low salary salaries strictly less than average salary salaries inclusive range high salary salaries strictly greater than result table must contain three categories accounts category report return result table any order query result format following example example input accounts table accountid income output category accountscount low salary average salary high salary explanation low salary account average salary accounts high salary accounts

remove occurrences substring given two strings part perform following operation occurrences substring part removed find leftmost occurrence substring part remove return after removing occurrences part substring contiguous sequence characters string example input daabcbaabcbc part abc output dab explanation following operations done daabcbaabcbc remove abc starting index dabaabcbc dabaabcbc remove abc starting index dababc dababc remove abc starting index dab occurrences abc example input axxxxyyyyb part output explanation following operations done axxxxyyyyb remove starting index axxxyyyb axxxyyyb remove starting index axxyyb axxyyb remove starting index axyb axyb remove starting index occurrences constraints slength partlength part consists lowercase english letters

nearest exit entrance maze given matrix maze indexed empty cells represented walls represented also given entrance maze where entrance entrancerow entrancecol denotes row column cell initially standing one step move one cell down left cannot step cell wall cannot step outside maze your goal find nearest exit entrance exit defined empty cell border maze entrance does not count exit return number steps shortest path entrance nearest exit such path exists example input maze entrance output explanation exits maze initially entrance cell reach moving steps left reach moving step impossible reach entrance nearest exit which step away example input maze entrance output explanation exit maze does not count exit since entrance cell initially entrance cell reach moving steps nearest exit which steps away example input maze entrance output explanation exits maze constraints mazelength mazeilength mazeij either entrancelength entrancerow entrancecol entrance always empty cell

build array permutation given zerobased permutation nums indexed build array ans same length where ansi numsnumsi each numslength return zerobased permutation nums array distinct integers numslength inclusive example input nums output explanation array ans built follows ans numsnums numsnums numsnums numsnums numsnums numsnums nums nums nums nums nums nums example input nums output explanation array ans built follows ans numsnums numsnums numsnums numsnums numsnums numsnums nums nums nums nums nums nums constraints numslength numsi numslength elements nums distinct followup solve without using extra space memory

divide two integers given two integers dividend divisor divide two integers without using multiplication division mod operator integer division should truncate toward zero which means losing fractional part example would truncated would truncated return quotient after dividing dividend divisor note assume dealing environment could only store integers within bit signed integer range problem quotient strictly greater than return quotient strictly less than return example input dividend divisor output explanation which truncated example input dividend divisor output explanation which truncated constraints dividend divisor divisor

minimum size subarray sum given array positive integers nums positive integer target return minimal length subarray whose sum greater than equal target such subarray return instead example input target nums output explanation subarray minimal length under problem constraint example input target nums output example input target nums output constraints target numslength numsi follow figured out solution try coding another solution which time complexity logn

check characters equal number occurrences given string return true good string false otherwise string good characters appear same number occurrences same frequency example input abacbc output true explanation characters appear characters occur times example input aaabb output false explanation characters appear occurs times while occurs times which not same number times constraints slength consists lowercase english letters

design movie rental system movie renting company consisting shops want implement renting system supports searching booking returning movies system should also support generating report currently rented movies each movie given integer array entries where entriesi shopi moviei pricei indicates copy movie moviei shop shopi rental price pricei each shop carries most one copy movie moviei system should support following functions search finds cheapest shops unrented copy given movie shops should sorted price ascending order case tie one smaller shopi should appear first less than matching shops them should returned shop unrented copy empty list should returned rent rents unrented copy given movie given shop drop drops off previously rented copy given movie given shop report returns cheapest rented movies possibly same movie list res where resj shopj moviej describes jth cheapest rented movie moviej rented shop shopj movies res should sorted price ascending order case tie one smaller shopj should appear first tie one smaller moviej should appear first fewer than rented movies them should returned movies currently being rented empty list should returned implement movierentingsystem class movierentingsystemint int entries initializes movierentingsystem object shops movies entries listinteger searchint movie returns list shops unrented copy given movie described above void rentint shop int movie rents given movie given shop void dropint shop int movie drops off previously rented movie given shop listlistinteger report returns list cheapest rented movies described above note test cases generated such rent only called shop unrented copy movie drop only called shop previously rented out movie example input movierentingsystem search rent rent report drop search output null null null null explanation movierentingsystem movierentingsystem new movierentingsystem movierentingsystemsearch return movies unrented shops shop cheapest shop same price order shop number movierentingsystemrent rent movie shop unrented movies shop movierentingsystemrent rent movie shop unrented movies shop movierentingsystemreport return movie shop cheapest followed movie shop movierentingsystemdrop drop off movie shop unrented movies shop movierentingsystemsearch return movies unrented shops shop cheapest followed shop constraints entrieslength shopi moviei pricei each shop carries most one copy movie moviei most calls total made search rent drop report

number visible people queue people standing queue they numbered left order given array heights distinct integers where heightsi represents height ith person person see another person their queue everybody between shorter than both them more formally ith person see jth person minheightsi heightsj maxheightsi heightsi heightsj return array answer length where answeri number people ith person see their queue example input heights output explanation person see person person see person person see person person see person person see person person see one since nobody them example input heights output constraints heightslength heightsi values heights unique

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

maximum number points cost given integer matrix points indexed starting points want maximize number points get matrix gain points must pick one cell each row picking cell coordinates add pointsrc your score however lose points pick cell too far cell picked previous row every two adjacent rows where picking cells coordinates subtract absc your score return maximum number points achieve absx defined example input points output explanation blue cells denote optimal cells pick which coordinates add your score however must subtract abs abs your score your final score example input points output explanation blue cells denote optimal cells pick which coordinates add your score however must subtract abs abs your score your final score constraints pointslength pointsrlength pointsrc

describe painting long thin painting represented number line painting painted multiple overlapping segments where each segment painted unique color given integer array segments where segmentsi starti endi colori represents halfclosed segment starti endi colori color colors overlapping segments painting mixed when painted when two more colors mix they form new color represented set mixed colors example colors mixed resulting mixed color sake simplicity should only output sum elements set rather than full set want describe painting minimum number nonoverlapping halfclosed segments these mixed colors these segments represented array painting where paintingj leftj rightj mixj describes halfclosed segment leftj rightj mixed color sum mixj example painting created segments described painting because colored sum both first second segments colored only second segment return array painting describing finished painting excluding any parts not painted may return segments any order halfclosed segment section number line between points point not point example input segments output explanation painting described follows colored sum first third segments colored sum second third segments example input segments output explanation painting described follows colored first segment colored sum first second segments colored second segment colored third segment example input segments output explanation painting described follows colored sum first second segments colored sum third fourth segments note returning single segment incorrect because mixed color sets different constraints segmentslength segmentsilength starti endi colori each colori distinct

maximum compatibility score sum survey consists questions where each questions answer either yes survey given students numbered mentors numbered answers students represented integer array students where studentsi integer array contains answers ith student indexed answers mentors represented integer array mentors where mentorsj integer array contains answers jth mentor indexed each student assigned one mentor each mentor one student assigned them compatibility score studentmentor pair number answers same both student mentor example students answers mentors answers their compatibility score because only second third answers same tasked finding optimal studentmentor pairings maximize sum compatibility scores given students mentors return maximum compatibility score sum achieved example input students mentors output explanation assign students mentors following way student mentor compatibility score student mentor compatibility score student mentor compatibility score compatibility score sum example input students mentors output explanation compatibility score any studentmentor pair constraints studentslength mentorslength studentsilength mentorsjlength studentsik either mentorsjk either

confirmation rate sql schema table signups column name type userid int timestamp datetime userid primary key table each row contains information about signup time user userid table confirmations column name type userid int timestamp datetime action enum userid timestamp primary key table userid foreign key reference signups table action enum type confirmed timeout each row table indicates user userid requested confirmation message timestamp confirmation message either confirmed confirmed expired without confirming timeout confirmation rate user number confirmed messages divided total number requested confirmation messages confirmation rate user did not request any confirmation messages round confirmation rate two decimal places write sql query find confirmation rate each user return result table any order query result format following example example input signups table userid timestamp confirmations table userid timestamp action timeout timeout confirmed confirmed confirmed confirmed timeout output userid confirmationrate explanation user did not request any confirmation messages confirmation rate user made requests both timed out confirmation rate user made requests confirmed confirmation rate user made requests where one confirmed other timed out confirmation rate

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

summary ranges given sorted unique integer array nums range set integers inclusive return smallest sorted list ranges cover numbers array exactly each element nums covered exactly one ranges integer such one ranges but not nums each range list should output example input nums output explanation ranges example input nums output explanation ranges constraints numslength numsi values nums unique nums sorted ascending order

cyclically rotating grid given integer matrix grid where both even integers integer matrix composed several layers which shown below image where each color own layer cyclic rotation matrix done cyclically rotating each layer matrix cyclically rotate layer once each element layer take place adjacent element counterclockwise direction example rotation shown below return matrix after applying cyclic rotations example input grid output explanation figures above represent grid every state example input grid output explanation figures above represent grid every state constraints gridlength gridilength both even integers gridij

number smallest unoccupied chair party where friends numbered attending infinite number chairs party numbered infinity when friend arrives party they sit unoccupied chair smallest number example chairs occupied when friend comes they sit chair number when friend leaves party their chair becomes unoccupied moment they leave another friend arrives same moment they sit chair given indexed integer array times where timesi arrivali leavingi indicating arrival leaving times ith friend respectively integer targetfriend arrival times distinct return chair number friend numbered targetfriend sit example input times targetfriend output explanation friend arrives time sits chair friend arrives time sits chair friend leaves time chair becomes empty friend leaves time chair becomes empty friend arrives time sits chair since friend sat chair return example input times targetfriend output explanation friend arrives time sits chair friend arrives time sits chair friend arrives time sits chair friend leaves time chair becomes empty friend leaves time chair becomes empty friend leaves time chair becomes empty since friend sat chair return constraints timeslength timesilength arrivali leavingi targetfriend each arrivali time distinct

maximum alternating subsequence sum alternating sum indexed array defined sum elements even indices minus sum elements odd indices example alternating sum given array nums return maximum alternating sum any subsequence nums after reindexing elements subsequence subsequence array new array generated original array deleting some elements possibly none without changing remaining elements relative order example subsequence underlined elements while not example input nums output explanation optimal choose subsequence alternating sum example input nums output explanation optimal choose subsequence alternating sum example input nums output explanation optimal choose subsequence alternating sum constraints numslength numsi

concatenation array given integer array nums length want create array ans length where ansi numsi ansi numsi indexed specifically ans concatenation two nums arrays return array ans example input nums output explanation array ans formed follows ans numsnumsnumsnumsnumsnums ans example input nums output explanation array ans formed follows ans numsnumsnumsnumsnumsnumsnumsnums ans constraints numslength numsi

sum game alice bob take turns playing game alice starting first given string num even length consisting digits characters each turn player following least one num choose index where numi replace numi any digit between game ends when more characters num bob win sum digits first half num must equal sum digits second half alice win sums must not equal example game ended num bob wins because game ended num alice wins because assuming alice bob play optimally return true alice win false bob win example input num output false explanation moves made sum first half equal sum second half example input num output true explanation alice replace one impossible bob sums equal example input num output false explanation proven bob always win one possible outcome alice replaces first num bob replaces one half num alice replaces one half num bob replaces last half num bob wins because constraints numlength numlength even num consists only digits

sum digits string after convert given string consisting lowercase english letters integer first convert integer replacing each letter position alphabet replace transform integer replacing sum digits repeat transform operation times total example zbax resulting integer would following operations convert zbax transform transform return resulting integer after performing operations described above example input iiii output explanation operations follows convert iiii transform resulting integer example input leetcode output explanation operations follows convert leetcode transform transform resulting integer example input zbax output constraints slength consists lowercase english letters

painting grid three different colors given two integers consider grid where each cell initially white paint each cell red green blue cells must painted return number ways color grid two adjacent cells having same color since answer very large return modulo example input output explanation three possible colorings shown image above example input output explanation six possible colorings shown image above example input output constraints

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

eliminate maximum number monsters playing video game where defending your city group monsters given indexed integer array dist size where disti initial distance kilometers ith monster city monsters walk toward city constant speed speed each monster given integer array speed size where speedi speed ith monster kilometers per minute weapon once fully charged eliminate single monster however weapon takes one minute chargethe weapon fully charged very start lose when any monster reaches your city monster reaches city exact moment weapon fully charged counts loss game ends before use your weapon return maximum number monsters eliminate before lose eliminate monsters before they reach city example input dist speed output explanation beginning distances monsters eliminate first monster after minute distances monsters eliminate second monster after minute distances monsters eliminate thrid monster monsters eliminated example input dist speed output explanation beginning distances monsters eliminate first monster after minute distances monsters lose only eliminate monster example input dist speed output explanation beginning distances monsters eliminate first monster after minute distances monsters lose only eliminate monster constraints distlength speedlength disti speedi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

longest common subpath country cities numbered country road connecting every pair cities friends numbered who traveling country each one them take path consisting some cities each path represented integer array contains visited cities order path may contain city more than once but same city not listed consecutively given integer integer array paths where pathsi integer array representing path ith friend return length longest common subpath shared every friends path common subpath subpath path contiguous sequence cities within path example input paths output explanation longest common subpath example input paths output explanation common subpath shared three paths example input paths output explanation possible longest common subpaths length constraints pathslength sumpathsilength pathsij same city not listed multiple times consecutively pathsi

add minimum number rungs given strictly increasing integer array rungs represents height rungs ladder currently floor height want reach last rung also given integer dist only climb next highest rung distance between where currently floor rung next rung most dist able insert rungs any positive integer height rung not already return minimum number rungs must added ladder order climb last rung example input rungs dist output explanation currently cannot reach last rung add rungs heights climb ladder ladder rungs example input rungs dist output explanation ladder climbed without adding additional rungs example input rungs dist output explanation currently cannot reach first rung ground add rung height climb ladder ladder rungs constraints rungslength rungsi dist rungs strictly increasing

merge bsts create single bst given bst binary search tree root nodes separate bsts stored array trees indexed each bst trees most nodes two roots same value one operation select two distinct indices such value stored one leaves treesi equal root value treesj replace leaf node treesi treesj remove treesj trees return root resulting bst possible form valid bst after performing operations null impossible create valid bst bst binary search tree binary tree where each node satisfies following property every node nodes left subtree value strictly less than nodes value every node nodes subtree value strictly greater than nodes value leaf node children example input trees output null explanation first operation pick merge trees trees delete trees trees second operation pick merge trees trees delete trees trees null resulting tree shown above valid bst return root example input trees output explanation pick merge trees trees delete trees trees resulting tree shown above only valid operation performed but resulting tree not valid bst return null example input trees output explanation impossible perform any operations constraints treeslength number nodes each tree range each node input may children but grandchildren two roots trees same value trees input valid bsts treenodeval

largest odd number string given string num representing large integer return largestvalued odd integer string nonempty substring num empty string odd integer exists substring contiguous sequence characters within string example input num output explanation only nonempty substrings only odd number example input num output explanation odd numbers example input num output explanation already odd number constraints numlength num only consists digits does not contain any leading zeros

number wonderful substrings wonderful string string where most one letter appears odd number times example ccjjc abab wonderful but not given string word consists first ten lowercase english letters return number wonderful nonempty substrings word same substring appears multiple times word count each occurrence separately substring contiguous sequence characters string example input word aba output explanation four wonderful substrings underlined below aba aba aba aba aba example input word aabb output explanation nine wonderful substrings underlined below aabb aabb aabb aab aabb aabb aabb aabb abb aabb aabb aabb example input word output explanation two wonderful substrings underlined below constraints wordlength word consists lowercase english letters

minimum time type word using special typewriter special typewriter lowercase english letters arranged circle pointer character only typed pointer pointing character pointer initially pointing character each second may perform one following operations move pointer one character counterclockwise clockwise type character pointer currently given string word return minimum number seconds type out characters word example input word abc output explanation characters printed follows type character second since pointer initially move pointer clockwise second type character second move pointer clockwise second type character second example input word bza output explanation characters printed follows move pointer clockwise second type character second move pointer counterclockwise seconds type character second move pointer clockwise second type character second example input word zjpc output explanation characters printed follows move pointer counterclockwise second type character second move pointer clockwise seconds type character second move pointer clockwise seconds type character second move pointer counterclockwise seconds type character second constraints wordlength word consists lowercase english letters

find array given subset sums given integer representing length unknown array trying recover also given array sums containing values subset sums unknown array particular order return array ans length representing unknown array multiple answers exist return any them array sub subset array arr sub obtained arr deleting some possibly zero elements arr sum elements sub one possible subset sum arr sum empty array considered note test cases generated such always least one correct answer example input sums output explanation able achieve given subset sums sum sum sum sum sum sum sum sum note any permutation also any permutation also accepted example input sums output explanation only correct answer example input sums output explanation able achieve given subset sums constraints sumslength sumsi

minimum number work sessions finish tasks tasks assigned task times represented integer array tasks length where ith task takes tasksi hours finish work session when work most sessiontime consecutive hours take break should finish given tasks way satisfies following conditions start task work session must complete same work session start new task immediately after finishing previous one may complete tasks any order given tasks sessiontime return minimum number work sessions needed finish tasks following conditions above tests generated such sessiontime greater than equal maximum element tasksi example input tasks sessiontime output explanation finish tasks two work sessions first work session finish first second tasks hours second work session finish third task hours example input tasks sessiontime output explanation finish tasks two work sessions first work session finish tasks except last one hours second work session finish last task hour example input tasks sessiontime output explanation finish tasks one work session constraints taskslength tasksi maxtasksi sessiontime

last day where cross based binary matrix where represents land represents water given integers row col representing number rows columns matrix respectively initially day entire matrix land however each day new cell becomes flooded water given based array cells where cellsi represents ith day cell rith row cith column based coordinates covered water changed want find last day possible walk top bottom only walking land cells start any cell top row end any cell bottom row only travel four cardinal directions left down return last day where possible walk top bottom only walking land cells example input row col cells output explanation above image depicts how matrix changes each day starting day last day where possible cross top bottom day example input row col cells output explanation above image depicts how matrix changes each day starting day last day where possible cross top bottom day example input row col cells output explanation above image depicts how matrix changes each day starting day last day where possible cross top bottom day constraints row col row col cellslength row col row col values cells unique

find greatest common divisor array given integer array nums return greatest common divisor smallest number largest number nums greatest common divisor two numbers largest positive integer evenly divides both numbers example input nums output explanation smallest number nums largest number nums greatest common divisor example input nums output explanation smallest number nums largest number nums greatest common divisor example input nums output explanation smallest number nums largest number nums greatest common divisor constraints numslength numsi

combination sum iii find valid combinations numbers sum such following conditions true only numbers used each number used most once return list possible valid combinations list must not contain same combination twice combinations may returned any order example input output explanation other valid combinations example input output explanation other valid combinations example input output explanation valid combinations using different numbers range smallest sum get since valid combination constraints

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

minimize difference between target chosen elements given integer matrix mat integer target choose one integer each row matrix such absolute difference between target sum chosen elements minimized return minimum absolute difference absolute difference between two numbers absolute value example input mat target output explanation one possible choice choose first row choose second row choose third row sum chosen elements which equals target absolute difference example input mat target output explanation best possible choice choose first row choose second row choose third row sum chosen elements absolute difference example input mat target output explanation best choice choose first row absolute difference constraints matlength matilength matij target

check string prefix array given string array strings words determine whether prefix string words string prefix string words made concatenating first strings words some positive larger than wordslength return true prefix string words false otherwise example input iloveleetcode words iloveleetcodeapples output true explanation made concatenating love leetcode together example input iloveleetcode words applesiloveleetcode output false explanation impossible using prefix arr constraints wordslength wordsilength slength wordsi consist only lowercase english letters

minimum number swaps string balanced given indexed string even length string consists exactly opening brackets closing brackets string called balanced only empty string written where both balanced strings written where balanced string may swap brackets any two indices any number times return minimum number swaps balanced example input output explanation string balanced swapping index index resulting string example input output explanation following string balanced swap index index swap index index resulting string example input output explanation string already balanced constraints slength even either number opening brackets equals number closing brackets equals

number weak characters game playing game contains multiple characters each characters two main properties attack defense given integer array properties where propertiesi attacki defensei represents properties ith character game character said weak any other character both attack defense levels strictly greater than characters attack defense levels more formally character said weak exists another character where attackj attacki defensej defensei return number weak characters example input properties output explanation character strictly greater attack defense than other example input properties output explanation first character weak because second character strictly greater attack defense example input properties output explanation third character weak because second character strictly greater attack defense constraints propertieslength propertiesilength attacki defensei

three divisors given integer return true exactly three positive divisors otherwise return false integer divisor exists integer such example input output false explantion only two divisors example input output true explantion three divisors constraints

find kth largest integer array given array strings nums integer each string nums represents integer without leading zeros return string represents kth largest integer nums note duplicate numbers should counted distinctly example nums first largest integer secondlargest integer thirdlargest integer example input nums output explanation numbers nums sorted nondecreasing order largest integer nums example input nums output explanation numbers nums sorted nondecreasing order largest integer nums example input nums output explanation numbers nums sorted nondecreasing order largest integer nums constraints numslength numsilength numsi consists only digits numsi not any leading zeros

minimum total space wasted resizing operations currently designing dynamic array given indexed integer array nums where numsi number elements array time addition given integer maximum number times resize array any size size array time sizet must least numst because needs enough space array hold elements space wasted time defined sizet numst total space wasted sum space wasted across every time where numslength return minimum total space wasted resize array most times note array any size start does not count number resizing operations example input nums output explanation size set initial size total wasted space example input nums output explanation size set initial size resize time total wasted space example input nums output explanation size set initial size resize time resize time total wasted space constraints numslength numsi numslength

count special quadruplets given indexed integer array nums return number distinct quadruplets such numsa numsb numsc numsd example input nums output explanation only quadruplet satisfies requirement because example input nums output explanation such quadruplets example input nums output explanation quadruplets satisfy requirement constraints numslength numsi

delete characters fancy string fancy string string where three consecutive characters equal given string delete minimum possible number characters fancy return final string after deletion shown answer always unique example input leeetcode output leetcode explanation remove first group create leetcode three consecutive characters equal return leetcode example input aaabaaaa output aabaa explanation remove first group create aabaaaa remove two second group create aabaa three consecutive characters equal return aabaa example input aab output aab explanation three consecutive characters equal return aab constraints slength consists only lowercase english letters

palindrome linked list given head singly linked list return true palindrome false otherwise example input head output true example input head output false constraints number nodes list range nodeval follow could time space

maximum number weeks which work projects numbered given integer array milestones where each milestonesi denotes number milestones ith project work projects following these two rules every week finish exactly one milestone one project must work every week cannot work two milestones same project two consecutive weeks once milestones projects finished only milestones work cause violate above rules stop working note may not able finish every projects milestones due these constraints return maximum number weeks would able work projects without violating rules mentioned above example input milestones output explanation one possible scenario week work milestone project week work milestone project week work milestone project week work milestone project week work milestone project week work milestone project total number weeks example input milestones output explanation one possible scenario week work milestone project week work milestone project week work milestone project week work milestone project week work milestone project week work milestone project week work milestone project total number weeks note cannot work last milestone project week because would violate rules one milestone project remain unfinished constraints milestoneslength milestonesi

minimum difference between highest lowest scores given indexed integer array nums where numsi represents score ith student also given integer pick scores any students array difference between highest lowest scores minimized return minimum possible difference example input nums output explanation one way pick scores one student difference between highest lowest score minimum possible difference example input nums output explanation six ways pick scores two students difference between highest lowest score difference between highest lowest score difference between highest lowest score difference between highest lowest score difference between highest lowest score difference between highest lowest score minimum possible difference constraints numslength numsi

number ways separate numbers wrote down many positive integers string called num however realized forgot add commas seperate different numbers remember list integers nondecreasing integer leading zeros return number possible lists integers could written down get string num since answer may large return modulo example input num output explanation could written down numbers example input num output explanation numbers leading zeros numbers must positive example input num output explanation numbers leading zeros numbers must positive constraints numlength num consists digits

number ways arrive destination city consists intersections numbered bidirectional roads between some intersections inputs generated such reach any intersection any other intersection most one road between any two intersections given integer integer array roads where roadsi timei means road between intersections takes timei minutes travel want know how many ways travel intersection intersection shortest amount time return number ways arrive your destination shortest amount time since answer may large return modulo example input roads output explanation shortest amount time takes intersection intersection minutes four ways get minutes example input roads output explanation only one way intersection intersection takes minutes constraints roadslength roadsilength timei most one road connecting any two intersections reach any intersection any other intersection

find unique binary string given array strings nums containing unique binary strings each length return binary string length does not appear nums multiple answers may return any them example input nums output explanation does not appear nums would also correct example input nums output explanation does not appear nums would also correct example input nums output explanation does not appear nums would also correct constraints numslength numsilength numsi either strings nums unique

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

maximum matrix sum given integer matrix following operation any number times choose any two adjacent elements matrix multiply each them two elements considered adjacent only they share border your goal maximize summation matrixs elements return maximum sum matrixs elements using operation mentioned above example input matrix output explanation follow following steps reach sum equals multiply elements first row multiply elements first column example input matrix output explanation follow following step reach sum equals multiply last elements second row constraints matrixlength matrixilength matrixij

first day where rooms rooms need visit labeled each day labeled starting visit one room day initially day visit room order visit rooms coming days determined following rules given indexed array nextvisit length assuming day visit room room odd number times current visit next day visit room lower equal room number specified nextvisiti where nextvisiti room even number times current visit next day visit room mod return label first day where rooms shown such day exists since answer may very large return modulo example input nextvisit output explanation day visit room total times room which odd next day visit room nextvisit day visit room total times room which even next day visit room mod day visit room first day where rooms example input nextvisit output explanation your room visiting order each day day first day where rooms example input nextvisit output explanation your room visiting order each day day first day where rooms constraints nextvisitlength nextvisiti

reverse prefix word given indexed string word character reverse segment word starts index ends index first occurrence inclusive character does not exist word nothing example word abcdefd should reverse segment starts ends inclusive resulting string dcbaefd return resulting string example input word abcdefd output dcbaefd explanation first occurrence index reverse part word inclusive resulting string dcbaefd example input word xyxzxe output zxyxxe explanation first only occurrence index reverse part word inclusive resulting string zxyxxe example input word abcd output abcd explanation does not exist word should not any reverse operation resulting string abcd constraints wordlength word consists lowercase english letters lowercase english letter

minimum nonzero product array elements given positive integer consider array nums indexed consists integers inclusive range their binary representations allowed following operation any number times choose two elements nums choose bit swap corresponding bit corresponding bit refers bit same position other integer example after swapping bit find minimum nonzero product nums after performing above operation any number times return product modulo note answer should minimum product before modulo operation done example input output explanation nums only one element product equals element example input output explanation nums any swap would either product stay same array product already minimized example input output explanation nums first operation swap leftmost bit second fifth elements resulting array second operation swap middle bit third fourth elements resulting array array product which minimum possible product constraints

happy number write algorithm determine number happy happy number number defined following process starting any positive integer replace number sum squares digits repeat process number equals where stay loops endlessly cycle which does not include those numbers which process ends happy return true happy number false not example input output true explanation example input output false constraints

find path exists graph bidirectional graph vertices where each vertex labeled inclusive edges graph represented integer array edges where each edgesi denotes bidirectional edge between vertex vertex every vertex pair connected most one edge vertex edge itself want determine valid path exists vertex source vertex destination given edges integers source destination return true valid path source destination false otherwise example input edges source destination output true explanation two paths vertex vertex example input edges source destination output false explanation path vertex vertex constraints edgeslength edgesilength source destination duplicate edges self edges

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

employees missing information sql schema table employees column name type employeeid int name varchar employeeid primary key table each row table indicates name employee whose employeeid table salaries column name type employeeid int salary int employeeid primary key table each row table indicates salary employee whose employeeid write sql query report ids employees missing information information employee missing employees name missing employees salary missing return result table ordered employeeid ascending order query result format following example example input employees table employeeid name crew haven kristian salaries table employeeid salary output employeeid explanation employees working company name employee missing salary employee missing

array elements not equal average neighbors given indexed array nums distinct integers want rearrange elements array such every element rearranged array not equal average neighbors more formally rearranged array should property such every range numslength numsi numsi not equal numsi return any rearrangement nums meets requirements example input nums output explanation when numsi average neighbors when numsi average neighbors when numsi average neighbors example input nums output explanation when numsi average neighbors when numsi average neighbors when numsi average neighbors constraints numslength numsi

number strings appear substrings word given array strings patterns string word return number strings patterns exist substring word substring contiguous sequence characters within string example input patterns aabcbcd word abc output explanation appears substring abc abc appears substring abc appears substring abc does not appear substring abc strings patterns appear substring word example input patterns abc word aaaaabbbbb output explanation appears substring aaaaabbbbb appears substring aaaaabbbbb does not appear substring aaaaabbbbb strings patterns appear substring word example input patterns aaa word output explanation each patterns appears substring word constraints patternslength patternsilength wordlength patternsi word consist lowercase english letters

employees whose manager left company sql schema table employees column name type employeeid int name varchar managerid int salary int employeeid primary key table table contains information about employees their salary their manager some employees not manager managerid null write sql query report ids employees whose salary strictly less than whose manager left company when manager leaves company their information deleted employees table but reports their managerid set manager left return result table ordered employeeid query result format following example example input employees table employeeid name managerid salary mila antonella null emery null kalel mikaela null joziah output employeeid explanation employees salary less than kalel joziah kalels manager employee who company joziah joziahs manager employee who left company because row employee deleted

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

number unique good subsequences given binary string binary subsequence binary considered good not empty leading zeros exception find number unique good subsequences binary example binary good subsequences unique good subsequences note subsequences not good because they leading zeros return number unique good subsequences binary since answer may very large return modulo subsequence sequence derived another sequence deleting some elements without changing order remaining elements example input binary output explanation good subsequences binary unique good subsequences example input binary output explanation good subsequences binary unique good subsequences example input binary output explanation good subsequences binary unique good subsequences constraints binarylength binary consists only

operations tree given tree nodes numbered form parent array parent where parenti parent ith node root tree node parent since parent want design data structure allows users lock unlock upgrade nodes tree data structure should support following functions lock locks given node given user prevents other users locking same node may only lock node using function node unlocked unlock unlocks given node given user may only unlock node using function currently locked same user upgrade locks given node given user unlocks descendants regardless who locked may only upgrade node conditions true node unlocked least one locked descendant any user does not any locked ancestors implement lockingtree class lockingtreeint parent initializes data structure parent array lockint num int user returns true possible user user lock node num false otherwise possible node num become locked user user unlockint num int user returns true possible user user unlock node num false otherwise possible node num become unlocked upgradeint num int user returns true possible user user upgrade node num false otherwise possible node num upgraded example input lockingtree lock unlock unlock lock upgrade lock output null true false true true true false explanation lockingtree lockingtree new lockingtree lockingtreelock return true because node unlocked node locked user lockingtreeunlock return false because user cannot unlock node locked user lockingtreeunlock return true because node previously locked user node unlocked lockingtreelock return true because node unlocked node locked user lockingtreeupgrade return true because node unlocked least one locked descendant node node locked user node unlocked lockingtreelock return false because node already locked constraints parentlength parenti parent num user parent represents valid tree most calls total made lock unlock upgrade

check move legal given indexed grid board where boardrc represents cell game board board free cells represented white cells represented black cells represented each move game consists choosing free cell changing color playing either white black however move only legal after changing cell becomes endpoint good line horizontal vertical diagonal good line line three more cells endpoints where endpoints line one color remaining cells middle opposite color cells line free find examples good lines figure below given two integers rmove cmove character color representing color playing white black return true changing cell rmove cmove color color legal move false not legal example input board bwwwwbbwwwbbbw rmove cmove color output true explanation represented colors blue white black respectively cell rmove cmove marked two good lines chosen cell endpoint annotated above red rectangles example input board bwwwbbwwb rmove cmove color output false explanation while good lines chosen cell middle cell good lines chosen cell endpoint constraints boardlength boardrlength rmove cmove boardrmovecmove color either

course schedule total numcourses courses take labeled numcourses given array prerequisites where prerequisitesi indicates must take course first want take course example pair indicates take course first take course return true finish courses otherwise return false example input numcourses prerequisites output true explanation total courses take take course should finished course possible example input numcourses prerequisites output false explanation total courses take take course should finished course take course should also finished course impossible constraints numcourses prerequisiteslength prerequisitesilength numcourses pairs prerequisitesi unique

remove stones minimize total given indexed integer array piles where pilesi represents number stones ith pile integer should apply following operation exactly times choose any pilesi remove floorpilesi stones notice apply operation same pile more than once return minimum possible total number stones remaining after applying operations floorx greatest integer smaller than equal rounds down example input piles output explanation steps possible scenario apply operation pile resulting piles apply operation pile resulting piles total number stones example input piles output explanation steps possible scenario apply operation pile resulting piles apply operation pile resulting piles apply operation pile resulting piles total number stones constraints pileslength pilesi

minimum garden perimeter collect enough apples garden represented infinite grid apple tree planted every integer coordinate apple tree planted integer coordinate apples growing buy axisaligned square plot land centered given integer neededapples return minimum perimeter plot such least neededapples apples inside perimeter plot value defined example input neededapples output explanation square plot side length does not contain any apples however square plot side length apples inside depicted image above perimeter example input neededapples output example input neededapples output constraints neededapples

find groups farmland given indexed binary matrix land where represents hectare forested land represents hectare farmland keep land organized designated rectangular areas hectares consist entirely farmland these rectangular areas called groups two groups adjacent meaning farmland one group not fourdirectionally adjacent another farmland different group land represented coordinate system where top left corner land bottom corner land find coordinates top left bottom corner each group farmland group farmland top left corner bottom corner represented length array return array containing length arrays described above each group farmland land groups farmland return empty array may return answer any order example input land output explanation first group top left corner land bottom corner land second group top left corner land bottom corner land example input land output explanation first group top left corner land bottom corner land example input land output explanation groups farmland constraints landlength landilength land consists only groups farmland rectangular shape

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

count number special subsequences sequence special consists positive number followed positive number positive number example special contrast not special given array nums consisting only integers return number different subsequences special since answer may very large return modulo subsequence array sequence derived array deleting some elements without changing order remaining elements two subsequences different set indices chosen different example input nums output explanation special subsequences bolded example input nums output explanation special subsequences example input nums output explanation special subsequences bolded constraints numslength numsi

find longest valid obstacle course each position want build some obstacle courses given indexed integer array obstacles length where obstaclesi describes height ith obstacle every index between inclusive find length longest obstacle course obstacles such choose any number obstacles between inclusive must include ith obstacle course must put chosen obstacles same order they appear obstacles every obstacle except first taller than same height obstacle immediately before return array ans length where ansi length longest obstacle course index described above example input obstacles output explanation longest valid obstacle course each position length length length length example input obstacles output explanation longest valid obstacle course each position length length length example input obstacles output explanation longest valid obstacle course each position length length length also valid length also valid length also valid length constraints obstacleslength obstaclesi

number good subsets given integer array nums call subset nums good product represented product one more distinct prime numbers example nums good subsets products respectively not good subsets products respectively return number different good subsets nums modulo subset nums any array obtained deleting some possibly none elements nums two subsets different only chosen indices delete different example input nums output explanation good subsets product which product distinct prime product which product distinct primes product which product distinct prime product which product distinct prime product which product distinct primes product which product distinct prime example input nums output explanation good subsets product which product distinct prime product which product distinct primes product which product distinct primes product which product distinct prime product which product distinct primes constraints numslength numsi

gcd sort array given integer array nums perform following operation any number times nums swap positions two elements numsi numsj gcdnumsi numsj where gcdnumsi numsj greatest common divisor numsi numsj return true possible sort nums nondecreasing order using above swap method false otherwise example input nums output true explanation sort performing following operations swap because gcd nums swap because gcd nums example input nums output false explanation impossible sort array because cannot swapped any other element example input nums output true sort performing following operations swap because gcd nums swap because gcd nums swap because gcd nums constraints numslength numsi

find middle index array given indexed integer array nums find leftmost middleindex smallest amongst possible ones middleindex index where nums nums numsmiddleindex numsmiddleindex numsmiddleindex numsnumslength middleindex left side sum considered similarly middleindex numslength side sum considered return leftmost middleindex satisfies condition such index example input nums output explanation sum numbers before index sum numbers after index example input nums output explanation sum numbers before index sum numbers after index example input nums output explanation valid middleindex constraints numslength numsi note question same httpsleetcodecomproblemsfindpivotindex

shortest palindrome given string convert palindrome adding characters front return shortest palindrome find performing transformation example input aacecaaa output aaacecaaa example input abcd output dcbabcd constraints slength consists lowercase english letters only

maximum product length two palindromic substrings given indexed string tasked finding two nonintersecting palindromic substrings odd length such product their lengths maximized more formally want choose four integers such slength both substrings sij skl palindromes odd lengths sij denotes substring index index inclusive return maximum possible product lengths two nonintersecting palindromic substrings palindrome string same forward backward substring contiguous sequence characters string example input ababbb output explanation substrings aba bbb palindromes odd length product example input zaaaxbbby output explanation substrings aaa bbb palindromes odd length product constraints slength consists lowercase english letters

simple bank system tasked writing program popular bank automate incoming transactions transfer deposit withdraw bank accounts numbered initial balance each account stored indexed integer array balance account having initial balance balancei execute valid transactions transaction valid given account numbers between amount money withdrawn transferred less than equal balance account implement bank class banklong balance initializes object indexed integer array balance boolean transferint account int account long money transfers money dollars account numbered account account numbered account return true transaction successful false otherwise boolean depositint account long money deposit money dollars account numbered account return true transaction successful false otherwise boolean withdrawint account long money withdraw money dollars account numbered account return true transaction successful false otherwise example input bank withdraw transfer deposit transfer withdraw output null true true true false false explanation bank bank new bank bankwithdraw return true account balance valid withdraw account banktransfer return true account balance valid transfer account account bankdeposit return true valid deposit account account banktransfer return false current balance account invalid transfer bankwithdraw return false invalid because account does not exist constraints balancelength account account account balancei money most calls made each function transfer deposit withdraw

minimum operations univalue grid given integer grid size integer one operation add subtract any element grid univalue grid grid where elements equal return minimum number operations grid univalue not possible return example input grid output explanation every element equal doing following add once subtract once subtract twice total operations used example input grid output explanation every element equal example input grid output explanation impossible every element equal constraints gridlength gridilength gridij

sum beauty array given indexed integer array nums each index numslength beauty numsi equals numsj numsi numsk numslength numsi numsi numsi previous condition not satisfied none previous conditions holds return sum beauty numsi where numslength example input nums output explanation each index range beauty nums equals example input nums output explanation each index range beauty nums equals beauty nums equals example input nums output explanation each index range beauty nums equals constraints numslength numsi

stock price fluctuation given stream records about particular stock each record contains timestamp corresponding price stock timestamp unfortunately due volatile nature stock market records not come order even worse some records may incorrect another record same timestamp may appear later stream correcting price previous wrong record design algorithm updates price stock particular timestamp correcting price any previous records timestamp finds latest price stock based current records latest price price latest timestamp recorded finds maximum price stock based current records finds minimum price stock based current records implement stockprice class stockprice initializes object price records void updateint timestamp int price updates price stock given timestamp int current returns latest price stock int maximum returns maximum price stock int minimum returns minimum price stock example input stockprice update update current maximum update maximum update minimum output null null null null null explanation stockprice stockprice new stockprice stockpriceupdate timestamps corresponding prices stockpriceupdate timestamps corresponding prices stockpricecurrent return latest timestamp price being stockpricemaximum return maximum price timestamp stockpriceupdate previous timestamp wrong price updated timestamps corresponding prices stockpricemaximum return maximum price after correction stockpriceupdate timestamps corresponding prices stockpriceminimum return minimum price timestamp constraints timestamp price most calls made total update current maximum minimum current maximum minimum called only after update called least once

detect squares given stream points plane design algorithm adds new points stream data structure duplicate points allowed should treated different points given query point counts number ways choose three points data structure such three points query point form axisaligned square positive area axisaligned square square whose edges same length either parallel perpendicular xaxis yaxis implement detectsquares class detectsquares initializes object empty data structure void addint point adds new point point data structure int countint point counts number ways form axisaligned squares point point described above example input detectsquares add add add count count add count output null null null null null explanation detectsquares detectsquares new detectsquares detectsquaresadd detectsquaresadd detectsquaresadd detectsquarescount return choose first second third points detectsquarescount return query point cannot form square any points data structure detectsquaresadd adding duplicate points allowed detectsquarescount return choose first second third points first third fourth points constraints pointlength most calls total made add count

maximum product length two palindromic subsequences given string find two disjoint palindromic subsequences such product their lengths maximized two subsequences disjoint they not both pick character same index return maximum possible product lengths two palindromic subsequences subsequence string derived another string deleting some characters without changing order remaining characters string palindromic reads same forward backward example input leetcodecom output explanation optimal solution choose ete subsequence cdc subsequence product their lengths example input output explanation optimal solution choose first character subsequence second character subsequence product their lengths example input accbcaxxcxx output explanation optimal solution choose accca subsequence xxcxx subsequence product their lengths constraints slength consists lowercase english letters only

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

smallest missing genetic value each subtree family tree rooted consisting nodes numbered given indexed integer array parents where parentsi parent node since node root parents genetic values each represented integer inclusive range given indexed integer array nums where numsi distinct genetic value node return array ans length where ansi smallest genetic value missing subtree rooted node subtree rooted node contains node descendant nodes example input parents nums output explanation answer each subtree calculated follows subtree contains nodes values smallest missing value subtree contains only node value smallest missing value subtree contains nodes values smallest missing value subtree contains only node value smallest missing value example input parents nums output explanation answer each subtree calculated follows subtree contains nodes values smallest missing value subtree contains nodes values smallest missing value subtree contains only node value smallest missing value subtree contains nodes values smallest missing value subtree contains only node value smallest missing value subtree contains only node value smallest missing value example input parents nums output explanation value missing subtrees constraints parentslength numslength parentsi parents parents represents valid tree numsi each numsi distinct

find missing observations observations sided dice rolls each face numbered observations went missing only observations rolls fortunately also calculated average value rolls given integer array rolls length where rollsi value ith observation also given two integers mean return array length containing missing observations such average value rolls exactly mean multiple valid answers return any them such array exists return empty array average value set numbers sum numbers divided note mean integer sum rolls should divisible example input rolls mean output explanation mean rolls example input rolls mean output explanation mean rolls example input rolls mean output explanation impossible mean matter what missing rolls constraints rollslength rollsi mean

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

check numbers ascending sentence sentence list tokens separated single space leading trailing spaces every token either positive number consisting digits leading zeros word consisting lowercase english letters example puppy eyes legs sentence seven tokens numbers other tokens such puppy words given string representing sentence need check numbers strictly increasing left other than last number each number strictly smaller than number return true false otherwise example input box blue red green yellow marbles output true explanation numbers they strictly increasing left example input hello world output false explanation numbers they not strictly increasing example input sunset overnight lows low output false explanation numbers they not strictly increasing constraints slength consists lowercase english letters spaces digits inclusive number tokens between inclusive tokens separated single space least two numbers each number positive number less than leading zeros contains leading trailing spaces

minimum number moves seat everyone seats students room given array seats length where seatsi position ith seat also given array students length where studentsj position jth student may perform following move any number times increase decrease position ith student moving ith student position return minimum number moves required move each student seat such two students same seat note may multiple seats students same position beginning example input seats students output explanation students moved follows first student moved position position using move second student moved position position using moves third student moved position position using move total moves used example input seats students output explanation students moved follows first student not moved second student moved position position using move third student moved position position using moves fourth student moved position position using moves total moves used example input seats students output explanation note two seats position two seats position students moved follows first student moved position position using move second student moved position position using moves third student not moved fourth student not moved total moves used constraints seatslength studentslength seatsi studentsj

two out three given three integer arrays nums nums nums return distinct array containing values present least two out three arrays may return values any order example input nums nums nums output explanation values present least two arrays three arrays nums nums example input nums nums nums output explanation values present least two arrays nums nums nums nums nums nums example input nums nums nums output explanation value present least two arrays constraints numslength numslength numslength numsi numsj numsk

grid game given indexed array grid size where gridrc represents number points position matrix two robots playing game matrix both robots initially start want reach each robot may only move down start game first robot moves collecting points cells path cells traversed path gridrc set second robot moves collecting points path note their paths may intersect one another first robot wants minimize number points collected second robot contrast second robot wants maximize number points collects both robots play optimally return number points collected second robot example input grid output explanation optimal path taken first robot shown red optimal path taken second robot shown blue cells visited first robot set second robot collect points example input grid output explanation optimal path taken first robot shown red optimal path taken second robot shown blue cells visited first robot set second robot collect points example input grid output explanation optimal path taken first robot shown red optimal path taken second robot shown blue cells visited first robot set second robot collect points constraints gridlength gridrlength gridrc

number pairs interchangeable rectangles given rectangles represented indexed integer array rectangles where rectanglesi widthi heighti denotes width height ith rectangle two rectangles considered interchangeable they same widthtoheight ratio more formally two rectangles interchangeable widthiheighti widthjheightj using decimal division not integer division return number pairs interchangeable rectangles rectangles example input rectangles output explanation following interchangeable pairs rectangles index indexed rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle example input rectangles output explanation interchangeable pairs rectangles constraints rectangleslength rectanglesilength widthi heighti

count number maximum bitwiseor subsets given integer array nums find maximum possible bitwise subset nums return number different nonempty subsets maximum bitwise array subset array obtained deleting some possibly zero elements two subsets considered different indices elements chosen different bitwise array equal aalength indexed example input nums output explanation maximum possible bitwise subset subsets bitwise example input nums output explanation nonempty subsets bitwise total subsets example input nums output explanation maximum possible bitwise subset subsets bitwise constraints numslength numsi

minimum moves convert string given string consisting characters which either move defined selecting three consecutive characters converting them note move applied character stay same return minimum number moves required characters converted example input xxx output explanation xxx ooo select characters convert them one move example input xxox output explanation xxox ooox oooo select first characters first move convert them select last characters convert them final string contains example input oooo output explanation convert constraints slength either

longest subsequence repeated times given string length integer tasked find longest subsequence repeated times string subsequence string derived another string deleting some characters without changing order remaining characters subsequence seq repeated times string seq subsequence where seq represents string constructed concatenating seq times example bba repeated times string bababcba because string bbabba constructed concatenating bba times subsequence string bababcba return longest subsequence repeated times string multiple such subsequences found return lexicographically largest one such subsequence return empty string example input letsleetcode output let explanation two longest subsequences repeated times let ete let lexicographically largest one example input output explanation longest subsequence repeated times example input output explanation subsequence repeated times empty string returned constraints slength consists lowercase english letters

maximum earnings taxi points road driving your taxi points road labeled direction going want drive point point money picking passengers cannot change direction taxi passengers represented indexed integer array rides where ridesi starti endi tipi denotes ith passenger requesting ride point starti point endi who willing give tipi dollar tip each passenger pick earn endi starti tipi dollars may only drive most one passenger time given rides return maximum number dollars earn picking passengers optimally note may drop off passenger pick different passenger same point example input rides output explanation pick passenger earn dollars example input rides output explanation pick following passengers drive passenger point point profit dollars drive passenger point point profit dollars drive passenger point point profit dollars earn dollars total constraints rideslength ridesilength starti endi tipi

stone game alice bob continue their games stones row stones each stone associated value given integer array stones where stonesi value ith stone alice bob take turns alice starting first each turn player may remove any stone stones player who removes stone loses sum values removed stones divisible bob win automatically remaining stones even alices turn assuming both players play optimally return true alice wins false bob wins example input stones output true explanation game played follows turn alice remove either stone turn bob removes remaining stone sum removed stones divisible bob loses alice wins game example input stones output false explanation alice remove only stone sum values removed stones since stones removed sum values not divisible bob wins game example input stones output false explanation bob always win one possible way bob win shown below turn alice remove second stone value sum removed stones turn bob removes fifth stone value sum removed stones turn alices removes fourth stone value sum removed stones turn bob removes third stone value sum removed stones turn alice removes first stone value sum removed stones alice loses game because sum removed stones divisible bob wins game constraints stoneslength stonesi

contains duplicate given integer array nums integer return true two distinct indices array such numsi numsj absi example input nums output true example input nums output true example input nums output false constraints numslength numsi

parallel courses iii given integer which indicates courses labeled also given integer array relations where relationsj prevcoursej nextcoursej denotes course prevcoursej completed before course nextcoursej prerequisite relationship furthermore given indexed integer array time where timei denotes how many months takes complete ith course must find minimum number months needed complete courses following these rules may start taking course any time prerequisites met any number courses taken same time return minimum number months needed complete courses note test cases generated such possible complete every course graph directed acyclic graph example input relations time output explanation figure above represents given graph time required complete each course start course course simultaneously month course takes months course takes months complete respectively earliest time start course month total time required months example input relations time output explanation figure above represents given graph time required complete each course start courses month complete them after months respectively course taken only after course completed after months completed after months course taken only after courses completed after max months minimum time needed complete courses months constraints relationslength minn relationsjlength prevcoursej nextcoursej prevcoursej nextcoursej pairs prevcoursej nextcoursej unique timelength timei given graph directed acyclic graph

time when network becomes idle network servers labeled given integer array edges where edgesi indicates message channel between servers they pass any number messages each other directly one second also given indexed integer array patience length servers connected message passed one server any other servers directly indirectly message channels server labeled master server rest data servers each data server needs send message master server processing wait reply messages move between servers optimally every message takes least amount time arrive master server master server process newly arrived messages instantly send reply originating server via reversed path message gone beginning second each data server sends message processed starting second beginning every second each data server check received reply message sent any newly arrived replies master server not resend message periodically data server resend message every patiencei seconds data server resend message patiencei seconds elapsed since last time message sent server otherwise more resending occur server network becomes idle when messages passing between servers arriving servers return earliest second starting which network becomes idle example input edges patience output explanation beginning second data server sends message denoted master server data server sends message denoted master server second message arrives master server master server processes message instantly sends reply back server not received any reply second patience elapsed since server sent message does not resend message server not received any reply second patience elapsed since server sent message resends message denoted second reply arrives server more resending occur server message arrives master server master server processes message instantly sends reply back server resends message denoted second reply arrives server more resending occur server second reply arrives server starting beginning second messages passing between servers arriving servers time when network becomes idle example input edges patience output explanation data servers receive reply back beginning second beginning second network becomes idle constraints patiencelength patience patiencei edgeslength min edgesilength duplicate edges each server directly indirectly reach another server

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum number operations array continuous given integer array nums one operation replace any element nums any integer nums considered continuous both following conditions fulfilled elements nums unique difference between maximum element minimum element nums equals numslength example nums continuous but nums not continuous return minimum number operations nums continuous example input nums output explanation nums already continuous example input nums output explanation one possible solution change last element resulting array which continuous example input nums output explanation one possible solution change second element change third element change fourth element resulting array which continuous constraints numslength numsi

convert array array given indexed dimensional integer array original two integers tasked creating dimensional array rows columns using elements original elements indices inclusive original should form first row constructed array elements indices inclusive should form second row constructed array return array constructed according above procedure empty array impossible example input original output explanation constructed array should contain rows columns first group elements original becomes first row constructed array second group elements original becomes second row constructed array example input original output explanation constructed array should contain row columns put three elements original first row constructed array example input original output explanation elements original impossible fit elements array return empty array constraints originallength originali

partition array two arrays minimize sum difference given integer array nums integers need partition nums two arrays length minimize absolute difference sums arrays partition nums put each element nums one two arrays return minimum possible absolute difference example input nums output explanation one optimal partition absolute difference between sums arrays abs example input nums output explanation one optimal partition absolute difference between sums arrays abs example input nums output explanation one optimal partition absolute difference between sums arrays abs constraints numslength numsi

score students solving math expression given string contains digits addition symbols multiplication symbols only representing valid math expression single digit numbers expression given elementary school students students instructed get answer expression following order operations compute multiplication reading left compute addition reading left given integer array answers length which submitted answers students particular order asked grade answers following these rules answer equals correct answer expression student rewarded points otherwise answer could interpreted student applied operators wrong order but correct arithmetic student rewarded points otherwise student rewarded points return sum points students example input answers output explanation illustrated above correct answer expression one student rewarded points student might applied operators wrong order one student rewarded points points students sum points example input answers output explanation correct answer expression three students rewarded points each student might applied operators wrong order two students rewarded points points students sum points example input answers output explanation correct answer expression student incorrectly done answer would also rules grading students rewarded points they got correct answer not points points students sum points constraints slength represents valid expression contains only digits only integer operands expression inclusive range count operators math expression test data generated such correct answer expression range answerslength answersi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

find original array doubled array integer array original transformed doubled array changed appending twice value every element original randomly shuffling resulting array given array changed return original changed doubled array changed not doubled array return empty array elements original may returned any order example input changed output explanation one possible original array could twice value twice value twice value other original arrays could example input changed output explanation changed not doubled array example input changed output explanation changed not doubled array constraints changedlength changedi

kth smallest product two sorted arrays given two sorted indexed integer arrays nums nums integer return kth based smallest product numsi numsj where numslength numslength example input nums nums output explanation smallest products nums nums nums nums smallest product example input nums nums output explanation smallest products nums nums nums nums nums nums nums nums nums nums nums nums smallest product example input nums nums output explanation smallest products nums nums nums nums nums nums smallest product constraints numslength numslength numsi numsj numslength numslength nums nums sorted

reverse integer given signed bit integer return digits reversed reversing causes value outside signed bit integer range return assume environment does not allow store bit integers signed unsigned example input output example input output example input output constraints

power two given integer return true power two otherwise return false integer power two exists integer such example input output true explanation example input output true explanation example input output false constraints follow could solve without loopsrecursion

count number pairs absolute difference given integer array nums integer return number pairs where such numsi numsj value defined example input nums output explanation pairs absolute difference example input nums output explanation pairs absolute difference example input nums output explanation pairs absolute difference constraints numslength numsi

number valid words sentence sentence consists lowercase letters digits hyphens punctuation marks spaces only each sentence broken down one more tokens separated one more spaces token valid word three following true only contains lowercase letters hyphens andor punctuation digits most one hyphen present must surrounded lowercase characters valid but not valid most one punctuation mark present must end token valid but not valid examples valid words include afad bac given string sentence return number valid words sentence example input sentence cat dog output explanation valid words sentence cat dog example input sentence output explanation valid words sentence invalid because starts punctuation mark invalid because they contain digits example input sentence alice bob playing stonegame output explanation valid words sentence alice bob playing stonegame invalid because contains digits constraints sentencelength sentence only contains lowercase english letters digits least token

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

next greater numerically balanced number integer numerically balanced every digit number exactly occurrences digit given integer return smallest numerically balanced number strictly greater than example input output explanation numerically balanced since digit occurs times also smallest numerically balanced number strictly greater than example input output explanation numerically balanced since digit occurs time digit occurs times also smallest numerically balanced number strictly greater than note cannot answer because appeared more than times example input output explanation numerically balanced since digit occurs time digit occurs times also smallest numerically balanced number strictly greater than constraints

final value variable after performing operations programming language only four operations one variable increments value variable decrements value variable initially value given array strings operations containing list operations return final value after performing operations example input operations xxx output explanation operations performed follows initially decremented incremented incremented example input operations xxx output explanation operations performed follows initially incremented incremented incremented example input operations xxxx output explanation operations performed follows initially incremented incremented decremented decremented constraints operationslength operationsi either

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

smallest klength subsequence occurrences letter given string integer letter letter integer repetition return lexicographically smallest subsequence length letter letter appear least repetition times test cases generated letter appears least repetition times subsequence string derived another string deleting some characters without changing order remaining characters string lexicographically smaller than string first position where differ string letter appears earlier alphabet than corresponding letter example input leet letter repetition output eet explanation four subsequences length letter appear least time lee leet let leet let leet eet leet lexicographically smallest subsequence them eet example input leetcode letter repetition output ecde explanation ecde lexicographically smallest subsequence length letter appear least times example input letter repetition output explanation only subsequence length letter appear least times constraints repetition slength consists lowercase english letters letter lowercase english letter appears least repetition times

remove colored pieces both neighbors same color pieces arranged line each piece colored either given string colors length where colorsi color ith piece alice bob playing game where they take alternating turns removing pieces line game alice moves first alice only allowed remove piece colored both neighbors also colored she not allowed remove pieces colored bob only allowed remove piece colored both neighbors also colored not allowed remove pieces colored alice bob cannot remove pieces edge line player cannot move their turn player loses other player wins assuming alice bob play optimally return true alice wins return false bob wins example input colors aaababb output true explanation aaababb aababb alice moves first she removes second left since only whose neighbors both bobs turn bob cannot move his turn since whose neighbors both alice wins return true example input colors output false explanation alice her turn first only two both edge line she cannot move her turn bob wins return false example input colors abbbbbbbaaa output false explanation abbbbbbbaaa abbbbbbbaa alice moves first her only option remove second last abbbbbbbaa abbbbbbaa next bobs turn many options which piece remove pick any alices second turn she more pieces she remove bob wins return false constraints colorslength colors consists only letters

number pairs strings concatenation equal target given array digit strings nums digit string target return number pairs indices where such concatenation numsi numsj equals target example input nums target output explanation valid pairs example input nums target output explanation valid pairs example input nums target output explanation valid pairs constraints numslength numsilength targetlength numsi target consist digits numsi target not leading zeros

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

count nodes highest score binary tree rooted consisting nodes nodes labeled given indexed integer array parents representing tree where parentsi parent node since node root parents each node score find score node consider node edges connected removed tree would become one more nonempty subtrees size subtree number nodes score node product sizes those subtrees return number nodes highest score example input parents output explanation score node score node score node score node score node highest score three nodes node node node highest score example input parents output explanation score node score node score node highest score two nodes node node highest score constraints parentslength parents parentsi parents represents valid binary tree

maximize confusion exam teacher writing test truefalse questions denoting true denoting false wants confuse students maximizing number consecutive questions same answer multiple trues multiple falses row given string answerkey where answerkeyi original answer ith question addition given integer maximum number times may perform following operation change answer key any question set answerkeyi return maximum number consecutive answer key after performing operation most times example input answerkey ttff output explanation replace both answerkey tttt four consecutive example input answerkey tfft output explanation replace first answerkey ffft alternatively replace second answerkey tfff both cases three consecutive example input answerkey ttfttftt output explanation replace first answerkey tttttftt alternatively replace second answerkey ttfttttt both cases five consecutive constraints answerkeylength answerkeyi either

check word placed crossword given matrix board representing current state crossword puzzle crossword contains lowercase english letters solved words represent any empty cells represent any blocked cells word placed horizontally left left vertically top bottom bottom top board does not occupy cell containing character cell each letter placed must either empty match letter already board must not any empty cells other lowercase letters directly left word word placed horizontally must not any empty cells other lowercase letters directly above below word word placed vertically given string word return true word placed board false otherwise example input board word abc output true explanation word abc placed shown above top bottom example input board word output false explanation impossible place word because always spaceletter above below example input board word output true explanation word placed shown above left constraints boardlength boardilength boardij lowercase english letter wordlength maxm word contain only lowercase english letters

maximum number ways partition array given indexed integer array nums length number ways partition nums number pivot indices satisfy both conditions pivot nums nums numspivot numspivot numspivot numsn also given integer choose change value one element nums leave array unchanged return maximum possible number ways partition nums satisfy both conditions after changing most one element example input nums output explanation one optimal approach change nums array becomes one way partition array pivot partition example input nums output explanation optimal approach leave array unchanged two ways partition array pivot partition pivot partition example input nums output explanation one optimal approach change nums array becomes four ways partition array constraints numslength numsi

second minimum time reach destination city represented bidirectional connected graph vertices where each vertex labeled inclusive edges graph represented integer array edges where each edgesi denotes bidirectional edge between vertex vertex every vertex pair connected most one edge vertex edge itself time taken traverse any edge time minutes each vertex traffic signal which changes color green red vice versa every change minutes signals change same time enter vertex any time but leave vertex only when signal green cannot wait vertex signal green second minimum value defined smallest value strictly larger than minimum value example second minimum value second minimum value given edges time change return second minimum time take vertex vertex notes any vertex any number times assume when journey starts signals turned green example input edges time change output explanation figure left shows given graph blue path figure minimum time path time taken start time elapsed minutes time elapsed minutes time elapsed minimum time needed minutes red path shows path get second minimum time start time elapsed minutes time elapsed minutes time elapsed wait minutes time elapsed minutes time elapsed second minimum time minutes example input edges time change output explanation minimum time path time minutes second minimum time path time minutes constraints edgeslength min edgesilength duplicate edges each vertex reached directly indirectly every other vertex time change

maximum difference between increasing elements given indexed integer array nums size find maximum difference between numsi numsj numsj numsi such numsi numsj return maximum difference such exists return example input nums output explanation maximum difference occurs numsj numsi note difference numsj numsi but not valid example input nums output explanation such numsi numsj example input nums output explanation maximum difference occurs numsj numsi constraints numslength numsi

number laser beams bank antitheft security devices activated inside bank given indexed binary string array bank representing floor plan bank which matrix banki represents ith row consisting means cell empty while means cell security device one laser beam between any two security devices both conditions met two devices located two different rows where each row where security devices ith row laser beams independent one beam does not interfere nor join another return total number laser beams bank example input bank output explanation between each following device pairs one beam total beams bank bank bank bank bank bank bank bank bank bank bank bank bank bank bank bank note beam between any device row any row because row contains security devices which breaks second condition example input bank output explanation does not exist two devices located two different rows constraints banklength bankilength bankij either

watering plants alice bob want water plants their garden plants arranged row labeled left where ith plant located each plant needs specific amount water alice bob watering each initially full they water plants following way alice waters plants order left starting plant bob waters plants order left starting plant they begin watering plants simultaneously takes same amount time water each plant regardless how much water needs alicebob must water plant they enough their fully water otherwise they first refill their instantaneously water plant case both alice bob reach same plant one more water currently hisher watering should water plant they same amount water alice should water plant given indexed integer array plants integers where plantsi amount water ith plant needs two integers capacitya capacityb representing capacities alices bobs watering cans respectively return number times they refill water plants example input plants capacitya capacityb output explanation initially alice bob units water each their watering cans alice waters plant bob waters plant alice bob units units water respectively alice enough water plant she waters bob does not enough water plant refills his waters total number times they refill water plants example input plants capacitya capacityb output explanation initially alice bob units units water their watering cans respectively alice waters plant bob waters plant alice bob unit water each need water plants respectively since neither them enough water their current plants they refill their cans water plants total number times they refill water plants example input plants capacitya capacityb output explanation only one plant alices watering units water whereas bobs units since alice more water her she waters plant total number times they refill constraints plantslength plantsi maxplantsi capacitya capacityb

earliest possible day full bloom flower seeds every seed must planted first before begin grow bloom planting seed takes time does growth seed given two indexed integer arrays planttime growtime length each planttimei number full days takes plant ith seed every day work planting exactly one seed not work planting same seed consecutive days but planting seed not complete worked planttimei days planting total growtimei number full days takes ith seed grow after being completely planted after last day growth flower blooms stays bloomed forever beginning day plant seeds any order return earliest possible day where seeds blooming example input planttime growtime output explanation grayed out pots represent planting days colored pots represent growing days flower represents day blooms one optimal way day plant seed seed grows full days blooms day days plant seed seed grows full days blooms day days plant seed seed grows full day blooms day day seeds blooming example input planttime growtime output explanation grayed out pots represent planting days colored pots represent growing days flower represents day blooms one optimal way day plant seed seed grows full days blooms day days plant seed seed grows full day blooms day days plant seed seed grows full days blooms day days plant seed seed grows full day blooms day day seeds blooming example input planttime growtime output explanation day plant seed seed grows full day blooms day day seeds blooming constraints planttimelength growtimelength planttimei growtimei

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

maximum number words found sentences sentence list words separated single space leading trailing spaces given array strings sentences where each sentencesi represents single sentence return maximum number words appear single sentence example input sentences alice bob love leetcode think too great thanks very much output explanation first sentence alice bob love leetcode words total second sentence think too words total third sentence great thanks very much words total maximum number words single sentence comes third sentence which words example input sentences please wait continue fight continue win output explanation possible multiple sentences contain same number words example second third sentences underlined same number words constraints sentenceslength sentencesilength sentencesi consists only lowercase english letters only sentencesi does not leading trailing spaces words sentencesi separated single space

abbreviating product range given two positive integers left left calculate product integers inclusive range left since product may very large abbreviate following these steps count trailing zeros product remove them let denote count example trailing zeros trailing zeros denote remaining number digits product express product presuf where pre denotes first digits product suf denotes last digits product after removing trailing zeros keep unchanged example express but represented finally represent product string presufec example represented return string denoting abbreviated product integers inclusive range left example input left output explanation product trailing zeros remains same abbreviation end since number digits which less than not abbreviate further final representation example input left output explanation product trailing zeros which remove get abbreviation end number digits after removing trailing zeros not abbreviate further abbreviated product example input left output explanation product constraints left

minimum cost buying candies discount shop selling candies discount every two candies sold shop gives third candy free customer choose any candy take away free long cost chosen candy less than equal minimum cost two candies bought example candies costs customer buys candies costs they take candy cost free but not candy cost given indexed integer array cost where costi denotes cost ith candy return minimum cost buying candies example input cost output explanation buy candies costs take candy cost free total cost buying candies only way buy candies note cannot buy candies costs take candy cost free cost free candy less than equal minimum cost purchased candies example input cost output explanation way which get minimum cost described below buy candies costs take candy cost free buy candies costs take last remaining candy cost free minimum cost buy candies example input cost output explanation since only candies buy both them not third candy take free minimum cost buy candies constraints costlength costi

maximum twin sum linked list linked list size where even ith node indexed linked list known twin nith node example node twin node node twin node these only nodes twins twin sum defined sum node twin given head linked list even length return maximum twin sum linked list example input head output explanation nodes twins nodes respectively twin sum other nodes twins linked list maximum twin sum linked list example input head output explanation nodes twins present linked list node twin node having twin sum node twin node having twin sum maximum twin sum linked list max example input head output explanation only one node twin linked list having twin sum constraints number nodes list even integer range nodeval

divide string groups size string partitioned groups size using following procedure first group consists first characters string second group consists next characters string each character part exactly one group last group string does not characters remaining character fill used complete group note partition done after removing fill character last group exists concatenating groups order resultant string should given string size each group character fill return string array denoting composition every group divided using above procedure example input abcdefghi fill output abcdefghi explanation first characters abc form first group next characters def form second group last characters ghi form third group since groups completely filled characters string not need use fill groups formed abc def ghi example input abcdefghij fill output abcdefghijxx explanation similar previous example forming first three groups abc def ghi last group only use character string complete group add twice groups formed abc def ghi jxx constraints slength consists lowercase english letters only fill lowercase english letter

minimum swaps group together swap defined taking two distinct positions array swapping values them circular array defined array where consider first element last element adjacent given binary circular array nums return minimum number swaps required group present array together any location example input nums output explanation here few ways group together using swap using swap using swaps using circular property array way group together swaps minimum number swaps required example input nums output explanation here few ways group together using swaps using circular property array using swaps way group together swaps minimum number swaps required example input nums output explanation already grouped together due circular property array minimum number swaps required constraints numslength numsi either

minimum operations array kincreasing given indexed array arr consisting positive integers positive integer array arr called kincreasing arrik arri holds every index where example arr kincreasing because arr arr arr arr arr arr arr arr however same arr not kincreasing because arr arr because arr arr one operation choose index change arri any positive integer return minimum number operations required array kincreasing given example input arr output explanation resultant array nondecreasing some kincreasing arrays formed them require operations suboptimal change array example because would take operations shown cannot array kincreasing less than operations example input arr output explanation same example one problem description here every index where arri arri since given array already kincreasing not need perform any operations example input arr output explanation indices only ones not satisfying arri arri one ways array kincreasing changing arr arr array note other ways array kincreasing but none them require less than operations constraints arrlength arri arrlength

maximum running time computers computers given integer indexed integer array batteries where ith battery run computer batteriesi minutes interested running computers simultaneously using given batteries initially insert most one battery each computer after any integer time moment remove battery computer insert another battery any number times inserted battery totally new battery battery another computer may assume removing inserting processes take time note batteries cannot recharged return maximum number minutes run computers simultaneously example input batteries output explanation initially insert battery first computer battery second computer after two minutes remove battery second computer insert battery instead note battery run one minute end third minute battery drained need remove first computer insert battery instead end fourth minute battery also drained first computer longer running run two computers simultaneously most minutes return example input batteries output explanation initially insert battery first computer battery second computer after one minute battery battery drained need remove them insert battery first computer battery second computer after another minute battery battery also drained first second computers longer running run two computers simultaneously most minutes return constraints batterieslength batteriesi

maximum fruits harvested after most steps fruits available some positions infinite xaxis given integer array fruits where fruitsi positioni amounti depicts amounti fruits position positioni fruits already sorted positioni ascending order each positioni unique also given integer startpos integer initially position startpos any position either walk left takes one step move one unit xaxis walk most steps total every position reach harvest fruits position fruits disappear position return maximum total number fruits harvest example input fruits startpos output explanation optimal way move position harvest fruits move position harvest fruits moved steps harvested fruits total example input fruits startpos output explanation move most steps cannot reach position nor optimal way harvest fruits starting position move left position harvest fruit move position harvest fruits move position harvest fruits moved steps harvested fruits total example input fruits startpos output explanation move most steps cannot reach any position fruits constraints fruitslength fruitsilength startpos positioni positioni positioni any indexed amounti

find possible recipes given supplies information about different recipes given string array recipes string array ingredients ith recipe name recipesi create needed ingredients ingredientsi ingredients recipe may need created other recipes ingredientsi may contain string recipes also given string array supplies containing ingredients initially infinite supply them return list recipes create may return answer any order note two recipes may contain each other their ingredients example input recipes bread ingredients yeastflour supplies yeastflourcorn output bread explanation create bread since ingredients yeast flour example input recipes breadsandwich ingredients yeastflourbreadmeat supplies yeastflourmeat output breadsandwich explanation create bread since ingredients yeast flour create sandwich since ingredient meat create ingredient bread example input recipes breadsandwichburger ingredients yeastflourbreadmeatsandwichmeatbread supplies yeastflourmeat output breadsandwichburger explanation create bread since ingredients yeast flour create sandwich since ingredient meat create ingredient bread create burger since ingredient meat create ingredients bread sandwich constraints recipeslength ingredientslength ingredientsilength supplieslength recipesilength ingredientsijlength suppliesklength recipesi ingredientsij suppliesk consist only lowercase english letters values recipes supplies combined unique each ingredientsi does not contain any duplicate values

bitwise numbers range given two integers left represent range left return bitwise numbers range inclusive example input left output example input left output example input left output constraints left

number smooth descent periods stock given integer array prices representing daily price history stock where pricesi stock price ith day smooth descent period stock consists one more contiguous days such price each day lower than price preceding day exactly first day period exempted rule return number smooth descent periods example input prices output explanation smooth descent periods note period one day smooth descent period definition example input prices output explanation smooth descent periods note not smooth descent period example input prices output explanation smooth descent period constraints priceslength pricesi

check every row column contains numbers matrix valid every row every column contains integers inclusive given integer matrix matrix return true matrix valid otherwise return false example input matrix output true explanation case every row column contains numbers return true example input matrix output false explanation case but first row first column not contain numbers return false constraints matrixlength matrixilength matrixij

sequentially ordinal rank tracker scenic location represented name attractiveness score where name unique string locations score integer locations ranked best worst higher score better location scores two locations equal location lexicographically smaller name better building system tracks ranking locations system initially starting locations supports adding scenic locations one time querying ith best location locations already added where number times system queried current query example when system queried time returns best location locations already added note test data generated any time number queries does not exceed number locations added system implement sortracker class sortracker initializes tracker system void addstring name int score adds scenic location name score system string get queries returns ith best location where number times method invoked invocation example input sortracker add add get add get add get add get add get get bradford branford alps orland orlando alpine output null null null branford null alps null bradford null bradford null bradford orland explanation sortracker tracker new sortracker initialize tracker system trackeraddbradford add location namebradford score system trackeraddbranford add location namebranford score system trackerget sorted locations best worst branford bradford note branford precedes bradford due higher score time get called return best location branford trackeraddalps add location namealps score system trackerget sorted locations branford alps bradford note alps precedes bradford even though they same score because alps lexicographically smaller than bradford return best location alps time get called trackeraddorland add location nameorland score system trackerget sorted locations branford alps bradford orland return bradford time get called trackeraddorlando add location nameorlando score system trackerget sorted locations branford orlando alps bradford orland return bradford trackeraddalpine add location namealpine score system trackerget sorted locations branford orlando alpine alps bradford orland return bradford trackerget sorted locations branford orlando alpine alps bradford orland return orland constraints name consists lowercase english letters unique locations namelength score any time number calls get does not exceed number calls add most calls total made add get

highest ranked items within price range given indexed integer array grid size represents map items shop integers grid represent following represents wall cannot pass represents empty cell freely move other positive integers represent price item cell may also freely move these item cells takes step travel between adjacent grid cells also given integer arrays pricing start where pricing low high start row col indicates start position row col interested only items price range low high inclusive further given integer interested positions highestranked items whose prices within given price range rank determined first these criteria different distance defined length shortest path start shorter distance higher rank price lower price higher rank but must price range row number smaller row number higher rank column number smaller column number higher rank return highestranked items within price range sorted their rank highest lowest fewer than reachable items within price range return them example input grid pricing start output explanation start price range take items ranks these items distance distance distance distance highest ranked items price range example input grid pricing start output explanation start price range take items ranks these items distance price distance price distance distance highest ranked items price range example input grid pricing start output explanation start price range take items ranks these items distance distance highest ranked items price range note but only reachable items within price range constraints gridlength gridilength gridij pricinglength low high startlength row col gridrowcol

longest palindrome concatenating two letter words given array strings words each element words consists two lowercase english letters create longest possible palindrome selecting some elements words concatenating them any order each element selected most once return length longest palindrome create impossible create any palindrome return palindrome string reads same forward backward example input words lcclgg output explanation one longest palindrome lcggcl length note clgglc another longest palindrome created example input words abtyytlcclab output explanation one longest palindrome tylcclyt length note lcyttycl another longest palindrome created example input words ccllxx output explanation one longest palindrome length note another longest palindrome created constraints wordslength wordsilength wordsi consists lowercase english letters

solving questions brainpower given indexed integer array questions where questionsi pointsi brainpoweri array describes questions exam where process questions order starting question decision whether solve skip each question solving question earn pointsi points but unable solve each next brainpoweri questions skip question get decision next question example given questions question solved earn points but unable solve questions instead question skipped question solved earn points but unable solve questions return maximum points earn exam example input questions output explanation maximum points earned solving questions solve question earn points unable solve next questions unable solve questions solve question earn points total points earned other way earn more points example input questions output explanation maximum points earned solving questions skip question solve question earn points unable solve next questions unable solve questions solve question earn points total points earned other way earn more points constraints questionslength questionsilength pointsi brainpoweri

sum subarray ranges given integer array nums range subarray nums difference between largest smallest element subarray return sum subarray ranges nums subarray contiguous nonempty sequence elements within array example input nums output explanation subarrays nums following range largest smallest range range range range range sum ranges example input nums output explanation subarrays nums following range largest smallest range range range range range sum ranges example input nums output explanation sum subarray ranges nums constraints numslength numsi followup could find solution time complexity

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

count words obtained after adding letter given two indexed arrays strings startwords targetwords each string consists lowercase english letters only each string targetwords check possible choose string startwords perform conversion operation equal targetwords conversion operation described following two steps append any lowercase letter not present string end example string abc letters added but not added resulting string abcd rearrange letters new string any arbitrary order example abcd rearranged acbd bacd cbda note also rearranged abcd itself return number strings targetwords obtained performing operations any string startwords note only verifying string targetwords obtained string startwords performing operations strings startwords not change process example input startwords antacttack targetwords tackactacti output explanation order form targetwords tack use startwords act append rearrange actk tack string startwords used obtain targetwords act note act does exist startwords but must append one letter string before rearranging order form targetwords acti use startwords act append rearrange acti acti itself example input startwords aba targetwords abcabcd output explanation order form targetwords abc use startwords add rearrange abc string startwords used obtain targetwords abcd constraints startwordslength targetwordslength startwordsilength targetwordsjlength each string startwords targetwords consists lowercase english letters only letter occurs more than once any string startwords targetwords

stamping grid given binary matrix grid where each cell either empty occupied given stamps size stampheight stampwidth want fit stamps such they follow given restrictions requirements cover empty cells not cover any occupied cells put many stamps want stamps overlap each other stamps not allowed rotated stamps must stay completely inside grid return true possible fit stamps while following given restrictions requirements otherwise return false example input grid stampheight stampwidth output true explanation two overlapping stamps labeled image able cover empty cells example input grid stampheight stampwidth output false explanation way fit stamps onto empty cells without stamps going outside grid constraints gridlength gridrlength gridrc either stampheight stampwidth

implement queue using stacks implement first first out fifo queue using only two stacks implemented queue should support functions normal queue push peek pop empty implement myqueue class void pushint pushes element back queue int pop removes element front queue returns int peek returns element front queue boolean empty returns true queue empty false otherwise notes must use only standard operations stack which means only push top peekpop top size empty operations valid depending your language stack may not supported natively may simulate stack using list deque doubleended queue long use only stacks standard operations example input myqueue push push peek pop empty output null null null false explanation myqueue myqueue new myqueue myqueuepush queue myqueuepush queue leftmost front queue myqueuepeek return myqueuepop return queue myqueueempty return false constraints most calls made push pop peek empty calls pop peek valid followup implement queue such each operation amortized time complexity other words performing operations take overall time even one those operations may take longer

rearrange array elements sign given indexed integer array nums even length consisting equal number positive negative integers should rearrange elements nums such modified array follows given conditions every consecutive pair integers opposite signs integers same sign order which they present nums preserved rearranged array begins positive integer return modified array after rearranging elements satisfy aforementioned conditions example input nums output explanation positive integers nums negative integers only possible way rearrange them such they satisfy conditions other ways such incorrect because they not satisfy one more conditions example input nums output explanation only positive integer only negative integer nums nums rearranged constraints numslength numslength even numsi nums consists equal number positive negative integers

count elements strictly smaller greater elements given integer array nums return number elements both strictly smaller strictly greater element appear nums example input nums output explanation element element strictly smaller than element strictly greater than element element strictly smaller than element strictly greater than total elements having both strictly smaller strictly greater element appear nums example input nums output explanation element element strictly smaller than element strictly greater than since two elements value total elements having both strictly smaller strictly greater element appear nums constraints numslength numsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

adding spaces string given indexed string indexed integer array spaces describes indices original string where spaces added each space should inserted before character given index example given enjoyyourcoffee spaces place spaces before which indices respectively obtain enjoy your coffee return modified string after spaces added example input leetcodehelpsmelearn spaces output leetcode helps learn explanation indices correspond underlined characters leetcodehelpsmelearn place spaces before those characters example input icodeinpython spaces output code thon explanation indices correspond underlined characters icodeinpython place spaces before those characters example input spacing spaces output explanation also able place spaces before first character string constraints slength consists only lowercase uppercase english letters spaceslength spacesi slength values spaces strictly increasing

check parentheses string valid parentheses string nonempty string consisting only valid any following conditions true written concatenated where valid parentheses strings written where valid parentheses string given parentheses string string locked both length locked binary string consisting only each index locked lockedi cannot change but lockedi change either return true valid parentheses string otherwise return false example input locked output true explanation locked locked cannot change change while leaving unchanged valid example input locked output true explanation not need any changes because already valid example input locked output false explanation locked permits change changing either not valid constraints slength lockedlength either lockedi either

check appears before given string consisting only characters return true every appears before every string otherwise return false example input aaabbb output true explanation indices while indices every appears before every return true example input abab output false explanation index index not every appears before every return false example input bbb output true explanation every appears before every return true constraints slength either

capitalize title given string title consisting one more words separated single space where each word consists english letters capitalize string changing capitalization each word such length word letters change letters lowercase otherwise change first letter uppercase remaining letters lowercase return capitalized title example input title capitalize title output capitalize title explanation since words length least first letter each word uppercase remaining letters lowercase example input title first letter each word output first letter each word explanation word length lowercase remaining words length least first letter each remaining word uppercase remaining letters lowercase example input title love leetcode output love leetcode explanation word length lowercase remaining words length least first letter each remaining word uppercase remaining letters lowercase constraints titlelength title consists words separated single space without any leading trailing spaces each word consists uppercase lowercase english letters nonempty

count hidden sequences given indexed array integers differences which describes differences between each pair consecutive integers hidden sequence length more formally call hidden sequence hidden differencesi hiddeni hiddeni further given two integers lower upper describe inclusive range values lower upper hidden sequence contain example given differences lower upper hidden sequence sequence length whose elements between inclusive possible hidden sequences not possible since contains element greater than not possible since differences not correct return number possible hidden sequences possible sequences return example input differences lower upper output explanation possible hidden sequences return example input differences lower upper output explanation possible hidden sequences return example input differences lower upper output explanation possible hidden sequences return constraints differenceslength differencesi lower upper

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

find first palindromic string array given array strings words return first palindromic string array such string return empty string string palindromic reads same forward backward example input words abccaradaracecarcool output ada explanation first string palindromic ada note racecar also palindromic but not first example input words notapalindromeracecar output racecar explanation first only string palindromic racecar example input words defghi output explanation palindromic strings empty string returned constraints wordslength wordsilength wordsi consists only lowercase english letters

lowest common ancestor binary tree given binary tree find lowest common ancestor lca two given nodes tree according definition lca wikipedia “the lowest common ancestor defined between two nodes lowest node both descendants where allow node descendant itself” example input root nullnull output explanation lca nodes example input root nullnull output explanation lca nodes since node descendant itself according lca definition example input root output constraints number nodes tree range nodeval nodeval unique exist tree

execution suffix instructions staying grid grid topleft cell bottomright cell given integer integer array startpos where startpos startrow startcol indicates robot initially cell startrow startcol also given indexed string length where ith instruction robot move left move move move down robot begin executing any ith instruction executes instructions one one end but stops either these conditions met next instruction move robot off grid more instructions left execute return array answer length where answeri number instructions robot execute robot begins executing ith instruction example input startpos rrddlu output explanation starting startpos beginning execution ith instruction rrddlu only one instruction executed before moves off grid rddlu five instructions executed while stays grid ends ddlu four instructions executed while stays grid ends dlu three instructions executed while stays grid ends only one instruction executed before moves off grid moving would move off grid example input startpos lurd output explanation lurd urd example input startpos lrud output explanation matter which instruction robot begins execution would move off grid constraints slength startposlength startrow startcol consists

destroying asteroids given integer mass which represents original mass planet further given integer array asteroids where asteroidsi mass ith asteroid arrange planet collide asteroids any arbitrary order mass planet greater than equal mass asteroid asteroid destroyed planet gains mass asteroid otherwise planet destroyed return true asteroids destroyed otherwise return false example input mass asteroids output true explanation one way order asteroids planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass asteroids destroyed example input mass asteroids output false explanation planet cannot ever gain enough mass destroy asteroid mass after planet destroys other asteroids mass less than collision would not destroy last asteroid constraints mass asteroidslength asteroidsi

number ways divide long corridor along long library corridor line seats decorative plants given indexed string corridor length consisting letters where each represents seat each represents plant one room divider already installed left index another index additional room dividers installed each position between indices most one divider installed divide corridor nonoverlapping sections where each section exactly two seats any number plants may multiple ways perform division two ways different position room divider installed first way but not second way return number ways divide corridor since answer may very large return modulo way return example input corridor ssppsps output explanation different ways divide corridor black bars above image indicate two room dividers already installed note each ways each section exactly two seats example input corridor ppspsp output explanation only way divide corridor not installing any additional dividers installing any would create some section does not exactly two seats example input corridor output explanation way divide corridor because always section does not exactly two seats constraints corridorlength corridori either

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

intervals between identical elements given indexed array integers arr interval between two elements arr defined absolute difference between their indices more formally interval between arri arrj return array intervals length where intervalsi sum intervals between arri each element arr same value arri note absolute value example input arr output explanation index another found index index another found index index two more found indices index another found index index another found index index two more found indices index two more found indices example input arr output explanation index two more found indices index only one array sum intervals identical elements index two more found indices index two more found indices constraints arrlength arri

recover original array alice indexed array arr consisting positive integers she chose arbitrary positive integer created two new indexed integer arrays lower higher following manner loweri arri every index where higheri arri every index where unfortunately alice lost three arrays however she remembers integers present arrays lower higher but not array each integer belonged help alice recover original array given array nums consisting integers where exactly integers present lower remaining higher return original array arr case answer not unique return any valid array note test cases generated such exists least one valid array arr example input nums output explanation arr get lower higher combining lower higher gives which permutation nums another valid possibility arr case lower higher example input nums output explanation arr get lower higher combining lower higher gives which equal nums note arr cannot because case only possible way obtain invalid since must positive example input nums output explanation only possible combination arr using them get lower higher constraints numslength numsi test cases generated such exists least one valid array arr

minimum moves reach target score playing game integers start integer want reach integer target one move either increment current integer one double current integer use increment operation any number times however only use double operation most maxdoubles times given two integers target maxdoubles return minimum number moves needed reach target starting example input target maxdoubles output explanation keep incrementing reach target example input target maxdoubles output explanation initially increment times double once increment once double again increment once example input target maxdoubles output explanation initially increment once double once increment once double again constraints target maxdoubles

find lonely numbers array given integer array nums number lonely when appears only once adjacent numbers appear array return lonely numbers nums may return answer any order example input nums output explanation lonely number since appears exactly once does not appear nums lonely number since appears exactly once does not appear nums not lonely number since appears nums vice versa lonely numbers nums note may also returned example input nums output explanation lonely number since appears exactly once does not appear nums lonely number since appears exactly once does not appear nums not lonely number since appears twice lonely numbers nums note may also returned constraints numslength numsi

number after double reversal reversing integer means reverse digits example reversing gives reversing gives leading zeros not retained given integer num reverse num get reversed reverse reversed get reversed return true reversed equals num otherwise return false example input num output true explanation reverse num get reverse get which equals num example input num output false explanation reverse num get reverse get which does not equal num example input num output true explanation reverse num get reverse get which equals num constraints num

rings rods rings each ring either red green blue rings distributed across ten rods labeled given string rings length describes rings placed onto rods every two characters rings forms colorposition pair used describe each ring where first character ith pair denotes ith rings color second character ith pair denotes rod ith ring placed example rgb describes rings red ring placed onto rod labeled green ring placed onto rod labeled blue ring placed onto rod labeled return number rods three colors rings them example input rings bbgrrrg output explanation rod labeled holds rings colors red green blue rod labeled holds rings but only red blue rod labeled holds only green ring number rods three colors example input rings brgrrbg output explanation rod labeled holds rings colors red green blue rod labeled holds only red ring number rods three colors example input rings output explanation only one ring given rods three colors constraints ringslength ringsi where even either indexed ringsi where odd digit indexed

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

maximum employees invited meeting company organizing meeting list employees waiting invited they arranged large circular table capable seating any number employees employees numbered each employee favorite person they attend meeting only they sit next their favorite person table favorite person employee not themself given indexed integer array favorite where favoritei denotes favorite person ith employee return maximum number employees invited meeting example input favorite output explanation above figure shows how company invite employees seat them round table employees cannot invited because employee cannot sit beside employees simultaneously note company also invite employees give them their desired seats maximum number employees invited meeting example input favorite output explanation each employee favorite person least one other employee only way company invite them they invite every employee seating arrangement same figure given example employee sit between employees employee sit between employees employee sit between employees maximum number employees invited meeting example input favorite output explanation above figure shows how company invite employees seat them round table employee cannot invited because two spots next their favorite employee taken company leaves them out meeting maximum number employees invited meeting constraints favoritelength favoritei favoritei

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

maximum score node sequence undirected graph nodes numbered given indexed integer array scores length where scoresi denotes score node also given integer array edges where edgesi denotes exists undirected edge connecting nodes node sequence valid meets following conditions edge connecting every pair adjacent nodes sequence node appears more than once sequence score node sequence defined sum scores nodes sequence return maximum score valid node sequence length such sequence exists return example input scores edges output explanation figure above shows graph chosen node sequence score node sequence shown other node sequence score more than note sequences also valid score sequence not valid since edge connects nodes example input scores edges output explanation figure above shows graph valid node sequences length return constraints scoreslength scoresi edgeslength edgesilength duplicate edges

find difference two arrays given two indexed integer arrays nums nums return list answer size where answer list distinct integers nums which not present nums answer list distinct integers nums which not present nums note integers lists may returned any order example input nums nums output explanation nums nums present index nums whereas nums nums not present nums answer nums nums present index nums whereas nums nums not present nums answer example input nums nums output explanation nums nums nums not present nums since nums nums their value only included once answer every integer nums present nums answer constraints numslength numslength numsi numsi

number ways select buildings given indexed binary string which represents types buildings along street where denotes ith building office denotes ith building restaurant city official would select buildings random inspection however ensure variety two consecutive buildings out selected buildings same type example given cannot select buildings would form which not allowed due having two consecutive buildings same type return number valid ways select buildings example input output explanation following sets indices selected valid forms forms forms forms forms forms other selection valid total ways example input output explanation shown valid selections constraints slength either

different ways add parentheses given string expression numbers operators return possible results computing different possible ways group numbers operators may return answer any order test cases generated such output values fit bit integer number different results does not exceed example input expression output explanation example input expression output explanation constraints expressionlength expression consists digits operator integer values input expression range

add two integers given two integers num num return sum two integers example input num num output explanation num num their sum returned example input num num output explanation num num returned constraints num num

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

number ways buy pens pencils given integer total indicating amount money also given two integers cost cost indicating price pen pencil respectively spend part your money buy multiple quantities none each kind writing utensil return number distinct ways buy some number pens pencils example input total cost cost output explanation price pen price pencil buy pens buy pencils buy pen buy pencils buy pens cannot buy any pencils total number ways buy pens pencils example input total cost cost output explanation price both pens pencils which cost more than total cannot buy any writing utensils only way buy pens pencils constraints total cost cost

maximize number subsequences string given indexed string text another indexed string pattern length both which consist only lowercase english letters add either pattern pattern anywhere text exactly once note character added even beginning end text return maximum number times pattern occur subsequence modified text subsequence string derived another string deleting some characters without changing order remaining characters example input text abdcdbc pattern output explanation add pattern between text text get abadcdbc number times occurs subsequence some other strings which subsequences after adding character text aabdcdbc abdacdbc however strings such abdcadbc abdccdbc abdcdbcc although obtainable only subsequences suboptimal shown not possible get more than subsequences adding only one character example input text aabb pattern output explanation some strings which obtained text subsequences aaabb aaabb aabbb constraints textlength patternlength text pattern consist only lowercase english letters

count hills valleys array given indexed integer array nums index part hill nums closest nonequal neighbors smaller than numsi similarly index part valley nums closest nonequal neighbors larger than numsi adjacent indices part same hill valley numsi numsj note index part hill valley must nonequal neighbor both left index return number hills valleys nums example input nums output explanation index nonequal neighbor left index neither hill nor valley index closest nonequal neighbors since index hill index closest nonequal neighbors since index valley index closest nonequal neighbors since index valley but note part same valley index index closest nonequal neighbors since index hill index nonequal neighbor index neither hill nor valley hills valleys return example input nums output explanation index nonequal neighbor left index neither hill nor valley index nonequal neighbor left index neither hill nor valley index closest nonequal neighbors since index neither hill nor valley index closest nonequal neighbors since index neither hill nor valley index closest nonequal neighbors since index neither hill nor valley index nonequal neighbor index neither hill nor valley hills valleys return constraints numslength numsi

minimum number operations convert time given two strings current correct representing two hour times hour times formatted hhmm where between between earliest hour time latest one operation increase time current minutes perform operation any number times return minimum number operations needed convert current correct example input current correct output explanation convert current correct operations follows add minutes current current becomes add minutes current current becomes add minutes current current becomes proven not possible convert current correct fewer than operations example input current correct output explanation only add one minute current minimum number operations needed constraints current correct format hhmm current correct

maximize topmost element after moves given indexed integer array nums representing contents pile where nums topmost element pile one move perform either following pile not empty remove topmost element pile one more removed elements add any one them back onto pile element becomes new topmost element also given integer which denotes total number moves made return maximum value topmost element pile possible after exactly moves case not possible obtain nonempty pile after moves return example input nums output explanation one ways end top pile after moves follows step remove topmost element pile becomes step remove topmost element pile becomes step remove topmost element pile becomes step add back onto pile pile becomes note not only way end top pile shown largest answer possible after moves example input nums output explanation first move our only option pop topmost element pile since not possible obtain nonempty pile after one move return constraints numslength numsi

count lattice points inside circle given integer array circles where circlesi represents center radius ith circle drawn grid return number lattice points present inside least one circle note lattice point point integer coordinates points lie circumference circle also considered inside example input circles output explanation figure above shows given circle lattice points present inside circle shown green other points such which shown red not considered inside circle number lattice points present inside least one circle example input circles output explanation figure above shows given circles exactly lattice points which present inside least one circle some them constraints circleslength circlesilength minxi

encrypt decrypt strings given character array keys containing unique characters string array values containing strings length also given another string array dictionary contains permitted original strings after decryption should implement data structure encrypt decrypt indexed string string encrypted following process each character string find index satisfying keysi keys replace valuesi string note case character string not present keys encryption process cannot carried out empty string returned string decrypted following process each substring length occurring even index string find such valuesi multiple valid choose any one them means string could multiple possible strings decrypt replace keysi string implement encrypter class encrypterchar keys string values string dictionary initializes encrypter class keys values dictionary string encryptstring word encrypts word encryption process described above returns encrypted string int decryptstring word returns number possible strings word could decrypt also appear dictionary example input encrypter encrypt decrypt abcd acbd adbc badc dacb cadb cbda abad abcd eizfeiam output null eizfeiam explanation encrypter encrypter new encryptera abcd acbd adbc badc dacb cadb cbda abad encrypterencryptabcd return eizfeiam maps maps maps maps encrypterdecrypteizfeiam return map maps maps possible strings after decryption abad cbad abcd cbcd those strings abad abcd appear dictionary answer constraints keyslength valueslength valuesilength dictionarylength dictionaryilength keysi dictionaryi unique wordlength wordlength wordi appear keys wordlength even keys valuesi dictionaryi word word only contain lowercase english letters most calls made encrypt decrypt total

calculate digit sum string given string consisting digits integer round completed length greater than one round following divide consecutive groups size such first characters first group next characters second group note size last group smaller than replace each group string representing sum digits example replaced because merge consecutive groups together form new string length string greater than repeat step return after rounds completed example input output explanation first round divide groups size calculate digit sum each group becomes after first round second round divide calculate digit sum each group becomes after second round slength return answer example input output explanation divide calculate digit sum each group becomes whose length equal return constraints slength consists digits only

lowest common ancestor binary search tree given binary search tree bst find lowest common ancestor lca node two given nodes bst according definition lca wikipedia “the lowest common ancestor defined between two nodes lowest node both descendants where allow node descendant itself” example input root nullnull output explanation lca nodes example input root nullnull output explanation lca nodes since node descendant itself according lca definition example input root output constraints number nodes tree range nodeval nodeval unique exist bst

design atm machine atm machine stores banknotes denominations dollars initially atm empty user use machine deposit withdraw any amount money when withdrawing machine prioritizes using banknotes larger values example want withdraw banknotes banknote banknote machine use banknotes however try withdraw banknotes banknote withdraw request rejected because machine first try use banknote unable use banknotes complete remaining note machine not allowed use banknotes instead banknote implement atm class atm initializes atm object void depositint banknotescount deposits new banknotes order int withdrawint amount returns array length number banknotes handed user order update number banknotes atm after withdrawing returns not possible not withdraw any banknotes case example input atm deposit withdraw deposit withdraw withdraw output null null null explanation atm atm new atm atmdeposit deposits banknote banknotes banknote atmwithdraw returns machine uses banknote banknote banknotes left over machine atmdeposit deposits banknote banknotes machine atmwithdraw returns machine try use banknote unable complete remaining withdraw request rejected since request rejected number banknotes machine not modified atmwithdraw returns machine uses banknote banknote constraints banknotescountlength banknotescounti amount most calls total made withdraw deposit least one call made each function withdraw deposit

find closest number zero given integer array nums size return number value closest nums multiple answers return number largest value example input nums output explanation distance distance distance distance distance closest number array example input nums output explanation both closest numbers being larger returned constraints numsi

count number rectangles containing each point given integer array rectangles where rectanglesi indicates ith rectangle length height also given integer array points where pointsj point coordinates ith rectangle bottomleft corner point coordinates topright corner point return integer array count length pointslength where countj number rectangles contain jth point ith rectangle contains jth point note points lie edges rectangle also considered contained rectangle example input rectangles points output explanation first rectangle contains points second rectangle contains only point third rectangle contains points number rectangles contain point number rectangles contain point return example input rectangles points output explanation first rectangle contains only point second rectangle contains only point third rectangle contains points number rectangles contain point number rectangles contain point return constraints rectangleslength pointslength rectanglesilength pointsjlength rectangles unique points unique

count artifacts extracted indexed grid some artifacts buried given integer indexed integer array artifacts describing positions rectangular artifacts where artifactsi denotes ith artifact buried subgrid where coordinate topleft cell ith artifact coordinate bottomright cell ith artifact excavate some cells grid remove mud them cell part artifact buried underneath uncovered parts artifact uncovered extract given indexed integer array dig where digi indicates excavate cell return number artifacts extract test cases generated such two artifacts overlap each artifact only covers most cells entries dig unique example input artifacts dig output explanation different colors represent different artifacts excavated cells labeled grid artifact extracted namely red artifact blue artifact one part cell which remains uncovered cannot extract return example input artifacts dig output explanation both red blue artifacts parts uncovered labeled extracted return constraints artifactslength diglength minn artifactsilength digilength two artifacts overlap number cells covered artifact most entries dig unique

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum bit flips convert number bit flip number choosing bit binary representation flipping either example binary representation may choose any bit any leading zeros not shown flip flip first bit get flip second bit get flip fifth bit leading zero get etc given two integers start goal return minimum number bit flips convert start goal example input start goal output explanation binary representation respectively convert steps flip first bit flip third bit flip fourth bit shown cannot convert less than steps return example input start goal output explanation binary representation respectively convert steps flip first bit flip second bit flip third bit shown cannot convert less than steps return constraints start goal

sum scores built strings building string length one character time prepending each new character front string strings labeled where string length labeled example abaca aca etc score length longest common prefix between note given final string return sum score every example input babab output explanation longest common prefix which score common prefix score bab longest common prefix bab which score abab common prefix score babab longest common prefix babab which score sum scores return example input azbazbzaz output explanation longest common prefix which score azbzaz longest common prefix azb which score azbazbzaz longest common prefix azbazbzaz which score other score sum scores return constraints slength consists lowercase english letters

divide array equal pairs given integer array nums consisting integers need divide nums pairs such each element belongs exactly one pair elements present pair equal return true nums divided pairs otherwise return false example input nums output true explanation elements nums they should divided pairs nums divided pairs satisfy conditions example input nums output false explanation way divide nums pairs such pairs satisfy every condition constraints numslength numsi

minimum operations halve array sum given array nums positive integers one operation choose any number nums reduce exactly half number note may choose reduced number future operations return minimum number operations reduce sum nums least half example input nums output explanation initial sum nums equal following one ways reduce sum least half pick number reduce pick number reduce pick number reduce final array total sum sum nums reduced which least half initial sum overall operations used return shown cannot reduce sum least half less than operations example input nums output explanation initial sum nums equal following one ways reduce sum least half pick number reduce pick number reduce pick number reduce final array total sum sum nums reduced which least half initial sum overall operations used return shown cannot reduce sum least half less than operations constraints numslength numsi

maximum product after increments given array nonnegative integers nums integer one operation may choose any element nums increment return maximum product nums after most operations since answer may very large return modulo note should maximize product before taking modulo example input nums output explanation increment first number times nums product shown maximum product possible return note may other ways increment nums maximum product example input nums output explanation increment second number time increment fourth number time nums product shown maximum product possible return note may other ways increment nums maximum product constraints numslength numsi

majority element given integer array size find elements appear more than times example input nums output example input nums output example input nums output constraints numslength numsi follow could solve problem linear time space

minimum rounds complete tasks given indexed integer array tasks where tasksi represents difficulty level task each round complete either tasks same difficulty level return minimum rounds required complete tasks not possible complete tasks example input tasks output explanation complete tasks possible plan first round complete tasks difficulty level second round complete tasks difficulty level third round complete tasks difficulty level fourth round complete tasks difficulty level shown tasks cannot completed fewer than rounds answer example input tasks output explanation only task difficulty level but each round only complete either tasks same difficulty level cannot complete tasks answer constraints taskslength tasksi

maximum trailing zeros cornered path given integer array grid size where each cell contains positive integer cornered path defined set adjacent cells most one turn more specifically path should exclusively move either horizontally vertically turn one without returning previously visited cell after turn path move exclusively alternate direction move vertically moved horizontally vice versa also without returning previously visited cell product path defined product values path return maximum number trailing zeros product cornered path found grid note horizontal movement means moving either left direction vertical movement means moving either down direction example input grid output explanation grid left shows valid cornered path product which trailing zeros shown maximum trailing zeros product cornered path grid middle not cornered path more than one turn grid not cornered path requires return previously visited cell example input grid output explanation grid shown figure above cornered paths grid result product trailing zero constraints gridlength gridilength gridij

find triangular sum array given indexed integer array nums where numsi digit between inclusive triangular sum nums value only element present nums after following process terminates let nums comprise elements end process otherwise create new indexed integer array newnums length each index where assign value newnumsi numsi numsi where denotes modulo operator replace array nums newnums repeat entire process starting step return triangular sum nums example input nums output explanation above diagram depicts process which obtain triangular sum array example input nums output explanation since only one element nums triangular sum value element itself constraints numslength numsi

maximum candies allocated children given indexed integer array candies each element array denotes pile candies size candiesi divide each pile any number sub piles but cannot merge two piles together also given integer should allocate piles candies children such each child gets same number candies each child take most one pile candies some piles candies may unused return maximum number candies each child get example input candies output explanation divide candies piles size candies piles size five piles candies sizes allocate piles size children proven each child cannot receive more than candies example input candies output explanation children but only candies total impossible ensure each child receives least one candy each child gets candy answer constraints candieslength candiesi

intersection multiple arrays given integer array nums where numsi nonempty array distinct positive integers return list integers present each array nums sorted ascending order example input nums output explanation only integers present each nums nums nums return example input nums output explanation does not exist any integer present both nums nums return empty list constraints numslength sumnumsilength numsij values numsi unique

minimum weighted subgraph required paths given integer denoting number nodes weighted directed graph nodes numbered also given integer array edges where edgesi fromi toi weighti denotes exists directed edge fromi toi weight weighti lastly given three distinct integers src src dest denoting three distinct nodes graph return minimum weight subgraph graph such possible reach dest both src src via set edges subgraph case such subgraph does not exist return subgraph graph whose vertices edges subsets original graph weight subgraph sum weights constituent edges example input edges src src dest output explanation above figure represents input graph blue edges represent one subgraphs yield optimal answer note subgraph also yields optimal answer not possible get subgraph less weight satisfying constraints example input edges src src dest output explanation above figure represents input graph seen does not exist any path node node subgraphs satisfying constraints constraints edgeslength edgesilength fromi toi src src dest fromi toi src src dest pairwise distinct weighti

count collisions road cars infinitely long road cars numbered left each car present unique point given indexed string directions length directionsi either denoting whether ith car moving left staying current point respectively each moving car same speed number collisions calculated follows when two cars moving opposite directions collide each other number collisions increases when moving car collides stationary car number collisions increases after collision cars involved longer move stay point where they collided other than cars cannot change their state direction motion return total number collisions happen road example input directions rlrsll output explanation collisions happen road cars collide each other since they moving opposite directions number collisions becomes cars collide each other since car stationary number collisions becomes cars collide each other since car stationary number collisions becomes cars collide each other after car collides car stay point collision get hit car number collisions becomes total number collisions happen road example input directions llrr output explanation cars collide each other total number collisions happen road constraints directionslength directionsi either

minimum white tiles after covering carpets given indexed binary string floor which represents colors tiles floor floori denotes ith tile floor colored black other hand floori denotes ith tile floor colored white also given numcarpets carpetlen numcarpets black carpets each length carpetlen tiles cover tiles given carpets such number white tiles visible minimum carpets may overlap one another return minimum number white tiles visible example input floor numcarpets carpetlen output explanation figure above shows one way covering tiles carpets such only white tiles visible other way covering tiles carpets leave less than white tiles visible example input floor numcarpets carpetlen output explanation figure above shows one way covering tiles carpets such white tiles visible note carpets able overlap one another constraints carpetlen floorlength floori either numcarpets

find palindrome fixed length given integer array queries positive integer intlength return array answer where answeri either queriesith smallest positive palindrome length intlength such palindrome exists palindrome number reads same backwards forwards palindromes cannot leading zeros example input queries intlength output explanation first few palindromes length palindrome length example input queries intlength output explanation first six palindromes length constraints querieslength queriesi intlength

minimum deletions array beautiful given indexed integer array nums array nums beautiful numslength even numsi numsi note empty array considered beautiful delete any number elements nums when delete element elements deleted element shifted one unit left fill gap created elements left deleted element remain unchanged return minimum number elements delete nums beautiful example input nums output explanation delete either nums nums nums which beautiful proven need least deletion nums beautiful example input nums output explanation delete nums nums nums which beautiful proven need least deletions nums beautiful constraints numslength numsi

combination sum given collection candidate numbers candidates target number target find unique combinations candidates where candidate numbers sum target each number candidates may only used once combination note solution set must not contain duplicate combinations example input candidates target output example input candidates target output constraints candidateslength candidatesi target

number digit one given integer count total number digit appearing nonnegative integers less than equal example input output example input output constraints

minimize result adding parentheses expression given indexed string expression form numnum where num num represent positive integers add pair parentheses expression such after addition parentheses expression valid mathematical expression evaluates smallest possible value left parenthesis must added left parenthesis must added return expression after adding pair parentheses such expression evaluates smallest possible value multiple answers yield same result return any them input generated such original value expression value expression after adding any pair parentheses meets requirements fits within signed bit integer example input expression output explanation expression evaluates note invalid because parenthesis must shown smallest possible value example input expression output explanation expression evaluates example input expression output explanation expression evaluates constraints expressionlength expression consists digits expression starts ends digits expression contains exactly one original value expression value expression after adding any pair parentheses meets requirements fits within signed bit integer

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

maximum value coins piles piles coins table each pile consists positive number coins assorted denominations one move choose any coin top any pile remove add your wallet given list piles where pilesi list integers denoting composition ith pile top bottom positive integer return maximum total value coins your wallet choose exactly coins optimally example input piles output explanation above diagram shows different ways choose coins maximum total obtain example input piles output explanation maximum total obtained choose coins last pile constraints pileslength pilesij sumpilesilength

find players zero one losses given integer array matches where matchesi winneri loseri indicates player winneri defeated player loseri match return list answer size where answer list players not lost any matches answer list players lost exactly one match values two lists should returned increasing order note should only consider players played least one match testcases generated such two matches same outcome example input matches output explanation players not lost any matches players each lost one match players each lost two matches answer answer example input matches output explanation players not lost any matches players each lost two matches answer answer constraints matcheslength matchesilength winneri loseri winneri loseri matchesi unique

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

maximum total beauty gardens alice caretaker gardens she wants plant flowers maximize total beauty her gardens given indexed integer array flowers size where flowersi number flowers already planted ith garden flowers already planted cannot removed given another integer newflowers which maximum number flowers alice additionally plant also given integers target full partial garden considered complete least target flowers total beauty gardens determined sum following number complete gardens multiplied full minimum number flowers any incomplete gardens multiplied partial incomplete gardens value return maximum total beauty alice obtain after planting most newflowers flowers example input flowers newflowers target full partial output explanation alice plant flowers garden flowers garden flower garden flower garden gardens she planted total flowers garden complete minimum number flowers incomplete gardens total beauty other way planting flowers obtain total beauty higher than example input flowers newflowers target full partial output explanation alice plant flowers garden flowers garden flowers garden flowers garden gardens she planted total flowers gardens complete minimum number flowers incomplete gardens total beauty other way planting flowers obtain total beauty higher than note alice could gardens complete but case she would obtain lower total beauty constraints flowerslength flowersi target newflowers full partial

root equals sum children given root binary tree consists exactly nodes root left child child return true value root equal sum values two children false otherwise example input root output true explanation values root left child child respectively equal return true example input root output false explanation values root left child child respectively not equal return false constraints tree consists only root left child child nodeval

maximum points archery competition alice bob opponents archery competition competition set following rules alice first shoots numarrows arrows bob shoots numarrows arrows points calculated follows target integer scoring sections ranging inclusive each section target score between say alice bob shot arrows section respectively alice takes points bob takes points however nobody takes points example alice bob both shot arrows section score alice takes points other hand alice shot arrows section score bob shot arrows same section bob takes points given integer numarrows integer array alicearrows size which represents number arrows alice shot each scoring section bob wants maximize total number points obtain return array bobarrows which represents number arrows bob shot each scoring section sum values bobarrows should equal numarrows multiple ways bob earn maximum total points return any one them example input numarrows alicearrows output explanation table above shows how competition scored bob earns total point shown bob cannot obtain score higher than points example input numarrows alicearrows output explanation table above shows how competition scored bob earns total point shown bob cannot obtain score higher than points constraints numarrows alicearrowslength bobarrowslength alicearrowsi bobarrowsi numarrows sumalicearrowsi numarrows

product array except self given integer array nums return array answer such answeri equal product elements nums except numsi product any prefix suffix nums guaranteed fit bit integer must write algorithm runs time without using division operation example input nums output example input nums output constraints numslength numsi product any prefix suffix nums guaranteed fit bit integer follow solve problem extra space complexity output array does not count extra space space complexity analysis

largest number after digit swaps parity given positive integer num may swap any two digits num same parity both odd digits both even digits return largest possible value num after any number swaps example input num output explanation swap digit digit results number swap digit digit results number note may other sequences swaps but shown largest possible number also note may not swap digit digit since they different parities example input num output explanation swap digit digit results number swap first digit digit results number note may other sequences swaps but shown largest possible number constraints num

longest path different adjacent characters given tree connected undirected graph cycles rooted node consisting nodes numbered tree represented indexed array parent size where parenti parent node since node root parent also given string length where character assigned node return length longest path tree such pair adjacent nodes path same character assigned them example input parent abacbe output explanation longest path where each two adjacent nodes different characters tree path length path returned proven longer path satisfies conditions example input parent aabc output explanation longest path where each two adjacent nodes different characters path length path returned constraints parentlength slength parenti parent parent represents valid tree consists only lowercase english letters

longest substring one repeating character given indexed string also given indexed string querycharacters length indexed array integer indices queryindices length both which used describe queries ith query updates character index queryindicesi character querycharactersi return array lengths length where lengthsi length longest substring consisting only one repeating character after ith query performed example input babacc querycharacters bcb queryindices output explanation query updates bbbacc longest substring consisting one repeating character bbb length query updates bbbccc longest substring consisting one repeating character bbb ccc length query updates bbbbcc longest substring consisting one repeating character bbbb length return example input abyzz querycharacters queryindices output explanation query updates abazz longest substring consisting one repeating character length query updates aaazz longest substring consisting one repeating character aaa length return constraints slength consists lowercase english letters querycharacterslength queryindiceslength querycharacters consists lowercase english letters queryindicesi slength

largest combination bitwise greater than zero bitwise array nums bitwise integers nums example nums bitwise equal also nums bitwise given array positive integers candidates evaluate bitwise every combination numbers candidates each number candidates may only used once each combination return size largest combination candidates bitwise greater than example input candidates output explanation combination bitwise size combination shown combination size greater than bitwise greater than note more than one combination may largest size example combination bitwise example input candidates output explanation largest combination bitwise size combination return constraints candidateslength candidatesi

number ways split array given indexed integer array nums length nums contains valid split index following true sum first elements greater than equal sum last elements least one element return number valid splits nums example input nums output explanation three ways splitting nums two nonempty parts split nums index first part sum second part sum since valid split split nums index first part sum second part sum since valid split split nums index first part sum second part sum since not valid split number valid splits nums example input nums output explanation two valid splits nums split nums index first part sum second part sum since valid split split nums index first part sum second part sum since valid split constraints numslength numsi

minimum average difference given indexed integer array nums length average difference index absolute difference between average first elements nums average last elements both averages should rounded down nearest integer return index minimum average difference multiple such indices return smallest one note absolute difference two numbers absolute value their difference average elements sum elements divided integer division average elements considered example input nums output explanation average difference index average difference index average difference index average difference index average difference index average difference index average difference index minimum average difference return example input nums output explanation only index return average difference index constraints numslength numsi

find kbeauty number kbeauty integer num defined number substrings num when read string meet following conditions length divisor num given integers num return kbeauty num note leading zeros allowed not divisor any value substring contiguous sequence characters string example input num output explanation following substrings num length divisor divisor kbeauty example input num output explanation following substrings num length divisor not divisor not divisor not divisor divisor kbeauty constraints num numlength taking num string

count nodes equal average subtree given root binary tree return number nodes where value node equal average values subtree note average elements sum elements divided rounded down nearest integer subtree root tree consisting root descendants example input root null output explanation node value average subtree node value average subtree node value average subtree node value average subtree node value average subtree example input root output explanation node value average subtree constraints number nodes tree range nodeval

maximum bags full capacity rocks bags numbered given two indexed integer arrays capacity rocks ith bag hold maximum capacityi rocks currently contains rocksi rocks also given integer additionalrocks number additional rocks place any bags return maximum number bags could full capacity after placing additional rocks some bags example input capacity rocks additionalrocks output explanation place rock bag rock bag number rocks each bag bags full capacity bags full capacity return shown not possible more than bags full capacity note may other ways placing rocks result answer example input capacity rocks additionalrocks output explanation place rocks bag rocks bag number rocks each bag bags full capacity bags full capacity return shown not possible more than bags full capacity note did not use additional rocks constraints capacitylength rockslength capacityi rocksi capacityi additionalrocks

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

implement trie prefix tree trie pronounced try prefix tree tree data structure used efficiently store retrieve keys dataset strings various applications data structure such autocomplete spellchecker implement trie class trie initializes trie object void insertstring word inserts string word trie boolean searchstring word returns true string word trie inserted before false otherwise boolean startswithstring prefix returns true previously inserted string word prefix prefix false otherwise example input trie insert search search startswith insert search apple apple app app app app output null null true false true null true explanation trie trie new trie trieinsertapple triesearchapple return true triesearchapp return false triestartswithapp return true trieinsertapp triesearchapp return true constraints wordlength prefixlength word prefix consist only lowercase english letters most calls total made insert search startswith

replace elements array given indexed array nums consists distinct positive integers apply operations array where ith operation replace number operationsi operationsi guaranteed ith operation operationsi exists nums operationsi does not exist nums return array obtained after applying operations example input nums operations output explanation perform following operations nums replace number nums becomes replace number nums becomes replace number nums becomes return final array example input nums operations output explanation perform following operations nums replace number nums becomes replace number nums becomes replace number nums becomes return array constraints numslength operationslength values nums distinct operationsilength numsi operationsi operationsi operationsi exist nums when applying ith operation operationsi not exist nums when applying ith operation

count integers intervals given empty set intervals implement data structure add interval set intervals count number integers present least one interval implement countintervals class countintervals initializes object empty set intervals void addint left int adds interval left set intervals int count returns number integers present least one interval note interval left denotes integers where left example input countintervals add add count add count output null null null null explanation countintervals countintervals new countintervals initialize object empty set intervals countintervalsadd add set intervals countintervalsadd add set intervals countintervalscount return integers present interval integers present interval countintervalsadd add set intervals countintervalscount return integers present interval integers present interval integers present intervals integers present interval constraints left most calls total made add count least one call made count

count prefixes given string given string array words string where wordsi comprise only lowercase english letters return number strings words prefix prefix string substring occurs beginning string substring contiguous sequence characters within string example input words abcabbcabc abc output explanation strings words which prefix abc abc number strings words which prefix example input words output explanation both strings prefix note same string occur multiple times words should counted each time constraints wordslength wordsilength slength wordsi consist lowercase english letters only

sum total strength wizards ruler kingdom army wizards your command given indexed integer array strength where strengthi denotes strength ith wizard contiguous group wizards wizards strengths form subarray strength total strength defined product following two values strength weakest wizard group total individual strengths wizards group return sum total strengths contiguous groups wizards since answer may very large return modulo subarray contiguous nonempty sequence elements within array example input strength output explanation following contiguous groups wizards total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum sum total strengths example input strength output explanation following contiguous groups wizards total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum total strength min sum sum total strengths constraints strengthlength strengthi

minimum consecutive cards pick given integer array cards where cardsi represents value ith card pair cards matching cards same value return minimum number consecutive cards pick pair matching cards picked cards impossible matching cards return example input cards output explanation pick cards which contain matching pair cards value note picking cards also optimal example input cards output explanation way pick set consecutive cards contain pair matching cards constraints cardslength cardsi

booking concert tickets groups concert hall rows numbered each seats numbered need design ticketing system allocate seats following cases group spectators sit together row every member group spectators get seat they may may not sit together note spectators very picky they book seats only each member their group get seat row number less than equal maxrow maxrow vary group group case multiple rows choose row smallest number chosen multiple seats choose same row seat smallest number chosen implement bookmyshow class bookmyshowint int initializes object number rows number seats per row int gatherint int maxrow returns array length denoting row seat number respectively first seat being allocated members group who must sit together other words returns smallest possible such seats valid empty row maxrow returns case not possible allocate seats group boolean scatterint int maxrow returns true members group allocated seats rows maxrow who may may not sit together seats allocated allocates seats group smallest row numbers smallest possible seat numbers each row otherwise returns false example input bookmyshow gather gather scatter scatter output null true false explanation bookmyshow bms new bookmyshow rows seats each bmsgather return group books seats row bmsgather return only seat left row not possible book consecutive seats bmsscatter return true group books seat row seats row bmsscatter return false only one seat left hall constraints maxrow most calls total made gather scatter

rearrange characters target string given two indexed strings target take some letters rearrange them form new strings return maximum number copies target formed taking letters rearranging them example input ilovecodingonleetcode target code output explanation first copy code take letters indices second copy code take letters indices strings formed ecod code which both rearranged code most two copies code return example input abcba target abc output explanation one copy abc taking letters indices most one copy abc return note while extra indices cannot reuse letter index cannot second copy abc example input abbaccaddaeea target aaaaa output explanation one copy aaaaa taking letters indices most one copy aaaaa return constraints slength targetlength target consist lowercase english letters

minimum obstacle removal reach corner given indexed integer array grid size each cell one two values represents empty cell represents obstacle may removed move down left empty cell return minimum number obstacles remove move upper left corner lower corner example input grid output explanation remove obstacles create path shown need remove least obstacles return note may other ways remove obstacles create path example input grid output explanation move without removing any obstacles return constraints gridlength gridilength gridij either grid gridm

steps array nondecreasing given indexed integer array nums one step remove elements numsi where numsi numsi numslength return number steps performed nums becomes nondecreasing array example input nums output explanation following steps performed step becomes step becomes step becomes nondecreasing array return example input nums output explanation nums already nondecreasing array return constraints numslength numsi

minimum lines represent line chart given integer array stockprices where stockpricesi dayi pricei indicates price stock day dayi pricei line chart created array plotting points plane xaxis representing day yaxis representing price connecting adjacent points one such example shown below return minimum number lines needed represent line chart example input stockprices output explanation diagram above represents input xaxis representing day yaxis representing price following lines drawn represent line chart line red passing line blue line green passing shown not possible represent line chart using less than lines example input stockprices output explanation shown diagram above line chart represented single line constraints stockpriceslength stockpricesilength dayi pricei dayi distinct

word search given board characters list strings words return words board each word must constructed letters sequentially adjacent cells where adjacent cells horizontally vertically neighboring same letter cell may not used more than once word example input board oaanetaeihkriflv words oathpeaeatrain output eatoath example input board abcd words abcb output constraints boardlength boardilength boardij lowercase english letter wordslength wordsilength wordsi consists lowercase english letters strings words unique

check number equal digit count digit value given indexed string num length consisting digits return true every index range digit occurs numi times num otherwise return false example input num output true explanation num digit occurs once num num digit occurs twice num num digit occurs once num num digit occurs zero times num condition holds true every index return true example input num output false explanation num digit should occur zero times but occurs twice num num digit should occur three times but occurs zero times num num digit occurs zero times num indices both violate condition return false constraints numlength num consists digits

largest samedigit number string given string num representing large integer integer good meets following conditions substring num length consists only one unique digit return maximum good integer string empty string such integer exists note substring contiguous sequence characters within string may leading zeroes num good integer example input num output explanation two distinct good integers largest return example input num output explanation only good integer example input num output explanation substring length consists only one unique digit good integers constraints numlength num only consists digits

substring largest variance variance string defined largest difference between number occurrences any characters present string note two characters may may not same given string consisting lowercase english letters only return largest variance possible substrings substring contiguous sequence characters within string example input aababbb output explanation possible variances along their respective substrings listed below variance substrings abab aababb bbb variance substrings aab aba abb aabab ababb aababbb bab variance substrings aaba ababbb abbb babb variance substring babbb since largest possible variance return example input abcde output explanation letter occurs more than once variance every substring constraints slength consists lowercase english letters

successful pairs spells potions given two positive integer arrays spells potions length respectively where spellsi represents strength ith spell potionsj represents strength jth potion also given integer success spell potion pair considered successful product their strengths least success return integer array pairs length where pairsi number potions form successful pair ith spell example input spells potions success output explanation spell pairs successful spell pairs successful spell pairs successful returned example input spells potions success output explanation spell pairs successful spell pairs successful spell pairs successful returned constraints spellslength potionslength spellsi potionsi success

maximum white tiles covered carpet given integer array tiles where tilesi represents every tile range colored white also given integer carpetlen length single carpet placed anywhere return maximum number white tiles covered carpet example input tiles carpetlen output explanation place carpet starting tile covers white tiles return note may other places where carpet covers white tiles shown carpet cannot cover more than white tiles example input tiles carpetlen output explanation place carpet starting tile covers white tiles return constraints tileslength tilesilength carpetlen tiles nonoverlapping

remove digit number maximize result given string number representing positive integer character digit return resulting string after removing exactly one occurrence digit number such value resulting string decimal form maximized test cases generated such digit occurs least once number example input number digit output explanation only one after removing result example input number digit output explanation remove first get remove second get since return example input number digit output explanation remove either first second both result string constraints numberlength number consists digits digit digit digit occurs least once number

maximum consecutive floors without special floors alice manages company rented some floors building office space alice decided some these floors should special floors used relaxation only given two integers bottom top which denote alice rented floors bottom top inclusive also given integer array special where speciali denotes special floor alice designated relaxation return maximum number consecutive floors without special floor example input bottom top special output explanation following ranges inclusive consecutive floors without special floor total amount floors total amount floor total amount floors return maximum number which floors example input bottom top special output explanation every floor rented special floor return constraints speciallength bottom speciali top values special unique

design text editor design text editor cursor following add text where cursor delete text where cursor simulating backspace key move cursor either left when deleting text only characters left cursor deleted cursor also remain within actual text cannot moved beyond more formally cursorposition currenttextlength always holds implement texteditor class texteditor initializes object empty text void addtextstring text appends text where cursor cursor ends text int deletetextint deletes characters left cursor returns number characters deleted string cursorleftint moves cursor left times returns last min len characters left cursor where len number characters left cursor string cursorrightint moves cursor times returns last min len characters left cursor where len number characters left cursor example input texteditor addtext deletetext addtext cursorright cursorleft deletetext cursorleft cursorright leetcode practice output null null null etpractice leet practi explanation texteditor texteditor new texteditor current text character represents cursor texteditoraddtextleetcode current text leetcode texteditordeletetext return current text leet characters deleted texteditoraddtextpractice current text leetpractice texteditorcursorright return etpractice current text leetpractice cursor cannot moved beyond actual text did not move etpractice last characters left cursor texteditorcursorleft return leet current text leetpractice leet last min characters left cursor texteditordeletetext return current text practice only characters deleted texteditorcursorleft return current text practice cursor cannot moved beyond actual text did not move last min characters left cursor texteditorcursorright return practi current text practice practi last min characters left cursor constraints textlength text consists lowercase english letters most calls total made addtext deletetext cursorleft cursorright followup could find solution time complexity per call

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

count unguarded cells grid given two integers representing indexed grid also given two integer arrays guards walls where guardsi rowi coli wallsj rowj colj represent positions ith guard jth wall respectively guard see every cell four cardinal directions north east south west starting their position unless obstructed wall another guard cell guarded least one guard see return number unoccupied cells not guarded example input guards walls output explanation guarded unguarded cells shown red green respectively above diagram total unguarded cells return example input guards walls output explanation unguarded cells shown green above diagram total unguarded cells return constraints guardslength wallslength guardslength wallslength guardsilength wallsjlength rowi rowj coli colj positions guards walls unique

invert binary tree given root binary tree invert tree return root example input root output example input root output example input root output constraints number nodes tree range nodeval

apply discount prices sentence string singlespace separated words where each word contain digits lowercase letters dollar sign word represents price sequence digits preceded dollar sign example represent prices while not given string sentence representing sentence integer discount each word representing price apply discount discount price update word sentence updated prices should represented exactly two decimal places return string representing modified sentence note prices contain most digits example input sentence candies shop discount output candies shop explanation words which represent prices discount yields replaced discount yields since need exactly decimal places after price replace example input sentence discount output explanation applying discount any price result words representing prices each them replaced constraints sentencelength sentence consists lowercase english letters digits sentence does not leading trailing spaces words sentence separated single space prices positive numbers without leading zeros prices most digits discount

find resultant array after removing anagrams given indexed string array words where wordsi consists lowercase english letters one operation select any index such wordslength wordsi wordsi anagrams delete wordsi words keep performing operation long select index satisfies conditions return words after performing operations shown selecting indices each operation any arbitrary order lead same result anagram word phrase formed rearranging letters different word phrase using original letters exactly once example dacb anagram abdc example input words abbabababbaacdcd output abbacd explanation one ways obtain resultant array using following operations since words bbaa words baba anagrams choose index delete words words abbababacdcd since words baba words abba anagrams choose index delete words words abbacdcd since words words anagrams choose index delete words words abbacd longer perform any operations abbacd final answer example input words abcde output abcde explanation two adjacent strings words anagrams each other operations performed constraints wordslength wordsilength wordsi consists lowercase english letters

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

escape spreading fire given indexed integer array grid size which represents field each cell one three values represents grass represents fire represents wall fire cannot pass situated topleft cell want travel safehouse bottomright cell every minute may move adjacent grass cell after your move every fire cell spread adjacent cells not walls return maximum number minutes stay your initial position before moving while safely reaching safehouse impossible return always reach safehouse regardless minutes stayed return note even fire spreads safehouse immediately after reached counted safely reaching safehouse cell adjacent another cell former directly north east south west latter their sides touching example input grid output explanation figure above shows scenario where stay initial position minutes able safely reach safehouse staying more than minutes not allow safely reach safehouse example input grid output explanation figure above shows scenario where immediately move safehouse fire spread any cell move impossible safely reach safehouse returned example input grid output explanation figure above shows initial grid notice fire contained walls always able safely reach safehouse returned constraints gridlength gridilength gridij either grid gridm

count number texts alice texting bob using her phone mapping digits letters shown figure below order add letter alice press key corresponding digit times where position letter key example add letter alice press four times similarly add letter alice press twice note digits not map any letters alice does not use them however due error transmission bob did not receive alices text message but received string pressed keys instead example when alice sent message bob bob received string given string pressedkeys representing string received bob return total number possible text messages alice could sent since answer may very large return modulo example input pressedkeys output explanation possible text messages alice could sent aaadd abdd badd cdd aaae abe bae since possible messages return example input pressedkeys output explanation possible text messages alice could sent since need return answer modulo return constraints pressedkeyslength pressedkeys only consists digits

partition array such maximum difference given integer array nums integer may partition nums one more subsequences such each element nums appears exactly one subsequences return minimum number subsequences needed such difference between maximum minimum values each subsequence most subsequence sequence derived another sequence deleting some elements without changing order remaining elements example input nums output explanation partition nums two subsequences difference between maximum minimum value first subsequence difference between maximum minimum value second subsequence since two subsequences created return shown minimum number subsequences needed example input nums output explanation partition nums two subsequences difference between maximum minimum value first subsequence difference between maximum minimum value second subsequence since two subsequences created return note another optimal solution partition nums two subsequences example input nums output explanation partition nums three subsequences difference between maximum minimum value first subsequences difference between maximum minimum value second subsequences difference between maximum minimum value third subsequences since three subsequences created return shown minimum number subsequences needed constraints numslength numsi

strong password checker password said strong satisfies following criteria least characters contains least one lowercase letter contains least one uppercase letter contains least one digit contains least one special character special characters characters following string does not contain same character adjacent positions aab violates condition but aba does not given string password return true strong password otherwise return false example input password iloveletcode output true explanation password meets requirements return true example input password meyouismydream output false explanation password does not contain digit also contains same character adjacent positions return false example input password output false explanation password does not meet length requirement return false constraints passwordlength password consists letters digits special characters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

min max game given indexed integer array nums whose length power apply following algorithm nums let length nums end process otherwise create new indexed integer array newnums length every even index where assign value newnumsi minnums nums every odd index where assign value newnumsi maxnums nums replace array nums newnums repeat entire process starting step return last number remains nums after applying algorithm example input nums output explanation following arrays results applying algorithm repeatedly first nums second nums third nums last remaining number return example input nums output explanation already last remaining number return constraints numslength numsi numslength power

sender largest word count chat log messages given two string arrays messages senders where messagesi message sent sendersi message list words separated single space leading trailing spaces word count sender total number words sent sender note sender may send more than one message return sender largest word count more than one sender largest word count return one lexicographically largest name note uppercase letters come before lowercase letters lexicographical order alice alice distinct example input messages hello usertwooohi userthreewonderful day alicenice day userthree senders aliceusertwouserthreealice output alice explanation alice sends total words usertwo sends total words userthree sends total words since alice largest word count return alice example input messages how leetcode everyoneleetcode useful practice senders bobcharlie output charlie explanation bob sends total words charlie sends total words since tie largest word count return sender lexicographically larger name charlie constraints messageslength senderslength messagesilength sendersilength messagesi consists uppercase lowercase english letters words messagesi separated single space messagesi does not leading trailing spaces sendersi consists uppercase lowercase english letters only

trips users sql schema table trips column name type int clientid int driverid int cityid int status enum requestat date primary key table table holds taxi trips each trip unique while clientid driverid foreign keys usersid users table status enum type completed cancelledbydriver cancelledbyclient table users column name type usersid int banned enum role enum usersid primary key table table holds users each user unique usersid role enum type client driver partner banned enum type yes cancellation rate computed dividing number canceled client driver requests unbanned users total number requests unbanned users day write sql query find cancellation rate requests unbanned users both client driver must not banned each day between round cancellation rate two decimal points return result table any order query result format following example example input trips table clientid driverid cityid status requestat completed cancelledbydriver completed cancelledbyclient completed completed completed completed completed cancelledbydriver users table usersid banned role client yes client client client driver driver driver driver output day cancellation rate explanation requests total which canceled however request made banned client userid ignored calculation unbanned requests total which canceled cancellation rate requests total which canceled request made banned client ignored unbanned requests total which canceled cancellation rate requests total which canceled request made banned client ignored unbanned request total which canceled cancellation rate

divisible elements subarrays given integer array nums two integers return number distinct subarrays which most elements divisible two arrays nums nums said distinct they different lengths exists least one index where numsi numsi subarray defined nonempty contiguous sequence elements array example input nums output explanation elements indices divisible distinct subarrays which most elements divisible note subarrays occur more than once nums but they should each counted only once subarray should not counted because elements divisible example input nums output explanation element nums divisible also every subarray nums most elements divisible since subarrays distinct total number subarrays satisfying constraints constraints numslength numsi numslength follow solve problem time complexity

number flowers full bloom given indexed integer array flowers where flowersi starti endi means ith flower full bloom starti endi inclusive also given indexed integer array people size where poeplei time ith person arrive see flowers return integer array answer size where answeri number flowers full bloom when ith person arrives example input flowers poeple output explanation figure above shows times when flowers full bloom when people arrive each person return number flowers full bloom their arrival example input flowers poeple output explanation figure above shows times when flowers full bloom when people arrive each person return number flowers full bloom their arrival constraints flowerslength flowersilength starti endi peoplelength peoplei

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

percentage letter string given string character letter return percentage characters equal letter rounded down nearest whole percent example input foobar letter output explanation percentage characters equal letter when rounded down return example input jjjj letter output explanation percentage characters equal letter return constraints slength consists lowercase english letters letter lowercase english letter

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

total appeal string appeal string number distinct characters found string example appeal abbca because distinct characters given string return total appeal substrings substring contiguous sequence characters within string example input abbca output explanation following substrings abbca substrings length appeal respectively sum substrings length appeal respectively sum substrings length abb bbc bca appeal respectively sum substrings length abbc bbca appeal respectively sum substrings length abbca appeal sum total sum example input code output explanation following substrings code substrings length appeal respectively sum substrings length appeal respectively sum substrings length cod ode appeal respectively sum substrings length code appeal sum total sum constraints slength consists lowercase english letters

maximum total importance roads given integer denoting number cities country cities numbered also given integer array roads where roadsi denotes exists bidirectional road connecting cities need assign each city integer value where each value only used once importance road defined sum values two cities connects return maximum total importance roads possible after assigning values optimally example input roads output explanation figure above shows country assigned values road importance road importance road importance road importance road importance road importance total importance roads shown cannot obtain greater total importance than example input roads output explanation figure above shows country assigned values road importance road importance road importance total importance roads shown cannot obtain greater total importance than constraints roadslength roadsilength duplicate roads

check valid parentheses string path parentheses string nonempty string consisting only valid any following conditions true written concatenated where valid parentheses strings written where valid parentheses string given matrix parentheses grid valid parentheses string path grid path satisfying following conditions path starts upper left cell path ends bottomright cell path only ever moves down resulting parentheses string formed path valid return true exists valid parentheses string path grid otherwise return false example input grid output true explanation above diagram shows two possible paths form valid parentheses strings first path shown results valid parentheses string second path shown results valid parentheses string note may other valid parentheses string paths example input grid output false explanation two possible paths form parentheses strings since neither them valid parentheses strings return false constraints gridlength gridilength gridij either

query kth smallest trimmed number given indexed array strings nums where each string equal length consists only digits also given indexed integer array queries where queriesi trimi each queriesi need trim each number nums rightmost trimi digits determine index kith smallest trimmed number nums two trimmed numbers equal number lower index considered smaller reset each number nums original length return array answer same length queries where answeri answer ith query note trim rightmost digits means keep removing leftmost digit only digits remain strings nums may contain leading zeros example input nums queries output explanation after trimming last digit nums smallest number index trimmed last digits nums unchanged smallest number index trimmed last digits nums smallest number trimmed last digits smallest number index note trimmed number evaluated example input nums queries output explanation trimmed last digit nums smallest number index two occurrences but one index considered smaller than one index trimmed last digits nums unchanged smallest number constraints numslength numsilength numsi consists only digits numsilength equal querieslength queriesilength numslength trimi numsilength follow could use radix sort algorithm solve problem what complexity solution

minimum score after removals tree undirected connected tree nodes labeled edges given indexed integer array nums length where numsi represents value ith node also given integer array edges length where edgesi indicates edge between nodes tree remove two distinct edges tree form three connected components pair removed edges following steps defined get xor values nodes each three components respectively difference between largest xor value smallest xor value score pair example say three components node values three xor values largest xor value smallest xor value score return minimum score any possible pair edge removals given tree example input nums edges output explanation diagram above shows way pair removals component nodes values xor value component node value xor value component node value xor value score difference between largest smallest xor value which shown other pair removals obtain smaller score than example input nums edges output explanation diagram above shows way pair removals component nodes values xor value component nodes values xor value component nodes values xor value score difference between largest smallest xor value which cannot obtain smaller score than constraints numslength numsi edgeslength edgesilength edges represents valid tree

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

match substring after replacement given two strings sub also given character array mappings where mappingsi oldi newi indicates may perform following operation any number times replace character oldi sub newi each character sub cannot replaced more than once return true possible sub substring replacing zero more characters according mappings otherwise return false substring contiguous nonempty sequence characters within string example input foolebar sub leet mappings ett output true explanation replace first sub sub sub substring return true example input fooleetbar sub mappings output false explanation string not substring replacements made note cannot replace example input fooltbar sub leetd mappings ettdbpb output true explanation replace first second sub sub sub ltb substring return true constraints sublength slength mappingslength mappingsilength oldi newi sub consist uppercase lowercase english letters digits oldi newi either uppercase lowercase english letters digits

count number ways place houses street plots where plots each side street plots each side numbered each plot house placed return number ways houses placed such two houses adjacent each other same side street since answer may very large return modulo note house placed ith plot one side street house also placed ith plot other side street example input output explanation possible arrangements plots empty house placed one side street house placed other side street two houses placed one each side street example input output explanation possible arrangements shown diagram above constraints

maximum number pairs array given indexed integer array nums one operation may following choose two integers nums equal remove both integers nums forming pair operation done nums many times possible return indexed integer array answer size where answer number pairs formed answer number leftover integers nums after doing operation many times possible example input nums output explanation form pair nums nums remove them nums nums form pair nums nums remove them nums nums form pair nums nums remove them nums nums more pairs formed total pairs formed number leftover nums example input nums output explanation form pair nums nums remove them nums nums more pairs formed total pair formed numbers leftover nums example input nums output explanation pairs formed number leftover nums constraints numslength numsi

subarray elements greater than varying threshold given integer array nums integer threshold find any subarray nums length such every element subarray greater than threshold return size any such subarray such subarray return subarray contiguous nonempty sequence elements within array example input nums threshold output explanation subarray size every element greater than note only valid subarray example input nums threshold output explanation subarray size returned note subarray size every element greater than similarly subarrays also satisfy given conditions may also returned constraints numslength numsi threshold

count number ideal arrays given two integers maxvalue which used describe ideal array indexed integer array arr length considered ideal following conditions hold every arri value maxvalue every arri divisible arri return number distinct ideal arrays length since answer may very large return modulo example input maxvalue output explanation following possible ideal arrays arrays starting value arrays arrays starting value arrays arrays starting value array arrays starting value array arrays starting value array total distinct ideal arrays example input maxvalue output explanation following possible ideal arrays arrays starting value arrays other distinct values array distinct value arrays distinct value arrays arrays starting value array arrays starting value array total distinct ideal arrays constraints maxvalue

smallest number infinite set set which contains positive integers implement smallestinfiniteset class smallestinfiniteset initializes smallestinfiniteset object contain positive integers int popsmallest removes returns smallest integer contained infinite set void addbackint num adds positive integer num back infinite set not already infinite set example input smallestinfiniteset addback popsmallest popsmallest popsmallest addback popsmallest popsmallest popsmallest output null null null explanation smallestinfiniteset smallestinfiniteset new smallestinfiniteset smallestinfinitesetaddback already set change made smallestinfinitesetpopsmallest return since smallest number remove set smallestinfinitesetpopsmallest return remove set smallestinfinitesetpopsmallest return remove set smallestinfinitesetaddback added back set smallestinfinitesetpopsmallest return since added back set smallest number remove set smallestinfinitesetpopsmallest return remove set smallestinfinitesetpopsmallest return remove set constraints num most calls made total popsmallest addback

number increasing paths grid given integer matrix grid where move cell any adjacent cell directions return number strictly increasing paths grid such start any cell end any cell since answer may very large return modulo two paths considered different they not exactly same sequence visited cells example input grid output explanation strictly increasing paths paths length paths length paths length total number paths example input grid output explanation strictly increasing paths paths length paths length total number paths constraints gridlength gridilength gridij

count subarrays score less than score array defined product sum length example score given positive integer array nums integer return number nonempty subarrays nums whose score strictly less than subarray contiguous sequence elements within array example input nums output explanation subarrays having scores less than score score score score score score note subarrays such not considered because their scores respectively while need scores strictly less than example input nums output explanation every subarray except score less than score which greater than subarrays having scores less than constraints numslength numsi

shortest impossible sequence rolls given integer array rolls length integer roll sided dice numbered times where result ith roll rollsi return length shortest sequence rolls cannot taken rolls sequence rolls length len result rolling sided dice len times note sequence taken does not consecutive long order example input rolls output explanation every sequence rolls length taken rolls every sequence rolls length taken rolls sequence cannot taken rolls return note other sequences cannot taken rolls example input rolls output explanation every sequence rolls length taken rolls sequence cannot taken rolls return note other sequences cannot taken rolls but shortest example input rolls output explanation sequence cannot taken rolls return note other sequences cannot taken rolls but shortest constraints rollslength rollsi

perfect squares given integer return least number perfect square numbers sum perfect square integer square integer other words product some integer itself example perfect squares while not example input output explanation example input output explanation constraints

calculate amount paid taxes given indexed integer array brackets where bracketsi upperi percenti means ith tax bracket upper bound upperi taxed rate percenti brackets sorted upper bound upperi upperi bracketslength tax calculated follows first upper dollars earned taxed rate percent next upper upper dollars earned taxed rate percent next upper upper dollars earned taxed rate percent given integer income representing amount money earned return amount money pay taxes answers within actual answer accepted example input brackets income output explanation based your income dollars tax bracket dollars tax bracket dollars tax bracket tax rate three tax brackets respectively total pay taxes example input brackets income output explanation based your income dollar tax bracket dollar tax bracket tax rate two tax brackets respectively total pay taxes example input brackets income output explanation income tax pay total taxes constraints bracketslength upperi percenti income upperi sorted ascending order values upperi unique upper bound last tax bracket greater than equal income

selling pieces wood given two integers represent height width rectangular piece wood also given integer array prices where pricesi pricei indicates sell rectangular piece wood height width pricei dollars cut piece wood must vertical horizontal cut across entire height width piece split two smaller pieces after cutting piece wood some number smaller pieces sell pieces according prices may sell multiple pieces same shape not sell shapes grain wood makes difference cannot rotate piece swap height width return maximum money earn after cutting piece wood note cut piece wood many times want example input prices output explanation diagram above shows possible scenario consists pieces wood shaped selling price piece wood shaped selling price piece wood shaped selling price obtains total money earned shown maximum amount money earned example input prices output explanation diagram above shows possible scenario consists pieces wood shaped selling price piece wood shaped selling price obtains total money earned shown maximum amount money earned notice cannot rotate piece wood obtain piece wood constraints priceslength pricesilength pricei shapes wood pairwise distinct

count unreachable pairs nodes undirected graph given integer undirected graph nodes numbered given integer array edges where edgesi denotes exists undirected edge connecting nodes return number pairs different nodes unreachable each other example input edges output explanation pairs nodes unreachable each other return example input edges output explanation pairs nodes unreachable each other return constraints edgeslength edgesilength repeated edges

maximum xor after operations given indexed integer array nums one operation select any nonnegative integer index update numsi equal numsi numsi xor note bitwise operation xor bitwise xor operation return maximum possible bitwise xor elements nums after applying operation any number times example input nums output explanation apply operation num xor nums bitwise xor elements xor xor xor shown maximum possible bitwise xor note other operations may used achieve bitwise xor example input nums output explanation apply operation zero times bitwise xor elements xor xor xor xor shown maximum possible bitwise xor constraints numslength numsi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

number distinct roll sequences given integer roll fair sided dice times determine total number distinct sequences rolls possible such following conditions satisfied greatest common divisor any adjacent values sequence equal least gap rolls between equal valued rolls more formally value ith roll equal value jth roll absi return total number distinct sequences possible since answer may very large return modulo two sequences considered distinct least one element different example input output explanation some possible sequences etc some invalid sequences invalid since first third roll equal value abs indexed invalid since greatest common divisor total distinct sequences possible return example input output explanation some possible sequences some invalid sequences since greatest common divisor not equal total distinct sequences possible return constraints

minimum sum squared difference given two positive indexed integer arrays nums nums both length sum squared difference arrays nums nums defined sum numsi numsi each also given two positive integers modify any elements nums most times similarly modify any elements nums most times return minimum sum squared difference after modifying array nums most times modifying array nums most times note allowed modify array elements become negative integers example input nums nums output explanation elements nums nums cannot modified because sum square difference example input nums nums output explanation one way obtain minimum sum square difference increase nums once increase nums once minimum sum square difference note other ways obtain minimum sum square difference but way obtain sum smaller than constraints numslength numslength numsi numsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

minimum path cost grid given indexed integer matrix grid consisting distinct integers move matrix cell any other cell next row cell such move any cells note not possible move cells last row each possible move cost given indexed array movecost size where movecostij cost moving cell value cell column next row cost moving cells last row grid ignored cost path grid sum values cells visited plus sum costs moves made return minimum cost path starts any cell first row ends any cell last row example input grid movecost output explanation path minimum possible cost path sum values cells visited cost moving cost moving total cost path example input grid movecost output explanation path minimum possible cost path sum values cells visited cost moving total cost path constraints gridlength gridilength grid consists distinct integers movecostlength movecostilength movecostij

naming company given array strings ideas represents list names used process naming company process naming company follows choose distinct names ideas call them ideaa ideab swap first letters ideaa ideab each other both new names not found original ideas name ideaa ideab concatenation ideaa ideab separated space valid company name otherwise not valid name return number distinct valid names company example input ideas coffeedonutstimetoffee output explanation following selections valid coffee donuts company name created doffee conuts donuts coffee company name created conuts doffee donuts time company name created tonuts dime donuts toffee company name created tonuts doffee time donuts company name created dime tonuts toffee donuts company name created doffee tonuts total distinct company names following some examples invalid selections coffee time name toffee formed after swapping already exists original array time toffee both names same after swapping exist original array coffee toffee both names formed after swapping already exist original array example input ideas lackback output explanation valid selections returned constraints ideaslength ideasilength ideasi consists lowercase english letters strings ideas unique

first bad version product manager currently leading team develop new product unfortunately latest version your product fails quality check since each version developed based previous version versions after bad version also bad suppose versions want find out first bad one which causes following ones bad given api bool isbadversionversion which returns whether version bad implement function find first bad version should minimize number calls api example input bad output explanation call isbadversion false call isbadversion true call isbadversion true first bad version example input bad output constraints bad

move pieces obtain string given two strings start target both length each string consists only characters where characters represent pieces where piece move left only blank space directly left piece move only blank space directly character represents blank space occupied any pieces return true possible obtain string target moving pieces string start any number times otherwise return false example input start lrr target lrr output true explanation obtain string target start doing following moves move first piece one step left start becomes equal lrr move last piece one step start becomes equal lrr move second piece three steps start becomes equal lrr since possible get string target start return true example input start target output false explanation piece string start move one step obtain after pieces move anymore impossible obtain string target start example input start target output false explanation piece string start move only impossible obtain string target start constraints startlength targetlength start target consist characters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

fair distribution cookies given integer array cookies where cookiesi denotes number cookies ith bag also given integer denotes number children distribute bags cookies cookies same bag must same child cannot split unfairness distribution defined maximum total cookies obtained single child distribution return minimum unfairness distributions example input cookies output explanation one optimal distribution child receives which total cookies child receives which total cookies unfairness distribution max shown distribution unfairness less than example input cookies output explanation one optimal distribution child receives which total cookies child receives which total cookies child receives which total cookies unfairness distribution max shown distribution unfairness less than constraints cookieslength cookiesi cookieslength

max sum pair equal sum digits given indexed array nums consisting positive integers choose two indices such sum digits number numsi equal numsj return maximum value numsi numsj obtain over possible indices satisfy conditions example input nums output explanation pairs satisfy conditions both numbers sum digits equal their sum both numbers sum digits equal their sum maximum sum obtain example input nums output explanation two numbers satisfy conditions return constraints numslength numsi

number zerofilled subarrays given integer array nums return number subarrays filled subarray contiguous nonempty sequence elements within array example input nums output explanation occurrences subarray occurrences subarray occurrence subarray size more than filled return example input nums output explanation occurrences subarray occurrences subarray occurrence subarray occurrence subarray size more than filled return example input nums output explanation subarray filled return constraints numslength numsi

spiral matrix given two integers which represent dimensions matrix also given head linked list integers generate matrix contains integers linked list presented spiral order clockwise starting topleft matrix remaining empty spaces fill them return generated matrix example input head output explanation diagram above shows how values printed matrix note remaining spaces matrix filled example input head output explanation diagram above shows how values printed left matrix last space matrix set constraints number nodes list range nodeval

design number container system design number container system following insert replace number given index system return smallest index given number system implement numbercontainers class numbercontainers initializes number container system void changeint index int number fills container index number already number index replace int findint number returns smallest index given number index filled number system example input numbercontainers find change change change change find change find output null null null null null null explanation numbercontainers new numbercontainers ncfind index filled number return ncchange your container index filled number ncchange your container index filled number ncchange your container index filled number ncchange your container index filled number ncfind number indices since smallest index filled return ncchange your container index filled number note index filled replaced ncfind number indices smallest index filled return constraints index number most calls made total change find

sum numbers units digit given two integers num consider set positive integers following properties units digit each integer sum integers num return minimum possible size such set such set exists note set contain multiple instances same integer sum empty set considered units digit number rightmost digit number example input num output explanation one valid set sum each integer units digit another valid set shown minimum possible size valid set example input num output explanation not possible obtain sum using only integers units digit example input num output explanation sum empty set considered constraints num

count asterisks given string where every two consecutive vertical bars grouped pair other words pair pair forth return number excluding between each pair note each belong exactly one pair example input leetcode output explanation considered characters underlined leetcode characters between first second excluded answer also characters between third fourth excluded answer asterisks considered return example input iamprogrammer output explanation example asterisks return example input youarebeautiful output explanation considered characters underlined youarebeautiful asterisks considered return constraints slength consists lowercase english letters vertical bars asterisks contains even number vertical bars

latest time catch bus given indexed integer array buses length where busesi represents departure time ith bus also given indexed integer array passengers length where passengersj represents arrival time jth passenger bus departure times unique passenger arrival times unique given integer capacity which represents maximum number passengers get each bus when passenger arrives they wait line next available bus get bus departs minutes arrive minutes where bus not full passengers earliest arrival times get bus first more formally when bus arrives either capacity fewer passengers waiting bus they get bus capacity passengers earliest arrival times get bus return latest time may arrive bus station catch bus cannot arrive same time another passenger note arrays buses passengers not necessarily sorted example input buses passengers capacity output explanation suppose arrive time time first bus departs passenger time second bus departs passenger note may not arrive same time another passenger which why must arrive before passenger catch bus example input buses passengers capacity output explanation suppose arrive time time first bus departs passenger time second bus departs passengers time third bus departs passenger notice arrived any later passenger would taken your seat third bus constraints buseslength passengerslength capacity busesi passengersi each element buses unique each element passengers unique

peeking iterator design iterator supports peek operation existing iterator addition hasnext next operations implement peekingiterator class peekingiteratoriteratorint nums initializes object given integer iterator iterator int next returns next element array moves pointer next element boolean hasnext returns true elements array int peek returns next element array without moving pointer note each language may different implementation constructor iterator but they support int next boolean hasnext functions example input peekingiterator next peek next next hasnext output null false explanation peekingiterator peekingiterator new peekingiterator peekingiteratornext return pointer moves next element peekingiteratorpeek return pointer does not move peekingiteratornext return pointer moves next element peekingiteratornext return pointer moves next element peekingiteratorhasnext return false constraints numslength numsi calls next peek valid most calls made next hasnext peek follow how would extend your design generic work types not integer

best poker hand given integer array ranks character array suits cards where ith card rank ranksi suit suitsi following types poker hands best worst flush five cards same suit three kind three cards same rank pair two cards same rank high card any single card return string representing best type poker hand given cards note return values casesensitive example input ranks suits aaaaa output flush explanation hand cards consists cards same suit flush example input ranks suits daabc output three kind explanation hand first second fourth card consists cards same rank three kind note could also pair hand but three kind better hand also note other cards could used three kind hand example input ranks suits abcad output pair explanation hand first second card consists cards same rank pair note cannot flush three kind constraints rankslength suitslength ranksi suitsi two cards same rank suit

number people aware secret day one person discovers secret given integer delay which means each person share secret new person every day starting delay days after discovering secret also given integer forget which means each person forget secret forget days after discovering person cannot share secret same day they forgot any day afterwards given integer return number people who know secret end day since answer may very large return modulo example input delay forget output explanation day suppose first person named person day only person who knows secret person day shares secret new person people day shares secret new person people day forgets secret shares secret new person people day shares secret shares secret people example input delay forget output explanation day first person named person day shares secret people day share secret new people people day forgets secret share secret new people people constraints delay forget

maximum score spliced array given two indexed integer arrays nums nums both length choose two integers left where left swap subarray numsleftright subarray numsleftright example nums nums choose left nums becomes nums becomes may choose apply mentioned operation once not anything score arrays maximum sumnums sumnums where sumarr sum elements array arr return maximum possible score subarray contiguous sequence elements within array arrleftright denotes subarray contains elements nums between indices left inclusive example input nums nums output explanation choosing left nums nums score maxsumnums sumnums max example input nums nums output explanation choosing left nums nums score maxsumnums sumnums max example input nums nums output explanation choose not swap any subarray score maxsumnums sumnums max constraints numslength numslength numsi numsi

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

greatest english letter upper lower case given string english letters return greatest english letter which occurs both lowercase uppercase letter returned letter should uppercase such letter exists return empty string english letter greater than another letter appears after english alphabet example input leetcode output explanation letter only letter appear both lower upper case example input arrazfif output explanation letter greatest letter appear both lower upper case note also appear both lower upper case but greater than example input abcdefghijk output explanation letter appears both lower upper case constraints slength consists lowercase uppercase english letters

minimum deletions array divisible given two positive integer arrays nums numsdivide delete any number elements nums return minimum number deletions such smallest element nums divides elements numsdivide not possible return note integer divides example input nums numsdivide output explanation smallest element which does not divide elements numsdivide use deletions delete elements nums equal which makes nums smallest element which divides elements numsdivide shown minimum number deletions needed example input nums numsdivide output explanation want smallest element nums divide elements numsdivide way delete elements nums allow constraints numslength numsdividelength numsi numsdividei

check matrix xmatrix square matrix said xmatrix both following conditions hold elements diagonals matrix nonzero other elements given integer array grid size representing square matrix return true grid xmatrix otherwise return false example input grid output true explanation refer diagram above xmatrix should green elements diagonals nonzero red elements grid xmatrix example input grid output false explanation refer diagram above xmatrix should green elements diagonals nonzero red elements grid not xmatrix constraints gridlength gridilength gridij

minimum amount time fill cups water dispenser dispense cold warm hot water every second either fill cups different types water cup any type water given indexed integer array amount length where amount amount amount denote number cold warm hot water cups need fill respectively return minimum number seconds needed fill cups example input amount output explanation one way fill cups second fill cold cup warm cup second fill warm cup hot cup second fill warm cup hot cup second fill warm cup proven minimum number seconds needed example input amount output explanation one way fill cups second fill cold cup hot cup second fill cold cup warm cup second fill cold cup warm cup second fill warm cup hot cup second fill cold cup hot cup second fill cold cup warm cup second fill hot cup example input amount output explanation every second fill cold cup constraints amountlength amounti

evaluate boolean binary tree given root full binary tree following properties leaf nodes either value where represents false represents true nonleaf nodes either value where represents boolean represents boolean evaluation node follows node leaf node evaluation value node true false otherwise evaluate nodes two children apply boolean operation value childrens evaluations return boolean result evaluating root node full binary tree binary tree where each node either children leaf node node zero children example input root nullnull output true explanation above diagram illustrates evaluation process node evaluates false true false node evaluates true false true root node evaluates true return true example input root output false explanation root node leaf node evaluates false return false constraints number nodes tree range nodeval every node either children leaf nodes value nonleaf nodes value

find index first occurrence string given two strings needle haystack return index first occurrence needle haystack needle not part haystack example input haystack sadbutsad needle sad output explanation sad occurs index first occurrence index return example input haystack leetcode needle leeto output explanation leeto did not occur leetcode return constraints haystacklength needlelength haystack needle consist only lowercase english characters

expression add operators given string num contains only digits integer target return possibilities insert binary operators andor between digits num resultant expression evaluates target value note operands returned expressions should not contain leading zeros example input num target output explanation both evaluate example input num target output explanation both evaluate example input num target output explanation expressions created evaluate constraints numlength num consists only digits target

decode message given strings key message which represent cipher key secret message respectively steps decode message follows use first appearance lowercase english letters key order substitution table align substitution table regular english alphabet each letter message substituted using table spaces transformed themselves example given key happy boy actual key would least one instance each letter alphabet partial substitution table return decoded message example input key quick brown fox jumps over lazy dog message vkbs suepuv output secret explanation diagram above shows substitution table obtained taking first appearance each letter quick brown fox jumps over lazy dog example input key eljuxhpwnyrdgtqkviszcfmabo message zwx hnfx lqantp mnoeius ycgk vcnjrdb output five boxing wizards jump quickly explanation diagram above shows substitution table obtained taking first appearance each letter eljuxhpwnyrdgtqkviszcfmabo constraints keylength key consists lowercase english letters key contains every letter english alphabet least once messagelength message consists lowercase english letters

longest binary subsequence less than equal given binary string positive integer return length longest subsequence makes binary number less than equal note subsequence contain leading zeroes empty string considered equal subsequence string derived another string deleting some characters without changing order remaining characters example input output explanation longest subsequence makes binary number less than equal number equal decimal note also possible which equal decimal respectively length subsequence returned example input output explanation longest subsequence makes binary number less than equal number equal decimal length subsequence returned constraints slength either

node highest edge score given directed graph nodes labeled where each node exactly one outgoing edge graph represented given indexed integer array edges length where edgesi indicates directed edge node node edgesi edge score node defined sum labels nodes edge pointing return node highest edge score multiple nodes same edge score return node smallest index example input edges output explanation nodes edge pointing node edge score node node edge pointing node edge score node node edge pointing node edge score node nodes edge pointing node edge score node node highest edge score return example input edges output explanation nodes edge pointing node edge score node nodes edge pointing node edge score node nodes both edge score since node smaller index return constraints edgeslength edgesi edgesi

amount time binary tree infected given root binary tree unique values integer start minute infection starts node value start each minute node becomes infected node currently uninfected node adjacent infected node return number minutes needed entire tree infected example input root null start output explanation following nodes infected minute node minute nodes minute node minute node minute nodes takes minutes whole tree infected return example input root start output explanation minute only node tree infected return constraints number nodes tree range nodeval each node unique value node value start exists tree

check distances between same letters given indexed string consisting only lowercase english letters where each letter appears exactly twice also given indexed integer array distance length each letter alphabet numbered wellspaced string number letters between two occurrences ith letter distancei ith letter does not appear distancei ignored return true wellspaced string otherwise return false example input abaccb distance output true explanation appears indices satisfies distance appears indices satisfies distance appears indices satisfies distance note distance but since does not appear ignored return true because wellspaced string example input distance output false explanation appears indices zero letters between them because distance not wellspaced string constraints slength consists only lowercase english letters each letter appears exactly twice distancelength distancei

shifting letters given string lowercase english letters integer array shifts where shiftsi starti endi directioni every shift characters index starti index endi inclusive forward directioni shift characters backward directioni shifting character forward means replacing next letter alphabet wrapping around becomes similarly shifting character backward means replacing previous letter alphabet wrapping around becomes return final string after such shifts applied example input abc shifts output ace explanation firstly shift characters index index backward zac secondly shift characters index index forward zbd finally shift characters index index forward ace example input dztz shifts output catz explanation firstly shift characters index index backward cztz finally shift characters index index forward catz constraints slength shiftslength shiftsilength starti endi slength directioni consists lowercase english letters

maximum rows covered columns given indexed binary matrix matrix integer numselect which denotes number distinct columns must select matrix let consider cnumselect set columns selected row row covered each cell matrixrowcol col where matrixrowcol col present cell row value need choose numselect columns such number rows covered maximized return maximum number rows covered set numselect columns example input matrix numselect output explanation one possible way cover rows shown diagram above choose row covered because occurrences row covered because columns value present row not covered because matrix but not present row covered because matrix present cover three rows note also cover rows but shown more than three rows covered example input matrix numselect output explanation selecting only column result both rows being covered since entire matrix selected return constraints matrixlength matrixilength matrixij either numselect

minimum amount time collect garbage given indexed array strings garbage where garbagei represents assortment garbage ith house garbagei consists only characters representing one unit metal paper glass garbage respectively picking one unit any type garbage takes minute also given indexed integer array travel where traveli number minutes needed house house three garbage trucks city each responsible picking one type garbage each garbage truck starts house must visit each house order however they not need visit every house only one garbage truck may used any given moment while one truck driving picking garbage other two trucks cannot anything return minimum number minutes needed pick garbage example input garbage gpgpgg travel output explanation paper garbage truck travels house house collects paper garbage house travels house house collects paper garbage house altogether takes minutes pick paper garbage glass garbage truck collects glass garbage house travels house house travels house house collects glass garbage house travels house house collects glass garbage house altogether takes minutes pick glass garbage since metal garbage not need consider metal garbage truck takes total minutes collect garbage example input garbage mmmpgmgp travel output explanation metal garbage truck takes minutes pick metal garbage paper garbage truck takes minutes pick paper garbage glass garbage truck takes minutes pick glass garbage takes total minutes collect garbage constraints garbagelength garbagei consists only letters garbageilength travellength garbagelength traveli

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

find ksum array given integer array nums positive integer choose any subsequence array sum elements together define ksum array kth largest subsequence sum obtained not necessarily distinct return ksum array subsequence array derived another array deleting some elements without changing order remaining elements note empty subsequence considered sum example input nums output explanation possible subsequence sums obtain following sorted decreasing order sum array example input nums output explanation sum array constraints numslength numsi min

ugly number ugly number positive integer whose prime factors limited given integer return nth ugly number example input output explanation sequence first ugly numbers example input output explanation prime factors prime factors limited constraints

check valid partition array given indexed integer array nums partition array one more contiguous subarrays call partition array valid each obtained subarrays satisfies one following conditions subarray consists exactly equal elements example subarray good subarray consists exactly equal elements example subarray good subarray consists exactly consecutive increasing elements difference between adjacent elements example subarray good but subarray not return true array least one valid partition otherwise return false example input nums output true explanation array partitioned subarrays partition valid return true example input nums output false explanation valid partition array constraints numslength numsi

minimum hours training win competition entering competition given two positive integers initialenergy initialexperience denoting your initial energy initial experience respectively also given two indexed integer arrays energy experience both length face opponents order energy experience ith opponent denoted energyi experiencei respectively when face opponent need both strictly greater experience energy defeat them move next opponent available defeating ith opponent increases your experience experiencei but decreases your energy energyi before starting competition train some number hours after each hour training either choose increase your initial experience one increase your initial energy one return minimum number training hours required defeat opponents example input initialenergy initialexperience energy experience output explanation increase your energy after hours training your experience after hours training face opponents following order more energy experience than opponent win your energy becomes your experience becomes more energy experience than opponent win your energy becomes your experience becomes more energy experience than opponent win your energy becomes your experience becomes more energy experience than opponent win your energy becomes your experience becomes did total hours training before competition return proven smaller answer exists example input initialenergy initialexperience energy experience output explanation not need any additional energy experience win competition return constraints energylength experiencelength initialenergy initialexperience energyi experiencei

longest subsequence limited sum given integer array nums length integer array queries length return array answer length where answeri maximum size subsequence take nums such sum elements less than equal queriesi subsequence array derived another array deleting some elements without changing order remaining elements example input nums queries output explanation answer queries follows subsequence sum less than equal proven maximum size such subsequence answer subsequence sum less than equal proven maximum size such subsequence answer subsequence sum less than equal proven maximum size such subsequence answer example input nums queries output explanation empty subsequence only subsequence sum less than equal answer constraints numslength querieslength numsi queriesi

strictly palindromic number integer strictly palindromic every base between inclusive string representation integer base palindromic given integer return true strictly palindromic false otherwise string palindromic reads same forward backward example input output false explanation base base which palindromic base base which not palindromic not strictly palindromic return false note bases also not palindromic example input output false explanation only consider base base which not palindromic return false constraints

minimum recolors get consecutive black blocks given indexed string blocks length where blocksi either representing color ith block characters denote colors white black respectively also given integer which desired number consecutive black blocks one operation recolor white block such becomes black block return minimum number operations needed such least one occurrence consecutive black blocks example input blocks wbbwwbbwbw output explanation one way achieve consecutive black blocks recolor blocks blocks bbbbbbbwbw shown way achieve consecutive black blocks less than operations return example input blocks wbwbbbw output explanation changes need made since consecutive black blocks already exist return constraints blockslength blocksi either

maximum segment sum after removals given two indexed integer arrays nums removequeries both length ith query element nums index removequeriesi removed splitting nums different segments segment contiguous sequence positive integers nums segment sum sum every element segment return integer array answer length where answeri maximum segment sum after applying ith removal note same index not removed more than once example input nums removequeries output explanation using indicate removed element answer follows query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum since segments finally return example input nums removequeries output explanation using indicate removed element answer follows query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum segment query remove element nums becomes maximum segment sum since segments finally return constraints numslength removequerieslength numsi removequeriesi values removequeries unique

number arithmetic triplets given indexed strictly increasing integer array nums positive integer diff triplet arithmetic triplet following conditions met numsj numsi diff numsk numsj diff return number unique arithmetic triplets example input nums diff output explanation arithmetic triplet because both arithmetic triplet because both example input nums diff output explanation arithmetic triplet because both arithmetic triplet because both constraints numslength numsi diff nums strictly increasing

find subarrays equal sum given indexed integer array nums determine whether exist two subarrays length equal sum note two subarrays must begin different indices return true these subarrays exist false otherwise subarray contiguous nonempty sequence elements within array example input nums output true explanation subarrays elements same sum example input nums output false explanation two subarrays size same sum example input nums output true explanation subarrays numsnums numsnums same sum note even though subarrays same content two subarrays considered different because they different positions original array constraints numslength numsi

number ways reach position after exactly steps given two positive integers startpos endpos initially standing position startpos infinite number line one step move either one position left one position given positive integer return number different ways reach position endpos starting startpos such perform exactly steps since answer may very large return modulo two ways considered different order steps made not exactly same note number line includes negative integers example input startpos endpos output explanation reach position exactly steps three ways proven other way possible return example input startpos endpos output explanation impossible reach position position exactly steps constraints startpos endpos

minimum replacements sort array given indexed integer array nums one operation replace any element array any two elements sum example consider nums one operation replace nums convert nums return minimum number operations array sorted nondecreasing order example input nums output explanation here steps sort array nondecreasing order replace array becomes replace array becomes steps sort array nondecreasing order return example input nums output explanation array already nondecreasing order return constraints numslength numsi

add digits given integer num repeatedly add digits result only one digit return example input num output explanation process since only one digit return example input num output constraints num follow could without any looprecursion runtime

maximum number robots within budget robots given two indexed integer arrays chargetimes runningcosts both length ith robot costs chargetimesi units charge costs runningcostsi units run also given integer budget total cost running chosen robots equal maxchargetimes sumrunningcosts where maxchargetimes largest charge cost robots sumrunningcosts sum running costs robots return maximum number consecutive robots run such total cost does not exceed budget example input chargetimes runningcosts budget output explanation possible run individual consecutive pairs robots within budget obtain answer consider first robots total cost max sum which less than shown not possible run more than consecutive robots within budget return example input chargetimes runningcosts budget output explanation robot run does not exceed budget return constraints chargetimeslength runningcostslength chargetimesi runningcostsi budget

largest local values matrix given integer matrix grid generate integer matrix maxlocal size such maxlocalij equal largest value matrix grid centered around row column other words want find largest value every contiguous matrix grid return generated matrix example input grid output explanation diagram above shows original matrix generated matrix notice each value generated matrix corresponds largest value contiguous matrix grid example input grid output explanation notice contained within every contiguous matrix grid constraints gridlength gridilength gridij

array zero subtracting equal amounts given nonnegative integer array nums one operation must choose positive integer such less than equal smallest nonzero element nums subtract every positive element nums return minimum number operations every element nums equal example input nums output explanation first operation choose nums second operation choose nums third operation choose nums example input nums output explanation each element nums already operations needed constraints numslength numsi

equal row column pairs given indexed integer matrix grid return number pairs such row column equal row column pair considered equal they contain same elements same order equal array example input grid output explanation equal row column pair row column example input grid output explanation equal row column pairs row column row column row column constraints gridlength gridilength gridij

number unique subjects taught each teacher sql schema table teacher column name type teacherid int subjectid int deptid int subjectid deptid primary key table each row table indicates teacher teacherid teaches subject subjectid department deptid write sql query report number unique subjects each teacher teaches university return result table any order query result format shown following example example input teacher table teacherid subjectid deptid output teacherid cnt explanation teacher they teach subject departments they teach subject department teacher they teach subject department they teach subject department they teach subject department they teach subject department

number excellent pairs given indexed positive integer array nums positive integer pair numbers num num called excellent following conditions satisfied both numbers num num exist array nums sum number set bits num num num num greater than equal where bitwise operation bitwise operation return number distinct excellent pairs two pairs considered distinct either example distinct note pair num num such num num also excellent least one occurrence num array example input nums output explanation excellent pairs following both equal binary total number set bits which greater than equal equal binary equal binary total number set bits equal binary equal binary total number set bits number excellent pairs example input nums output explanation excellent pairs array constraints numslength numsi

removing stars string given string which contains stars one operation choose star remove closest nonstar character left remove star itself return string after stars removed note input generated such operation always possible shown resulting string always unique example input leetcode output lecoe explanation performing removals left closest character star leetcode becomes leecode closest character star leecode becomes lecode closest character star lecode becomes lecoe more stars return lecoe example input erase output explanation entire string removed return empty string constraints slength consists lowercase english letters stars operation above performed

design food rating system design food rating system following modify rating food item listed system return highestrated food item type cuisine system implement foodratings class foodratingsstring foods string cuisines int ratings initializes system food items described foods cuisines ratings which length foodsi name ith food cuisinesi type cuisine ith food ratingsi initial rating ith food void changeratingstring food int newrating changes rating food item name food string highestratedstring cuisine returns name food item highest rating given type cuisine tie return item lexicographically smaller name note string lexicographically smaller than string comes before dictionary order either prefix first position such comes before alphabetic order example input foodratings highestrated highestrated changerating highestrated changerating highestrated kimchi miso sushi moussaka ramen bulgogi korean japanese japanese greek japanese korean korean japanese sushi japanese ramen japanese output null kimchi ramen null sushi null ramen explanation foodratings foodratings new foodratingskimchi miso sushi moussaka ramen bulgogi korean japanese japanese greek japanese korean foodratingshighestratedkorean return kimchi kimchi highest rated korean food rating foodratingshighestratedjapanese return ramen ramen highest rated japanese food rating foodratingschangeratingsushi sushi rating foodratingshighestratedjapanese return sushi sushi highest rated japanese food rating foodratingschangeratingramen ramen rating foodratingshighestratedjapanese return ramen both sushi ramen rating however ramen lexicographically smaller than sushi constraints foodslength cuisineslength ratingslength foodsilength cuisinesilength foodsi cuisinesi consist lowercase english letters ratingsi strings foods distinct food name food item system across calls changerating cuisine type cuisine least one food item system across calls highestrated most calls total made changerating highestrated

find closest node given two nodes given directed graph nodes numbered where each node most one outgoing edge graph represented given indexed array edges size indicating directed edge node node edgesi outgoing edge edgesi also given two integers node node return index node reached both node node such maximum between distance node node node node minimized multiple answers return node smallest index possible answer exists return note edges may contain cycles example input edges node node output explanation distance node node distance node node maximum those two distances proven cannot get node smaller maximum distance than return node example input edges node node output explanation distance node node distance node itself maximum those two distances proven cannot get node smaller maximum distance than return node constraints edgeslength edgesi edgesi node node

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

longest increasing subsequence given integer array nums return length longest strictly increasing subsequence example input nums output explanation longest increasing subsequence length example input nums output example input nums output constraints numslength numsi follow come algorithm runs logn time complexity

build matrix conditions given positive integer also given integer array rowconditions size where rowconditionsi abovei belowi integer array colconditions size where colconditionsi lefti righti two arrays contain integers build matrix contains each numbers exactly once remaining cells should value matrix should also satisfy following conditions number abovei should appear row strictly above row which number belowi appears number lefti should appear column strictly left column which number righti appears return any matrix satisfies conditions answer exists return empty matrix example input rowconditions colconditions output explanation diagram above shows valid example matrix satisfies conditions row conditions following number row number row above matrix number row number row above matrix column conditions following number column number column left matrix number column number column left matrix note may multiple correct answers example input rowconditions colconditions output explanation first two conditions below but third conditions needs above satisfied matrix satisfy conditions return empty matrix constraints rowconditionslength colconditionslength rowconditionsilength colconditionsilength abovei belowi lefti righti abovei belowi lefti righti

reachable nodes restrictions undirected tree nodes labeled edges given integer array edges length where edgesi indicates edge between nodes tree also given integer array restricted which represents restricted nodes return maximum number nodes reach node without visiting restricted node note node not restricted node example input edges restricted output explanation diagram above shows tree only nodes reached node without visiting restricted node example input edges restricted output explanation diagram above shows tree only nodes reached node without visiting restricted node constraints edgeslength edgesilength edges represents valid tree restrictedlength restrictedi values restricted unique

longest ideal subsequence given string consisting lowercase letters integer call string ideal following conditions satisfied subsequence string absolute difference alphabet order every two adjacent letters less than equal return length longest ideal string subsequence string derived another string deleting some characters without changing order remaining characters note alphabet order not cyclic example absolute difference alphabet order not example input acfgbd output explanation longest ideal string acbd length string returned note acfgbd not ideal because difference alphabet order example input abcd output explanation longest ideal string abcd length string returned constraints slength consists lowercase english letters

first letter appear twice given string consisting lowercase english letters return first letter appear twice note letter appears twice before another letter second occurrence before second occurrence contain least one letter appears twice example input abccbaacz output explanation letter appears indexes letter appears indexes letter appears indexes letter appears index letter first letter appear twice because out letters index second occurrence smallest example input abcdd output explanation only letter appears twice return constraints slength consists lowercase english letters least one repeated letter

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

task scheduler given indexed array positive integers tasks representing tasks need completed order where tasksi represents type ith task also given positive integer space which represents minimum number days must pass after completion task before another task same type performed each day tasks completed must either complete next task tasks take break return minimum number days needed complete tasks example input tasks space output explanation one way complete tasks days follows day complete task day complete task day take break day take break day complete task day complete task day take break day complete task day complete task shown tasks cannot completed less than days example input tasks space output explanation one way complete tasks days follows day complete task day complete task day take break day take break day complete task day complete task shown tasks cannot completed less than days constraints taskslength tasksi space taskslength

time needed rearrange binary string given binary string one second occurrences simultaneously replaced process repeats occurrences exist return number seconds needed complete process example input output explanation after one second becomes after another second becomes after third second becomes after fourth second becomes occurrence exists any longer process needed seconds complete return example input output explanation occurrence exists processes needed seconds complete return constraints slength either follow solve problem time complexity

maximum number groups entering competition given positive integer array grades which represents grades students university would enter these students competition ordered nonempty groups such ordering meets following conditions sum grades students ith group less than sum grades students group groups except last total number students ith group less than total number students group groups except last return maximum number groups formed example input grades output explanation following possible way form groups students group students grades sum grades student count group students grades sum grades student count group students grades sum grades student count shown not possible form more than groups example input grades output explanation only form group since forming groups would lead equal number students both groups constraints gradeslength gradesi

count special integers call positive integer special digits distinct given positive integer return number special integers belong interval example input output explanation integers except special special integers example input output explanation integers special example input output explanation integers special some integers not special constraints

nim game playing following nim game your friend initially heap stones table your friend alternate taking turns first each turn person whose turn remove stones heap one who removes last stone winner given number stones heap return true win game assuming both your friend play optimally otherwise return false example input output false explanation these possible outcomes remove stone your friend removes stones last stone your friend wins remove stones your friend removes stones last stone your friend wins remove stones your friend removes last stone your friend wins outcomes your friend wins example input output true example input output true constraints

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

count number bad pairs given indexed integer array nums pair indices bad pair numsj numsi return total number bad pairs nums example input nums output explanation pair bad pair since pair bad pair since pair bad pair since pair bad pair since pair bad pair since total bad pairs return example input nums output explanation bad pairs constraints numslength numsi

construct smallest number string given indexed string pattern length consisting characters meaning increasing meaning decreasing indexed string num length created using following conditions num consists digits where each digit used most once patterni numi numi patterni numi numi return lexicographically smallest possible string num meets conditions example input pattern iiididdd output explanation indices must numi numi indices must numi numi some possible values num proven smallest possible num meets conditions note not possible because digit used more than once example input pattern ddd output explanation some possible values num proven smallest possible num meets conditions constraints patternlength pattern consists only letters

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

longest cycle graph given directed graph nodes numbered where each node most one outgoing edge graph represented given indexed array edges size indicating directed edge node node edgesi outgoing edge node edgesi return length longest cycle graph cycle exists return cycle path starts ends same node example input edges output explanation longest cycle graph cycle length cycle returned example input edges output explanation cycles graph constraints edgeslength edgesi edgesi

largest palindromic number given string num consisting digits only return largest palindromic integer form string formed using digits taken num should not contain leading zeroes notes not need use digits num but must use least one digit digits reordered example input num output explanation use digits form palindromic integer shown largest palindromic integer formed example input num output explanation shown largest palindromic integer formed note integer returned should not contain leading zeroes constraints numlength num consists digits

merge similar items given two integer arrays items items representing two sets items each array items following properties itemsi valuei weighti where valuei represents value weighti represents weight ith item value each item items unique return integer array ret where reti valuei weighti weighti being sum weights items value valuei note ret should returned ascending order value example input items items output explanation item value occurs items weight items weight total weight item value occurs items weight items weight total weight item value occurs items weight total weight return example input items items output explanation item value occurs items weight items weight total weight item value occurs items weight items weight total weight item value occurs items weight items weight total weight return example input items items output explanation item value occurs items weight items weight total weight item value occurs items weight items weight total weight item value occurs items weight total weight return constraints itemslength itemslength itemsilength itemsilength valuei weighti each valuei items unique each valuei items unique

number good paths tree connected undirected graph cycles consisting nodes numbered exactly edges given indexed integer array vals length where valsi denotes value ith node also given integer array edges where edgesi denotes exists undirected edge connecting nodes good path simple path satisfies following conditions starting node ending node same value nodes between starting node ending node values less than equal starting node starting nodes value should maximum value along path return number distinct good paths note path reverse counted same path example considered same single node also considered valid path example input vals edges output explanation good paths consisting single node additional good path reverse path treated same note not good path because vals vals example input vals edges output explanation good paths consisting single node additional good paths example input vals edges output explanation tree consists only one node one good path constraints valslength valsi edgeslength edgesilength edges represents valid tree

minimum number operations arrays similar given two positive integer arrays nums target same length one operation choose any two distinct indices where numslength set numsi numsi set numsj numsj two arrays considered similar frequency each element same return minimum number operations required nums similar target test cases generated such nums always similar target example input nums target output explanation possible nums similar target two operations choose nums choose nums shown minimum number operations needed example input nums target output explanation nums similar target one operation choose nums example input nums target output explanation array nums already similiar target constraints numslength targetlength numsi targeti possible nums similar target

sum prefix scores strings given array words size consisting nonempty strings define score string word number strings wordsi such word prefix wordsi example words abc cab score since prefix both abc return array answer size where answeri sum scores every nonempty prefix wordsi note string considered prefix itself example input words abcabbcb output explanation answer each string following abc prefixes abc strings prefix strings prefix string prefix abc total answer prefixes strings prefix strings prefix total answer prefixes strings prefix string prefix total answer prefix strings prefix total answer example input words abcd output explanation abcd prefixes abc abcd each prefix score one total answer constraints wordslength wordsilength wordsi consists lowercase english letters

word pattern given pattern string find follows same pattern here follow means full match such bijection between letter pattern nonempty word example input pattern abba dog cat cat dog output true example input pattern abba dog cat cat fish output false example input pattern aaaa dog cat cat dog output false constraints patternlength pattern contains only lowercase english letters slength contains only lowercase english letters spaces does not contain any leading trailing spaces words separated single space

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

bitwise xor pairings given two indexed arrays nums nums consisting nonnegative integers exists another array nums which contains bitwise xor pairings integers between nums nums every integer nums paired every integer nums exactly once return bitwise xor integers nums example input nums nums output explanation possible nums array bitwise xor these numbers return example input nums nums output explanation possible pairs bitwise xors nums nums nums nums nums nums nums nums one possible nums array return constraints numslength numslength numsi numsj

longest nice subarray given array nums consisting positive integers call subarray nums nice bitwise every pair elements different positions subarray equal return length longest nice subarray subarray contiguous part array note subarrays length always considered nice example input nums output explanation longest nice subarray subarray satisfies conditions proven longer nice subarray obtained return example input nums output explanation length longest nice subarray any subarray length chosen constraints numslength numsi

smallest subarrays maximum bitwise given indexed array nums length consisting nonnegative integers each index must determine size minimum sized nonempty subarray nums starting inclusive maximum possible bitwise other words let bij bitwise subarray numsij need find smallest subarray starting such bitwise subarray equal maxbik where bitwise array bitwise numbers return integer array answer size where answeri length minimum sized subarray starting maximum bitwise subarray contiguous nonempty sequence elements within array example input nums output explanation maximum possible bitwise starting any index starting index shortest subarray yields starting index shortest subarray yields maximum bitwise starting index shortest subarray yields maximum bitwise starting index shortest subarray yields maximum bitwise starting index shortest subarray yields maximum bitwise return example input nums output explanation starting index shortest subarray yields maximum bitwise length starting index shortest subarray yields maximum bitwise length return constraints numslength numsi

length longest alphabetical continuous substring alphabetical continuous string string consisting consecutive letters alphabet other words any substring string abcdefghijklmnopqrstuvwxyz example abc alphabetical continuous string while acb not given string consisting lowercase letters only return length longest alphabetical continuous substring example input abacaba output explanation distinct continuous substrings longest continuous substring example input abcde output explanation abcde longest continuous substring constraints slength consists only english lowercase letters

reverse odd levels binary tree given root perfect binary tree reverse node values each odd level tree example suppose node values level should become return root reversed tree binary tree perfect parent nodes two children leaves same level level node number edges along path between root node example input root output explanation tree only one odd level nodes level respectively which reversed become example input root output explanation nodes level which reversed become example input root output explanation odd levels nonzero values nodes level after reversal nodes level after reversal constraints number nodes tree range nodeval root perfect binary tree

find original array prefix xor given integer array pref size find return array arr size satisfies prefi arr arr arri note denotes bitwisexor operation proven answer unique example input pref output explanation array following pref pref pref pref pref example input pref output explanation pref arr constraints preflength prefi

smallest even multiple given positive integer return smallest positive integer multiple both example input output explanation smallest multiple both example input output explanation smallest multiple both note number multiple itself constraints

create components same value undirected tree nodes labeled given indexed integer array nums length where numsi represents value ith node also given integer array edges length where edgesi indicates edge between nodes tree allowed delete some edges splitting tree multiple connected components let value component sum numsi which node component return maximum number edges delete such every connected component tree same value example input nums edges output explanation above figure shows how delete edges created components nodes sum values each component equals proven better deletion exists answer example input nums edges output explanation edges deleted constraints numslength numsi edgeslength edgesilength edgesi edgesi edges represents valid tree

number valid clock times given string length called time representing current time digital clock format hhmm earliest possible time latest possible time string time digits represented symbol unknown must replaced digit return integer answer number valid clock times created replacing every digit example input time output explanation replace either producing note cannot replace since time invalid total two choices example input time output explanation each replaced any digit total choices example input time output explanation possible choices hours possible choices minutes total choices constraints time valid string length format hhmm some digits might replaced need replaced digits

find duplicate number given array integers nums containing integers where each integer range inclusive only one repeated number nums return repeated number must solve problem without modifying array nums uses only constant extra space example input nums output example input nums output constraints numslength numsi integers nums appear only once except precisely one integer which appears two more times follow how prove least one duplicate number must exist nums solve problem linear runtime complexity

sum number reverse given nonnegative integer num return true num expressed sum any nonnegative integer reverse false otherwise example input num output true explanation return true example input num output false explanation cannot expressed sum nonnegative integer reverse return false example input num output true explanation return true note when number reversed may leading zeros constraints num

range product queries powers given positive integer exists indexed array called powers composed minimum number powers sum array sorted nondecreasing order only one way form array also given indexed integer array queries where queriesi lefti righti each queriesi represents query where find product powersj lefti righti return array answers equal length queries where answersi answer ith query since answer ith query may too large each answersi should returned modulo example input queries output explanation powers shown powers cannot smaller size answer query powers powers answer query powers answer query powers powers powers powers each answer modulo yields same answer returned example input queries output explanation powers answer only query powers answer modulo same returned constraints querieslength starti endi powerslength

count days spent together alice bob traveling rome separate business meetings given strings arrivealice leavealice arrivebob leavebob alice city dates arrivealice leavealice inclusive while bob city dates arrivebob leavebob inclusive each character string format mmdd corresponding month day date return total number days alice bob rome together assume dates occur same calendar year which not leap year note number days per month represented example input arrivealice leavealice arrivebob leavebob output explanation alice rome august august bob rome august august they both rome together august answer example input arrivealice leavealice arrivebob leavebob output explanation day when alice bob rome together return constraints dates provided format mmdd alice bobs arrival dates earlier than equal their leaving dates given dates valid dates nonleap year

number subarrays gcd equal given integer array nums integer return number subarrays nums where greatest common divisor subarrays elements subarray contiguous nonempty sequence elements within array greatest common divisor array largest integer evenly divides array elements example input nums output explanation subarrays nums where greatest common divisor subarrays elements example input nums output explanation subarrays nums where greatest common divisor subarrays elements constraints numslength numsi

minimum money required before transactions given indexed integer array transactions where transactionsi costi cashbacki array describes transactions where each transaction must completed exactly once some order any given moment certain amount money order complete transaction money costi must hold true after performing transaction money becomes money costi cashbacki return minimum amount money required before any transaction transactions completed regardless order transactions example input transactions output explanation starting money transactions performed any order shown starting money fail complete transactions some order example input transactions output explanation transactions order minimum money required complete transactions transactions order minimum money required complete transactions starting money transactions performed any order constraints transactionslength transactionsilength costi cashbacki

find good indices given indexed integer array nums size positive integer call index range good following conditions satisfied elements before index nonincreasing order elements after index nondecreasing order return array good indices sorted increasing order example input nums output explanation two good indices array index subarray nonincreasing order subarray nondecreasing order index subarray nonincreasing order subarray nondecreasing order note index not good because not nondecreasing example input nums output explanation good indices array constraints numslength numsi

remove letter equalize frequency given indexed string word consisting lowercase english letters need select one index remove letter index word frequency every letter present word equal return true possible remove one letter frequency letters word equal false otherwise note frequency letter number times occurs string must remove exactly one letter cannot chose nothing example input word abcc output true explanation select index delete word becomes abc each character frequency example input word aazz output false explanation must delete character either frequency frequency vice versa impossible present letters equal frequency constraints wordlength word consists lowercase english letters only

employee worked longest task employees each unique given integer array logs where logsi idi leavetimei where idi employee worked ith task leavetimei time which employee finished ith task values leavetimei unique note ith task starts moment after task ends task starts time return employee worked task longest time tie between two more employees return smallest them example input logs output explanation task started ended units times task started ended units times task started ended units times task started ended units times task longest time task employee one worked return example input logs output explanation task started ended unit times task started ended units times task started ended units times task started ended units times tasks longest time task employee worked return example input logs output explanation task started ended units times task started ended units times tasks longest time tasks employees worked them return smallest constraints logslength logsilength idi leavetimei idi idi leavetimei sorted strictly increasing order

using robot print lexicographically smallest string given string robot currently holds empty string apply one following operations both empty remove first character string give robot robot append character string remove last character string give robot robot write character paper return lexicographically smallest string written paper example input zza output azz explanation let denote written string initially szza perform first operation three times tzza perform second operation three times pazz example input bac output abc explanation let denote written string perform first operation twice tba perform second operation twice pab perform first operation pab perform second operation pabc example input bdda output addb explanation let denote written string initially sbdda perform first operation four times tbdda perform second operation four times paddb constraints slength consists only english lowercase letters

sort people given array strings names array heights consists distinct positive integers both arrays length each index namesi heightsi denote name height ith person return names sorted descending order peoples heights example input names maryjohnemma heights output maryemmajohn explanation mary tallest followed emma john example input names alicebobbob heights output bobalicebob explanation first bob tallest followed alice second bob constraints nameslength heightslength namesilength heightsi namesi consists lower upper case english letters values heights distinct

game life according wikipedias article game life also known simply life cellular automaton devised british mathematician john horton conway board made grid cells where each cell initial state live represented dead represented each cell interacts eight neighbors horizontal vertical diagonal using following four rules taken above wikipedia article any live cell fewer than two live neighbors dies caused underpopulation any live cell two three live neighbors lives next generation any live cell more than three live neighbors dies overpopulation any dead cell exactly three live neighbors becomes live cell reproduction next state created applying above rules simultaneously every cell current state where births deaths occur simultaneously given current state grid board return next state example input board output example input board output constraints boardlength boardilength boardij follow could solve inplace remember board needs updated simultaneously cannot update some cells first use their updated values update other cells question represent board using array principle board infinite which would cause problems when active area encroaches border array live cells reach border how would address these problems

count number distinct integers after reverse operations given array nums consisting positive integers take each integer array reverse digits add end array should apply operation original integers nums return number distinct integers final array example input nums output explanation after reverse each number resulting array reversed integers added end array underlined note integer after reversing becomes which number distinct integers array numbers example input nums output explanation after reverse each number resulting array number distinct integers array number constraints numslength numsi

longest uploaded prefix given stream videos each represented distinct number need upload server need implement data structure calculates length longest uploaded prefix various points upload process consider uploaded prefix videos range inclusive uploaded server longest uploaded prefix maximum value satisfies definition implement luprefix class luprefixint initializes object stream videos void uploadint video uploads video server int longest returns length longest uploaded prefix defined above example input luprefix upload longest upload longest upload longest output null null null null explanation luprefix server new luprefix initialize stream videos serverupload upload video serverlongest since video not uploaded yet prefix return serverupload upload video serverlongest prefix longest uploaded prefix return serverupload upload video serverlongest prefix longest uploaded prefix return constraints video values video distinct most calls total made upload longest least one call made longest

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

meeting rooms iii given integer rooms numbered given integer array meetings where meetingsi starti endi means meeting held halfclosed time interval starti endi values starti unique meetings allocated rooms following manner each meeting take place unused room lowest number available rooms meeting delayed room becomes free delayed meeting should same duration original meeting when room becomes unused meetings earlier original start time should given room return number room held most meetings multiple rooms return room lowest number halfclosed interval interval between not example input meetings output explanation time both rooms not being used first meeting starts room time only room not being used second meeting starts room time both rooms being used third meeting delayed time both rooms being used fourth meeting delayed time meeting room finishes third meeting starts room time period time meetings both rooms finish fourth meeting starts room time period both rooms held meetings return example input meetings output explanation time three rooms not being used first meeting starts room time rooms not being used second meeting starts room time only room not being used third meeting starts room time three rooms being used fourth meeting delayed time meeting room finishes fourth meeting starts room time period time three rooms being used fifth meeting delayed time meetings rooms finish fifth meeting starts room time period room held meeting while rooms each held meetings return constraints meetingslength meetingsilength starti endi values starti unique

largest positive integer exists negative given integer array nums does not contain any zeros find largest positive integer such also exists array return positive integer such integer return example input nums output explanation only valid find array example input nums output explanation both their corresponding negative values array larger value example input nums output explanation single valid return constraints numslength numsi numsi

optimal partition string given string partition string one more substrings such characters each substring unique letter appears single substring more than once return minimum number substrings such partition note each character should belong exactly one substring partition example input abacaba output explanation two possible partitions abacaba abacaba shown minimum number substrings needed example input ssssss output explanation only valid partition ssssss constraints slength consists only english lowercase letters

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

most frequent even element given integer array nums return most frequent even element tie return smallest one such element return example input nums output explanation even elements these appear most return smallest one which example input nums output explanation even element appears most example input nums output explanation even element constraints numslength numsi

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

number common factors given two positive integers return number common factors integer common factor divides both example input output explanation common factors example input output explanation common factors constraints

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

maximum deletions string given string consisting only lowercase english letters one operation delete entire string delete first letters first letters equal following letters any range slength example ababc one operation could delete first two letters get abc since first two letters following two letters both equal return maximum number operations needed delete example input abcabcdabc output explanation delete first letters abc since next letters equal abcdabc delete letters used operations return proven maximum number operations needed note second operation cannot delete abc again because next occurrence abc does not happen next letters example input aaabaab output explanation delete first letter since next letter equal aabaab delete first letters aab since next letters equal aab delete first letter since next letter equal delete letters used operations return proven maximum number operations needed example input aaaaa output explanation each operation delete first letter constraints slength consists only lowercase english letters

divide intervals minimum number groups given integer array intervals where intervalsi lefti righti represents inclusive interval lefti righti divide intervals one more groups such each interval exactly one group two intervals same group intersect each other return minimum number groups need two intervals intersect least one common number between them example intervals intersect example input intervals output explanation divide intervals following groups group group group proven not possible divide intervals fewer than groups example input intervals output explanation none intervals overlap put them one group constraints intervalslength intervalsilength lefti righti

number pairs satisfying inequality given two indexed integer arrays nums nums each size integer diff find number pairs such numsi numsj numsi numsj diff return number pairs satisfy conditions example input nums nums diff output explanation pairs satisfy conditions since pair satisfies conditions since pair satisfies conditions since pair satisfies conditions return example input nums nums diff output explanation since does not exist any pair satisfies conditions return constraints numslength numslength numsi numsi diff

paths matrix whose sum divisible given indexed integer matrix grid integer currently position want reach position moving only down return number paths where sum elements path divisible since answer may very large return modulo example input grid output explanation two paths where sum elements path divisible first path highlighted red sum which divisible second path highlighted blue sum which divisible example input grid output explanation path highlighted red sum which divisible example input grid output explanation every integer divisible sum elements every possible path divisible constraints gridlength gridilength gridij

maximum sum hourglass given integer matrix grid define hourglass part matrix following form return maximum sum elements hourglass note hourglass cannot rotated must entirely contained within matrix example input grid output explanation cells shown above represent hourglass maximum sum example input grid output explanation only one hourglass matrix sum constraints gridlength gridilength gridij

count subarrays fixed bounds given integer array nums two integers mink maxk fixedbound subarray nums subarray satisfies following conditions minimum value subarray equal mink maximum value subarray equal maxk return number fixedbound subarrays subarray contiguous part array example input nums mink maxk output explanation fixedbound subarrays example input nums mink maxk output explanation every subarray nums fixedbound subarray possible subarrays constraints numslength numsi mink maxk

determine two events conflict given two arrays strings represent two inclusive events happened same day event event where event starttime endtime event starttime endtime event times valid hours format form hhmm conflict happens when two events some nonempty intersection some moment common both events return true conflict between two events otherwise return false example input event event output true explanation two events intersect time example input event event output true explanation two events intersect starting example input event event output false explanation two events not intersect constraints evnetlength eventlength eventilength eventilength starttime endtime starttime endtime event times follow hhmm format

minimum cost array equal given two indexed arrays nums cost consisting each positive integers following operation any number times increase decrease any element array nums cost doing one operation ith element costi return minimum total cost such elements array nums become equal example input nums cost output explanation elements equal following way increase element one time cost decrease element one time cost decrease element three times cost total cost shown cannot array equal smaller cost example input nums cost output explanation elements already equal operations needed constraints numslength costlength numsi costi

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

move zeroes given integer array nums move end while maintaining relative order nonzero elements note must inplace without making copy array example input nums output example input nums output constraints numslength numsi follow could minimize total number operations done

longest subarray maximum bitwise given integer array nums size consider nonempty subarray nums maximum possible bitwise other words let maximum value bitwise any subarray nums only subarrays bitwise equal should considered return length longest such subarray bitwise array bitwise numbers subarray contiguous sequence elements within array example input nums output explanation maximum possible bitwise subarray longest subarray value return example input nums output explanation maximum possible bitwise subarray longest subarray value return constraints numslength numsi

minimize xor given two positive integers num num find positive integer such same number set bits num value xor num minimal note xor bitwise xor operation return integer test cases generated such uniquely determined number set bits integer number binary representation example input num num output explanation binary representations num num respectively integer same number set bits num value xor minimal example input num num output explanation binary representations num num respectively integer same number set bits num value xor minimal constraints num num

longest increasing subsequence given integer array nums integer find longest subsequence nums meets following requirements subsequence strictly increasing difference between adjacent elements subsequence most return length longest subsequence meets requirements subsequence array derived another array deleting some elements without changing order remaining elements example input nums output explanation longest subsequence meets requirements subsequence length return note subsequence does not meet requirements because larger than example input nums output explanation longest subsequence meets requirements subsequence length return example input nums output explanation longest subsequence meets requirements subsequence length return constraints numslength numsi

minimize maximum array given indexed array nums comprising nonnegative integers one operation must choose integer such numsi decrease numsi increase numsi return minimum possible value maximum integer nums after performing any number operations example input nums output explanation one set optimal operations follows choose nums becomes choose nums becomes choose nums becomes maximum integer nums shown maximum number cannot less than return example input nums output explanation optimal leave nums since maximum value return constraints numslength numsi

maximum matching players trainers given indexed integer array players where playersi represents ability ith player also given indexed integer array trainers where trainersj represents training capacity jth trainer ith player match jth trainer players ability less than equal trainers training capacity additionally ith player matched most one trainer jth trainer matched most one player return maximum number matchings between players trainers satisfy these conditions example input players trainers output explanation one ways form two matchings follows players matched trainers since players matched trainers since proven maximum number matchings formed example input players trainers output explanation trainer matched any players each player only matched one trainer maximum answer constraints playerslength trainerslength playersi trainersj

most profitable path tree undirected tree nodes labeled rooted node given integer array edges length where edgesi indicates edge between nodes tree every node gate also given array even integers amount where amounti represents price needed open gate node amounti negative cash reward obtained opening gate node otherwise game goes follows initially alice node bob node bob every second alice bob each move adjacent node alice moves some leaf node while bob moves node every node along their path alice bob either spend money open gate node accept reward note gate already open price required nor any cash reward alice bob reach node simultaneously they share pricereward opening gate other words price open gate both alice bob pay each similarly reward gate both them receive each alice reaches leaf node she stops moving similarly bob reaches node stops moving note these events independent each other return maximum net income alice she travels optimal leaf node example input edges bob amount output explanation above diagram represents given tree game goes follows alice initially node bob node they open gates their respective nodes alices net income both alice bob move node since they reach here simultaneously they open gate together share reward alices net income becomes alice moves node since bob already opened gate alices income remains unchanged bob moves node stops moving alice moves node opens gate her net income becomes neither alice nor bob any further moves game ends not possible alice get higher net income example input edges bob amount output explanation alice follows path whereas bob follows path alice opens gate node only her net income constraints edgeslength edgesilength edges represents valid tree bob amountlength amounti even integer range

count subarrays median given array nums size consisting distinct integers positive integer return number nonempty subarrays nums median equal note median array middle element after sorting array ascending order array even length median left middle element example median median subarray contiguous part array example input nums output explanation subarrays median equal example input nums output explanation only subarray median equal constraints numslength numsi integers nums distinct

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

delete greatest value each row given matrix grid consisting positive integers perform following operation grid becomes empty delete element greatest value each row multiple such elements exist delete any them add maximum deleted elements answer note number columns decreases one after each operation return answer after performing operations described above example input grid output explanation diagram above shows removed values each step first operation remove first row second row notice two cells value remove any them add answer second operation remove first row second row add answer third operation remove first row second row add answer final answer example input grid output explanation diagram above shows removed values each step first operation remove first row add answer final answer constraints gridlength gridilength gridij

convert temperature given nonnegative floating point number rounded two decimal places celsius denotes temperature celsius should convert celsius kelvin fahrenheit return array ans kelvin fahrenheit return array ans answers within actual answer accepted note kelvin celsius fahrenheit celsius example input celsius output explanation temperature celsius converted kelvin converted fahrenheit example input celsius output explanation temperature celsius converted kelvin converted fahrenheit constraints celsius

merge two sorted lists given heads two sorted linked lists list list merge two lists one sorted list list should made splicing together nodes first two lists return head merged linked list example input list list output example input list list output example input list list output constraints number nodes both lists range nodeval both list list sorted nondecreasing order

integer english words convert nonnegative integer num english words representation example input num output one hundred twenty three example input num output twelve thousand three hundred forty five example input num output one million two hundred thirty four thousand five hundred sixty seven constraints num

append characters string subsequence given two strings consisting only lowercase english letters return minimum number characters need appended end becomes subsequence subsequence string derived another string deleting some characters without changing order remaining characters example input coaching coding output explanation append characters ding end coachingding subsequence coachingding shown appending any characters end never subsequence example input abcde output explanation already subsequence abcde example input abcde output explanation append characters abcde end zabcde subsequence zabcde shown appending any characters end never subsequence constraints slength tlength consist only lowercase english letters

number distinct averages given indexed integer array nums even length long nums not empty must repetitively find minimum number nums remove find maximum number nums remove calculate average two removed numbers average two numbers example average return number distinct averages calculated using above process note when tie minimum maximum number any removed example input nums output explanation remove average nums remove average nums remove average since distinct numbers return example input nums output explanation only one average calculated after removing return constraints numslength numslength even numsi

minimum fuel cost report capital tree connected undirected graph cycles structure country network consisting cities numbered exactly roads capital city city given integer array roads where roadsi denotes exists bidirectional road connecting cities meeting representatives each city meeting capital city car each city given integer seats indicates number seats each car representative use car their city travel change car ride another representative cost traveling between two cities one liter fuel return minimum number liters fuel reach capital city example input roads seats output explanation representative goes directly capital liter fuel representative goes directly capital liter fuel representative goes directly capital liter fuel costs liters fuel minimum proven minimum number liters fuel needed example input roads seats output explanation representative goes directly city liter fuel representative representative together city liter fuel representative representative together capital liter fuel representative goes directly capital liter fuel representative goes directly capital liter fuel representative goes directly city liter fuel representative representative together capital liter fuel costs liters fuel minimum proven minimum number liters fuel needed example input roads seats output explanation representatives need travel capital city constraints roadslength roadsilength roads represents valid tree seats

average value even numbers divisible three given integer array nums positive integers return average value even integers divisible note average elements sum elements divided rounded down nearest integer example input nums output explanation even numbers divisible example input nums output explanation single number satisfies requirement return constraints numslength numsi

minimum total distance traveled some robots factories xaxis given integer array robot where roboti position ith robot also given integer array factory where factoryj positionj limitj indicates positionj position jth factory jth factory repair most limitj robots positions each robot unique positions each factory also unique note robot same position factory initially robots initially broken they keep moving one direction direction could negative positive direction xaxis when robot reaches factory did not reach limit factory repairs robot stops moving any moment set initial direction moving some robot your target minimize total distance traveled robots return minimum total distance traveled robots test cases generated such robots repaired note robots move same speed two robots move same direction they never collide two robots move opposite directions they meet some point they not collide they cross each other robot passes factory reached limits crosses does not exist robot moved position position distance moved example input robot factory output explanation shown figure first robot position moves positive direction repaired first factory second robot position moves negative direction repaired first factory third robot position repaired second factory does not need move limit first factory fixed robots limit second factory fixed robot total distance shown cannot achieve better total distance than example input robot factory output explanation shown figure first robot position moves positive direction repaired second factory second robot position moves negative direction repaired first factory limit first factory fixed robot limit second factory fixed robot total distance shown cannot achieve better total distance than constraints robotlength factorylength factoryjlength roboti positionj limitj robotlength input generated such always possible repair every robot

maximum value string array value alphanumeric string defined numeric representation string base comprises digits only length string otherwise given array strs alphanumeric strings return maximum value any string strs example input strs alicbob output explanation alic consists both letters digits value length bob consists only letters value also length consists only digits value numeric equivalent also consists only digits value consists only digits value maximum value alic example input strs output explanation each string array value return constraints strslength strsilength strsi consists only lowercase english letters digits

difference between ones zeros row column given indexed binary matrix grid indexed difference matrix diff created following procedure let number ones ith row onesrowi let number ones jth column onescolj let number zeros ith row zerosrowi let number zeros jth column zeroscolj diffij onesrowi onescolj zerosrowi zeroscolj return difference matrix diff example input grid output explanation diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol example input grid output explanation diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol constraints gridlength gridilength gridij either

apply operations array given indexed array nums size consisting nonnegative integers need apply operations array where ith operation indexed apply following ith element nums numsi numsi multiply numsi set numsi otherwise skip operation after performing operations shift end array example array after shifting end return resulting array note operations applied sequentially not once example input nums output explanation following operations nums nums not equal skip operation nums nums equal multiply nums change nums array becomes nums nums not equal skip operation nums nums equal multiply nums change nums array becomes nums nums equal multiply nums change nums array becomes after shift end which gives array example input nums output explanation operation applied shift end constraints numslength numsi

find pivot integer given positive integer find pivot integer such sum elements between inclusively equals sum elements between inclusively return pivot integer such integer exists return guaranteed most one pivot index given input example input output explanation pivot integer since example input output explanation pivot integer since example input output explanation proved such integer exist constraints

minimum total cost arrays unequal given two indexed integer arrays nums nums equal length one operation swap values any two indices nums cost operation sum indices find minimum total cost performing given operation any number times such numsi numsi after performing operations return minimum total cost such nums nums satisfy above condition case not possible return example input nums nums output explanation one ways perform operations swap values indices incurring cost nums swap values indices incurring cost nums swap values indices incurring cost nums see each index numsi numsi cost required here note other ways swap values but proven not possible obtain cost less than example input nums nums output explanation one ways perform operations swap values indices incurring cost nums swap values indices incurring cost nums total cost needed here which minimum possible example input nums nums output explanation shown not possible satisfy given conditions irrespective number operations perform return constraints numslength numslength numsi numsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

divide players teams equal skill given positive integer array skill even length where skilli denotes skill ith player divide players teams size such total skill each team equal chemistry team equal product skills players team return sum chemistry teams return way divide players teams such total skill each team equal example input skill output explanation divide players following teams where each team total skill sum chemistry teams example input skill output explanation two players form team total skill chemistry team example input skill output explanation way divide players teams such total skill each team equal constraints skilllength skilllength even skilli

split message based limit given string message positive integer limit must split message one more parts based limit each resulting part should suffix where replaced total number parts replaced index part starting going additionally length each resulting part suffix should equal limit except last part whose length most limit resulting parts should formed such when their suffixes removed they concatenated order they should equal message also result should contain few parts possible return parts message would split array strings impossible split message required return empty array example input message very awesome message limit output very awesome message explanation first parts take characters each beginning message next parts take characters each finish splitting message example each part last length shown not possible split message less than parts example input message short message limit output short message explanation under given constraints string split two parts first part comprises first characters length next part comprises last characters length constraints messagelength message consists only lowercase english letters limit

closest nodes queries binary search tree given root binary search tree array queries size consisting positive integers find array answer size where answeri mini maxi mini largest value tree smaller than equal queriesi such value does not exist add instead maxi smallest value tree greater than equal queriesi such value does not exist add instead return array answer example input root nullnullnullnullnullnull queries output explanation answer queries following way largest number smaller equal than tree smallest number greater equal than answer first query largest number smaller equal than tree smallest number greater equal than answer second query largest number smaller equal than tree smallest number greater equal than does not exist answer third query example input root null queries output explanation largest number smaller equal tree does not exist smallest number greater equal answer query constraints number nodes tree range nodeval querieslength queriesi

number unequal triplets array given indexed array positive integers nums find number triplets meet following conditions numslength numsi numsj numsk pairwise distinct other words numsi numsj numsi numsk numsj numsk return number triplets meet conditions example input nums output explanation following triplets meet conditions because because because since triplets return note not valid triplet because example input nums output explanation triplets meet conditions return constraints numslength numsi

height binary tree after subtree removal queries given root binary tree nodes each node assigned unique value also given array queries size perform independent queries tree where ith query following remove subtree rooted node value queriesi tree guaranteed queriesi not equal value root return array answer size where answeri height tree after performing ith query note queries independent tree returns initial state after each query height tree number edges longest simple path root some node tree example input root nullnullnullnullnullnull queries output explanation diagram above shows tree after removing subtree rooted node value height tree path example input root queries output explanation following queries removing subtree rooted node value height tree becomes path removing subtree rooted node value height tree becomes path removing subtree rooted node value height tree becomes path removing subtree rooted node value height tree becomes path constraints number nodes tree nodeval values tree unique querieslength minn queriesi queriesi rootval

circular sentence sentence list words separated single space leading trailing spaces example hello world hello hello world hello world sentences words consist only uppercase lowercase english letters uppercase lowercase english letters considered different sentence circular last character word equal first character next word last character last word equal first character first word example leetcode exercises sound delightful eetcode leetcode eats soul circular sentences however leetcode cool happy leetcode leetcode leetcode not circular sentences given string sentence return true circular otherwise return false example input sentence leetcode exercises sound delightful output true explanation words sentence leetcode exercises sound delightful leetcodes last character equal exercisess first character exercisess last character equal sounds first character sounds last character equal delightfuls first character delightfuls last character equal leetcodes first character sentence circular example input sentence eetcode output true explanation words sentence eetcode eetcodes last character equal eetcodes first character sentence circular example input sentence leetcode cool output false explanation words sentence leetcode cool leetcodes last character not equal iss first character sentence not circular constraints sentencelength sentence consist only lowercase uppercase english letters spaces words sentence separated single space leading trailing spaces

number beautiful partitions given string consists digits two integers minlength partition called beautiful partitioned nonintersecting substrings each substring length least minlength each substring starts prime digit ends nonprime digit prime digits rest digits nonprime return number beautiful partitions since answer may very large return modulo substring contiguous sequence characters within string example input minlength output explanation exists three ways create beautiful partition example input minlength output explanation exists one way create beautiful partition example input minlength output explanation exists one way create beautiful partition constraints minlength slength consists digits

frog jump given indexed integer array stones sorted strictly increasing order representing positions stones river frog initially first stone wants travel last stone return first stone however jump any stone most once length jump absolute difference between position stone frog currently position stone which frog jumps more formally frog stonesi jumping stonesj length jump stonesi stonesj cost path maximum length jump jumps path return minimum cost path frog example input stones output explanation above figure represents one optimal paths frog take cost path which maximum length jump since not possible achieve cost less than return example input stones output explanation frog jump directly last stone come back first stone case length each jump cost path max shown minimum achievable cost constraints stoneslength stonesi stones stones sorted strictly increasing order

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum penalty shop given customer visit log shop represented indexed string customers consisting only characters ith character means customers come ith hour whereas indicates customers come ith hour shop closes jth hour penalty calculated follows every hour when shop open customers come penalty increases every hour when shop closed customers come penalty increases return earliest hour which shop must closed incur minimum penalty note shop closes jth hour means shop closed hour example input customers yyny output explanation closing shop hour incurs penalty closing shop hour incurs penalty closing shop hour incurs penalty closing shop hour incurs penalty closing shop hour incurs penalty closing shop hour gives minimum penalty since earlier optimal closing time example input customers nnnnn output explanation best close shop hour customers arrive example input customers yyyy output explanation best close shop hour customers arrive each hour constraints customerslength customers consists only characters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

most popular video creator given two string arrays creators ids integer array views length ith video platform created creatori idsi viewsi views popularity creator sum number views creators videos find creator highest popularity their most viewed video multiple creators highest popularity find them multiple videos highest view count creator find lexicographically smallest return array strings answer where answeri creatori idi means creatori highest popularity idi their most popular video answer returned any order example input creators alicebobalicechris ids onetwothreefour views output aliceonebobtwo explanation popularity alice popularity bob popularity chris alice bob most popular creators bob video highest view count two alice videos highest view count one three since one lexicographically smaller than three included answer example input creators alicealicealice ids abc views output aliceb explanation videos highest view count since lexicographically smaller than included answer constraints creatorslength idslength viewslength creatorsilength idsilength creatorsi idsi consist only lowercase english letters viewsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

maximum number nonoverlapping palindrome substrings given string positive integer select set nonoverlapping substrings string satisfy following conditions length each substring least each substring palindrome return maximum number substrings optimal selection substring contiguous sequence characters within string example input abaccdbbd output explanation select substrings underlined abaccdbbd both aba dbbd palindromes length least shown cannot find selection more than two valid substrings example input adbcda output explanation palindrome substring length least string constraints slength consists lowercase english letters

words within two edits dictionary given two string arrays queries dictionary words each array comprise lowercase english letters same length one edit take word queries change any letter any other letter find words queries after maximum two edits equal some word dictionary return list words queries match some word dictionary after maximum two edits return words same order they appear queries example input queries wordnoteantswood dictionary woodjokemoat output wordnotewood explanation changing word allows equal dictionary word wood changing note changes joke would take more than edits ants equal dictionary word wood remain unchanged edits match corresponding dictionary word return wordnotewood example input queries yes dictionary not output explanation applying any two edits yes cannot equal not return empty array constraints querieslength dictionarylength queriesilength dictionaryjlength queriesi dictionaryj composed lowercase english letters

minimum score path between two cities given positive integer representing cities numbered also given array roads where roadsi distancei indicates bidirectional road between cities distance equal distancei cities graph not necessarily connected score path between two cities defined minimum distance road path return minimum possible score path between cities note path sequence roads between two cities allowed path contain same road multiple times visit cities multiple times along path test cases generated such least one path between example input roads output explanation path city minimum score score path min shown other path less score example input roads output explanation path city minimum score score path min constraints roadslength roadsilength distancei repeated edges least one path between

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

total cost hire workers given indexed integer array costs where costsi cost hiring ith worker also given two integers candidates want hire exactly workers according following rules run sessions hire exactly one worker each session each hiring session choose worker lowest cost either first candidates workers last candidates workers break tie smallest index example costs candidates first hiring session choose worker because they lowest cost second hiring session choose worker because they same lowest cost worker but they smallest index please note indexing may changed process fewer than candidates workers remaining choose worker lowest cost them break tie smallest index worker only chosen once return total cost hire exactly workers example input costs candidates output explanation hire workers total total cost initially first hiring round choose worker lowest cost break tie smallest index which total cost second hiring round choose worker lowest cost index total cost third hiring round choose worker lowest cost index total cost notice worker index common first last four workers total hiring cost example input costs candidates output explanation hire workers total total cost initially first hiring round choose worker lowest cost break tie smallest index which total cost notice workers index common first last workers second hiring round choose worker lowest cost index total cost third hiring round less than three candidates choose worker remaining workers lowest cost index total cost total hiring cost constraints costslength costsi candidates costslength

maximum sum distinct subarrays length given integer array nums integer find maximum subarray sum subarrays nums meet following conditions length subarray elements subarray distinct return maximum subarray sum subarrays meet conditions subarray meets conditions return subarray contiguous nonempty sequence elements within array example input nums output explanation subarrays nums length which meets requirements sum which meets requirements sum which meets requirements sum which does not meet requirements because element repeated which does not meet requirements because element repeated return because maximum subarray sum subarrays meet conditions example input nums output explanation subarrays nums length which does not meet requirements because element repeated return because subarrays meet conditions constraints numslength numsi

minimum addition integer beautiful given two positive integers target integer considered beautiful sum digits less than equal target return minimum nonnegative integer such beautiful input generated such always possible beautiful example input target output explanation initially digit sum after adding becomes digit sum becomes shown not beautiful adding nonnegative integer less than example input target output explanation initially digit sum after adding becomes digit sum becomes shown not beautiful adding nonnegative integer less than example input target output explanation initially digit sum which already smaller than equal target constraints target input generated such always possible beautiful

next greater element given indexed array nonnegative integers nums each integer nums must find respective second greater integer second greater integer numsi numsj such numsj numsi exists exactly one index such numsk numsi such numsj second greater integer considered example array second greater integer return integer array answer where answeri second greater integer numsi example input nums output explanation index first integer greater than second integer greater than index first second integer greater than index first second integer greater than index integer greater than second greater integer considered index integer greater than second greater integer considered return example input nums output explanation return since neither integer any integer greater than constraints numslength numsi

binary tree paths given root binary tree return roottoleaf paths any order leaf node children example input root null output example input root output constraints number nodes tree range nodeval

destroy sequential targets given indexed array nums consisting positive integers representing targets number line also given integer space machine which destroy targets seeding machine some numsi allows destroy targets values represented numsi space where any nonnegative integer want destroy maximum number targets nums return minimum value numsi seed machine destroy maximum number targets example input nums space output explanation seed machine nums destroy targets equal case would destroy total targets except nums impossible destroy more than targets return nums example input nums space output explanation seeding machine nums nums destroys targets not possible destroy more than targets since nums minimal integer destroy targets return example input nums space output explanation whatever initial seed select only destroy target minimal seed nums constraints numslength numsi space

maximum star sum graph undirected graph consisting nodes numbered given indexed integer array vals length where valsi denotes value ith node also given integer array edges where edgesi denotes exists undirected edge connecting nodes star graph subgraph given graph having center node containing more neighbors other words subset edges given graph such exists common node edges image below shows star graphs neighbors respectively centered blue node star sum sum values nodes present star graph given integer return maximum star sum star graph containing most edges example input vals edges output explanation above diagram represents input graph star graph maximum star sum denoted blue centered includes neighbors shown not possible get star graph sum greater than example input vals edges output explanation only one possible star graph which node itself return constraints valslength valsi edgeslength minn edgesilength

minimum cuts divide circle valid cut circle cut represented straight line touches two points edge circle passes center cut represented straight line touches one point edge circle center some valid invalid cuts shown figures below given integer return minimum number cuts needed divide circle equal slices example input output explanation above figure shows how cutting circle twice middle divides equal slices example input output explanation least cuts needed divide circle equal slices shown less than cuts cannot result slices equal size shape also note first cut not divide circle distinct parts constraints

minimum number operations sort binary tree level given root binary tree unique values one operation choose any two nodes same level swap their values return minimum number operations needed values each level sorted strictly increasing order level node number edges along path between root node example input root nullnullnullnullnull output explanation swap level becomes swap level becomes swap level becomes used operations return proven minimum number operations needed example input root output explanation swap level becomes swap level becomes swap level becomes used operations return proven minimum number operations needed example input root output explanation each level already sorted increasing order return constraints number nodes tree range nodeval values tree unique

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

number subarrays lcm equal given integer array nums integer return number subarrays nums where least common multiple subarrays elements subarray contiguous nonempty sequence elements within array least common multiple array smallest positive integer divisible array elements example input nums output explanation subarrays nums where least common multiple subarrays elements example input nums output explanation subarrays nums where least common multiple subarrays elements constraints numslength numsi

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

count ways build good strings given integers zero one low high construct string starting empty string each step perform either following append character zero times append character one times performed any number times good string string constructed above process having length between low high inclusive return number different good strings constructed satisfying these properties since answer large return modulo example input low high zero one output explanation one possible valid good string constructed follows binary strings good strings example example input low high zero one output explanation good strings constraints low high zero one low

count palindromic subsequences given string digits return number palindromic subsequences having length since answer may very large return modulo note string palindromic reads same forward backward subsequence string derived another string deleting some characters without changing order remaining characters example input output explanation possible subsequences length two them both equal palindromic example input output explanation subsequences which palindromic example input output explanation only two palindromic subsequences constraints slength consists digits

odd string difference given array equallength strings words assume length each string each string wordsi converted difference integer array differencei length where differenceij wordsij wordsij where note difference between two letters difference between their positions alphabet position example string acb difference integer array strings words same difference integer array except one should find string return string words different difference integer array example input words adcwzyabc output abc explanation difference integer array adc difference integer array wzy difference integer array abc odd array out return corresponding string abc example input words aaabobcccddd output bob explanation integer arrays except bob which corresponds constraints wordslength wordsilength wordsi consists lowercase english letters

single number iii given integer array nums which exactly two elements appear only once other elements appear exactly twice find two elements appear only once return answer any order must write algorithm runs linear runtime complexity uses only constant extra space example input nums output explanation also valid answer example input nums output example input nums output constraints numslength numsi each integer nums appear twice only two integers appear once

remove nodes linked list given head linked list remove every node which node strictly greater value anywhere side return head modified linked list example input head output explanation nodes should removed node node node node node node example input head output explanation every node value nodes removed constraints number nodes given list range nodeval

divide nodes maximum number groups given positive integer representing number nodes undirected graph nodes labeled also given integer array edges where edgesi indicates bidirectional edge between nodes notice given graph may disconnected divide nodes graph groups indexed such each node graph belongs exactly one group every pair nodes graph connected edge belongs group index belongs group index return maximum number groups maximum which divide nodes return impossible group nodes given conditions example input edges output explanation shown image add node first group add node second group add nodes third group add nodes fourth group see every edge satisfied shown create fifth group move any node third fourth group least edges not satisfied example input edges output explanation add node first group node second group node third group satisfy first two edges see third edge not satisfied shown grouping possible constraints edgeslength edgesilength most one edge between any pair vertices

longest square streak array given integer array nums subsequence nums called square streak length subsequence least after sorting subsequence each element except first element square previous number return length longest square streak nums return square streak subsequence array derived another array deleting some elements without changing order remaining elements example input nums output explanation choose subsequence after sorting becomes square streak shown every subsequence length not square streak example input nums output explanation square streak nums return constraints numslength numsi

maximum tastiness candy basket given array positive integers price where pricei denotes price ith candy positive integer store sells baskets distinct candies tastiness candy basket smallest absolute difference prices any two candies basket return maximum tastiness candy basket example input price output explanation choose candies prices tastiness candy basket min min proven maximum tastiness achieved example input price output explanation choose candies prices tastiness candy basket min min proven maximum tastiness achieved example input price output explanation choosing any two distinct candies candies result tastiness constraints pricelength pricei

time cross bridge workers who want move boxes old warehouse new one given two integers integer array time size where timei lefttorighti pickoldi righttolefti putnewi warehouses separated river connected bridge old warehouse bank river new warehouse left bank river initially workers waiting left side bridge move boxes ith worker indexed cross bridge left bank new warehouse bank old warehouse lefttorighti minutes pick box old warehouse return bridge pickoldi minutes different workers pick their boxes simultaneously cross bridge bank old warehouse left bank new warehouse righttolefti minutes put box new warehouse return bridge putnewi minutes different workers put their boxes simultaneously worker less efficient than worker either condition met lefttorighti righttolefti lefttorightj righttoleftj lefttorighti righttolefti lefttorightj righttoleftj following rules regulate movement workers bridge worker reaches bridge while another worker crossing bridge waits their side bridge bridge free worker waiting side bridge gets cross bridge more than one worker waiting side one lowest efficiency crosses first bridge free worker waiting side least one box remains old warehouse worker left side river gets cross bridge more than one worker waiting left side one lowest efficiency crosses first return instance time which last worker reaches left bank river after boxes put new warehouse example input time output explanation worker crosses bridge left bank bank worker picks box old warehouse worker crosses bridge bank left bank worker puts box new warehouse whole process ends after minutes return because problem asks instance time which last worker reaches left bank example input time output explanation worker crosses bridge left bank bank worker picks box old warehouse worker crosses bridge left bank bank worker picks box old warehouse worker crosses bridge bank left bank worker puts box new warehouse worker crosses bridge bank left bank worker puts box new warehouse worker crosses bridge left bank bank worker picks box old warehouse worker crosses bridge bank left bank worker puts box new warehouse whole process ends after minutes return because problem asks instance time which last worker reaches left bank constraints timelength timeilength lefttorighti pickoldi righttolefti putnewi

increment submatrices one given positive integer indicating initially indexed integer matrix mat filled zeroes also given integer array query each queryi rowi coli rowi coli should following operation add every element submatrix top left corner rowi coli bottom corner rowi coli add matxy rowi rowi coli coli return matrix mat after performing every query example input queries output explanation diagram above shows initial matrix matrix after first query matrix after second query first query add every element submatrix top left corner bottom corner second query add every element submatrix top left corner bottom corner example input queries output explanation diagram above shows initial matrix matrix after first query first query add every element matrix constraints querieslength rowi rowi coli coli

minimum operations array equal given two integer arrays nums nums equal length integer perform following operation nums choose two indexes increment numsi decrement numsj other words numsi numsi numsj numsj nums said equal nums indices such numsi numsi return minimum number operations required nums equal nums impossible them equal return example input nums nums output explanation operations transform nums nums operation after applying operation nums operation after applying operation nums one prove impossible arrays equal fewer operations example input nums nums output explanation proved impossible two arrays equal constraints numslength numslength numsi numsj

alternating digit sum given positive integer each digit sign according following rules most significant digit assigned positive sign each other digit opposite sign adjacent digits return sum digits their corresponding sign example input output explanation example input output explanation example input output explanation constraints

minimize maximum two arrays two arrays arr arr which initially empty need add positive integers them such they satisfy following conditions arr contains uniquecnt distinct positive integers each which not divisible divisor arr contains uniquecnt distinct positive integers each which not divisible divisor integer present both arr arr given divisor divisor uniquecnt uniquecnt return minimum possible maximum integer present either array example input divisor divisor uniquecnt uniquecnt output explanation distribute first natural numbers arr arr arr arr see both arrays satisfy conditions since maximum value return example input divisor divisor uniquecnt uniquecnt output explanation here arr arr satisfy conditions since maximum value return example input divisor divisor uniquecnt uniquecnt output explanation here final possible arrays arr arr shown not possible obtain lower maximum satisfying conditions constraints divisor divisor uniquecnt uniquecnt uniquecnt uniquecnt

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

ugly number ugly number positive integer whose prime factors limited given integer return true ugly number example input output true explanation example input output true explanation prime factors prime factors limited example input output false explanation not ugly since includes prime factor constraints

take each character left given string consisting characters nonnegative integer each minute may take either leftmost character rightmost character return minimum number minutes needed take least each character return not possible take each character example input aabaaaacaabc output explanation take three characters left two characters one character take five characters four characters two characters two characters total minutes needed proven minimum number minutes needed example input output explanation not possible take one return constraints slength consists only letters slength

find xorbeauty array given indexed integer array nums effective value three indices defined numsi numsj numsk xorbeauty array xoring effective values possible triplets indices where return xorbeauty nums note val val bitwise val val val val bitwise val val example input nums output explanation triplets their corresponding effective values listed below effective value effective value effective value effective value effective value effective value effective value effective value xorbeauty array bitwise xor beauties example input nums output explanation xorbeauty given array constraints numslength numsi

count collisions monkeys polygon regular convex polygon vertices vertices labeled clockwise direction each vertex exactly one monkey following figure shows convex polygon vertices each monkey moves simultaneously neighboring vertex neighboring vertex vertex vertex clockwise direction vertex counterclockwise direction collision happens least two monkeys reside same vertex after movement intersect edge return number ways monkeys move least one collision happens since answer may very large return modulo note each monkey only move once example input output explanation total possible movements two ways such they collide some point monkey moves clockwise direction monkey moves anticlockwise direction monkey moves clockwise direction monkeys collide monkey moves anticlockwise direction monkey moves anticlockwise direction monkey moves clockwise direction monkeys collide shown total movements result collision example input output explanation shown ways monkeys collide constraints

apply bitwise operations strings equal given two indexed binary strings target same length following operation any number times choose two different indices where simultaneously replace xor example choose simultaneously replace xor xor return true string equal target false otherwise example input target output true explanation following operations choose choose since equal target return true example input target output false explanation not possible equal target any number operations constraints slength targetlength target consist only digits

cycle length queries tree given integer complete binary tree nodes root tree node value every node value val range two children where left node value val node value val also given integer array queries length where queriesi each query solve following problem add edge between nodes values find length cycle graph remove added edge between nodes values note cycle path starts ends same node each edge path visited only once length cycle number edges visited cycle could multiple edges between two nodes tree after adding edge query return array answer length where answeri answer ith query example input queries output explanation diagrams above show tree nodes nodes colored red describe nodes cycle after adding edge after adding edge between nodes graph contains cycle nodes answer first query delete added edge process next query after adding edge between nodes graph contains cycle nodes answer second query delete added edge process next query after adding edge between nodes graph contains cycle nodes answer third query delete added edge example input queries output explanation diagram above shows tree nodes nodes colored red describe nodes cycle after adding edge after adding edge between nodes graph contains cycle nodes answer first query delete added edge constraints querieslength queriesilength

reward top students given two string arrays positivefeedback negativefeedback containing words denoting positive negative feedback respectively note word both positive negative initially every student points each positive word feedback report increases points student whereas each negative word decreases points given feedback reports represented indexed string array report indexed integer array studentid where studentidi represents student who received feedback report reporti each student unique given integer return top students after ranking them nonincreasing order their points case more than one student same points one lower ranks higher example input positivefeedback smartbrilliantstudious negativefeedback not report student studiousthe student smart studentid output explanation both students positive feedback points but since student lower ranks higher example input positivefeedback smartbrilliantstudious negativefeedback not report student not studiousthe student smart studentid output explanation student positive feedback negative feedback points student positive feedback points since student more points returned constraints positivefeedbacklength negativefeedbacklength positivefeedbackilength negativefeedbackjlength both positivefeedbacki negativefeedbackj consists lowercase english letters word present both positivefeedback negativefeedback reportlength studentidlength reporti consists lowercase english letters spaces single space between consecutive words reporti reportilength studentidi values studentidi unique

sort students their kth score class students exams given indexed integer matrix score where each row represents one student scoreij denotes score ith student got jth exam matrix score contains distinct integers only also given integer sort students rows matrix their scores kth indexed exam highest lowest return matrix after sorting example input score output explanation above diagram denotes student while denotes exam student index scored exam which highest score they got first place student index scored exam which second highest score they got second place student index scored exam which lowest score they got third place example input score output explanation above diagram denotes student while denotes exam student index scored exam which highest score they got first place student index scored exam which lowest score they got second place constraints scorelength scoreilength scoreij score consists distinct integers

count number good subarrays given integer array nums integer return number good subarrays nums subarray arr good least pairs indices such arri arrj subarray contiguous nonempty sequence elements within array example input nums output explanation only good subarray array nums itself example input nums output explanation different good subarrays pairs pairs pairs pairs constraints numslength numsi

maximum enemy forts captured given indexed integer array forts length representing positions several forts fortsi where represents fort ith position indicates enemy fort ith position indicates fort ith position under your command decided move your army one your forts position empty position such army travels over enemy forts only formally where minij maxij fortsk while moving army enemy forts come way captured return maximum number enemy forts captured case impossible move your army not any fort under your command return example input forts output explanation moving army position position captures enemy forts moving army position position captures enemy forts since maximum number enemy forts captured return example input forts output explanation since enemy fort captured returned constraints fortslength fortsi

maximum count positive integer negative integer given array nums sorted nondecreasing order return maximum between number positive integers number negative integers other words number positive integers nums pos number negative integers neg return maximum pos neg note neither positive nor negative example input nums output explanation positive integers negative integers maximum count them example input nums output explanation positive integers negative integers maximum count them example input nums output explanation positive integers negative integers maximum count them constraints numslength numsi nums sorted nondecreasing order follow solve problem ologn time complexity

hindex given array integers citations where citationsi number citations researcher received their ith paper return researchers hindex according definition hindex wikipedia hindex defined maximum value such given researcher published least papers each cited least times example input citations output explanation means researcher papers total each them received citations respectively since researcher papers least citations each remaining two more than citations each their hindex example input citations output constraints citationslength citationsi

minimum cost split array given integer array nums integer split array some number nonempty subarrays cost split sum importance value each subarray split let trimmedsubarray version subarray where numbers which appear only once removed example trimmed importance value subarray trimmedsubarraylength example subarray trimmed importance value subarray return minimum possible cost split nums subarray contiguous nonempty sequence elements within array example input nums output explanation split nums two subarrays importance value importance value cost split shown minimum possible cost possible splits example input nums output explanation split nums two subarrays importance value importance value cost split shown minimum possible cost possible splits example input nums output explanation split nums one subarray importance value cost split shown minimum possible cost possible splits constraints numslength numsi numslength

smallest value after replacing sum prime factors given positive integer continuously replace sum prime factors note prime factor divides multiple times should included sum many times divides return smallest value take example input output explanation initially replace replace replace smallest value take example input output explanation initially smallest value take constraints

count distinct numbers board given positive integer initially placed board every day days perform following procedure each number present board find numbers such place those numbers board return number distinct integers present board after days elapsed note once number placed board remain end stands modulo operation example example input output explanation initially present board next day added since after day added board because end billion days distinct numbers board example input output explanation since added board after billion days only two distinct numbers board constraints

minimum common value given two integer arrays nums nums sorted nondecreasing order return minimum integer common both arrays common integer amongst nums nums return note integer said common nums nums both arrays least one occurrence integer example input nums nums output explanation smallest element common both arrays return example input nums nums output explanation two common elements array out which smallest returned constraints numslength numslength numsi numsj both nums nums sorted nondecreasing order

design memory allocator given integer representing size indexed memory array memory units initially free memory allocator following functionalities allocate block size consecutive free memory units assign mid free memory units given mid note multiple blocks allocated same mid should free memory units mid even they allocated different blocks implement allocator class allocatorint initializes allocator object memory array size int allocateint size int mid find leftmost block size consecutive free memory units allocate mid return blocks first index such block does not exist return int freeint mid free memory units mid return number memory units freed example input allocator allocate allocate allocate free allocate allocate allocate free allocate free output null explanation allocator loc new allocator initialize memory array size memory units initially free locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locfree free memory units mid memory array becomes return since only unit mid locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locfree free memory units mid memory array becomes return since units mid locallocate not find any free block consecutive free memory units return locfree free memory units mid memory array remains same since memory unit mid return constraints size mid most calls made allocate free

number great partitions given array nums consisting positive integers integer partition array two ordered groups such each element exactly one group partition called great sum elements each group greater than equal return number distinct great partitions since answer may too large return modulo two partitions considered distinct some element numsi different groups two partitions example input nums output explanation great partitions example input nums output explanation great partitions array example input nums output explanation either put nums first partition second partition great partitions constraints numslength numsi

maximum number points grid queries given integer matrix grid array queries size find array answer size such each integer queriesi start top left cell matrix repeat following process queriesi strictly greater than value current cell get one point your first time visiting cell move any adjacent cell directions down left otherwise not get any points end process after process answeri maximum number points get note each query allowed visit same cell multiple times return resulting array answer example input grid queries output explanation diagrams above show which cells visit get points each query example input grid queries output explanation not get any points because value top left cell already greater than equal constraints gridlength gridilength querieslength gridij queriesi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

check point reachable exists infinitely large grid currently point need reach point targetx targety using finite number steps one step move point any one following points given two integers targetx targety representing xcoordinate ycoordinate your final position return true reach point using some number steps false otherwise example input targetx targety output false explanation impossible reach using any sequence moves false returned example input targetx targety output true explanation follow path constraints targetx targety

distinct prime factors product array given array positive integers nums return number distinct prime factors product elements nums note number greater than called prime divisible only itself integer val factor another integer val val val integer example input nums output explanation product elements nums distinct prime factors return example input nums output explanation product elements nums distinct prime factor return constraints numslength numsi

find median data stream median middle value ordered integer list size list even middle value median mean two middle values example arr median example arr median implement medianfinder class medianfinder initializes medianfinder object void addnumint num adds integer num data stream data structure double findmedian returns median elements far answers within actual answer accepted example input medianfinder addnum addnum findmedian addnum findmedian output null null null null explanation medianfinder medianfinder new medianfinder medianfinderaddnum arr medianfinderaddnum arr medianfinderfindmedian return medianfinderaddnum arr medianfinderfindmedian return constraints num least one element data structure before calling findmedian most calls made addnum findmedian follow integer numbers stream range how would optimize your solution integer numbers stream range how would optimize your solution

maximal score after applying operations given indexed integer array nums integer starting score one operation choose index such numslength increase your score numsi replace numsi ceilnumsi return maximum possible score attain after applying exactly operations ceiling function ceilval least integer greater than equal val example input nums output explanation apply operation each array element exactly once final score example input nums output explanation following operations operation select nums becomes your score increases operation select nums becomes your score increases operation select nums becomes your score increases final score constraints numslength numsi

difference between element sum digit sum array given positive integer array nums element sum sum elements nums digit sum sum digits not necessarily distinct appear nums return absolute difference between element sum digit sum nums note absolute difference between two integers defined example input nums output explanation element sum nums digit sum nums absolute difference between element sum digit sum example input nums output explanation element sum nums digit sum nums absolute difference between element sum digit sum constraints numslength numsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

number distinct characters equal given two indexed strings word word move consists choosing two indices such wordlength wordlength swapping wordi wordj return true possible get number distinct characters word word equal exactly one move return false otherwise example input word word output false explanation any pair swaps would yield two distinct characters first string one second string example input word abcc word aab output true explanation swap index first string index second string resulting strings word abac word cab which both distinct characters example input word abcde word fghij output true explanation both resulting strings distinct characters regardless which indices swap constraints wordlength wordlength word word consist only lowercase english letters

closest prime numbers range given two positive integers left find two integers num num such left nums nums nums nums both prime numbers nums nums minimum amongst other pairs satisfying above conditions return positive integer array ans nums nums multiple pairs satisfying these conditions return one minimum nums value such numbers not exist number greater than called prime only divisible itself example input left output explanation prime numbers between closest gap between any pair which achieved since smaller than return first pair example input left output explanation exists only one prime number given range conditions cannot satisfied constraints left

maximum subsequence score given two indexed integer arrays nums nums equal length positive integer must choose subsequence indices nums length chosen indices your score defined sum selected elements nums multiplied minimum selected elements nums defined simply numsi numsi numsik minnumsi numsi numsik return maximum possible score subsequence indices array set derived set deleting some elements example input nums nums output explanation four possible subsequence scores choose indices score min choose indices score min choose indices score min choose indices score min return max score which example input nums nums output explanation choosing index optimal nums nums maximum possible score constraints numslength numslength numsi numsj

count anagrams given string containing one more words every consecutive pair words separated single space string anagram string ith word permutation ith word example acb dfe anagram abc def but def cab adc bef not return number distinct anagrams since answer may very large return modulo example input too hot output explanation some anagrams given string too hot oot hot oto toh too toh too oht example input output explanation only one anagram possible given string constraints slength consists lowercase english letters spaces single space between consecutive words

count digits divide number given integer num return number digits num divide num integer val divides nums nums val example input num output explanation divides itself answer example input num output explanation divisible but not since occurs twice digit return example input num output explanation divisible digits answer constraints num num does not contain one digits

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest distance target string circular array given indexed circular string array words string target circular array means arrays end connects arrays beginning formally next element wordsi wordsi previous element wordsi wordsi where length words starting startindex move either next word previous word step time return shortest distance needed reach string target string target does not exist words return example input words helloiamleetcodehello target hello startindex output explanation start index reach hello moving units reach index moving units left reach index moving units reach index moving unit left reach index shortest distance reach hello example input words ableetcode target leetcode startindex output explanation start index reach leetcode moving units reach index moving unit left reach index shortest distance reach leetcode example input words ieatleetcode target ate startindex output explanation since ate does not exist words return constraints wordslength wordsilength wordsi target consist only lowercase english letters startindex wordslength

partition string substrings values most given string consisting digits integer partition string called good each digit part exactly one substring value each substring less than equal return minimum number substrings good partition good partition exists return note value string result when interpreted integer example value value substring contiguous sequence characters within string example input output explanation partition string substrings each substring value less than equal shown cannot partition string less than substrings example input output explanation good partition string constraints slength digit

difference between maximum minimum price sum exists undirected initially unrooted tree nodes indexed given integer integer array edges length where edgesi indicates edge between nodes tree each node associated price given integer array price where pricei price ith node price sum given path sum prices nodes lying path tree rooted any node root your choice incurred cost after choosing root difference between maximum minimum price sum amongst paths starting root return maximum possible cost amongst possible root choices example input edges price output explanation diagram above denotes tree after rooting node first part colored red shows path maximum price sum second part colored blue shows path minimum price sum first path contains nodes prices sum prices second path contains node price difference between maximum minimum price sum proved maximum cost example input edges price output explanation diagram above denotes tree after rooting node first part colored red shows path maximum price sum second part colored blue shows path minimum price sum first path contains nodes prices sum prices second path contains node price difference between maximum minimum price sum proved maximum cost constraints edgeslength edges represents valid tree pricelength pricei

add edges degrees nodes even undirected graph consisting nodes numbered given integer array edges where edgesi indicates edge between nodes graph disconnected add most two additional edges possibly none graph repeated edges selfloops return true possible degree each node graph even otherwise return false degree node number edges connected example input edges output true explanation above diagram shows valid way adding edge every node resulting graph connected even number edges example input edges output true explanation above diagram shows valid way adding two edges example input edges output false explanation not possible obtain valid graph adding most edges constraints edgeslength edgesilength repeated edges

find consecutive integers data stream stream integers implement data structure checks last integers parsed stream equal value implement datastream class datastreamint value int initializes object empty integer stream two integers value boolean consecint num adds num stream integers returns true last integers equal value false otherwise less than integers condition does not hold true returns false example input datastream consec consec consec consec output null false false true false explanation datastream datastream new datastream value datastreamconsec only integer parsed returns false datastreamconsec only integers parsed since less than returns false datastreamconsec integers parsed equal value returns true datastreamconsec last integers parsed stream since not equal value returns false constraints value num most calls made consec

maximize minimum powered city given indexed integer array stations length where stationsi represents number power stations ith city each power station provide power every city fixed range other words range denoted power station city provide power cities such note denotes absolute value example power city total number power stations being provided power government sanctioned building more power stations each which built any city same range preexisting ones given two integers return maximum possible minimum power city additional power stations built optimally note build power stations multiple cities example input stations output explanation one optimal ways install both power stations city stations become city provided power stations city provided power stations city provided power stations city provided power stations city provided power stations minimum power city since not possible obtain larger power return example input stations output explanation proved cannot minimum power city greater than constraints stationslength stationsi

categorize box according criteria given four integers length width height mass representing dimensions mass box respectively return string representing category box box bulky any dimensions box greater equal volume box greater equal mass box greater equal heavy box both bulky heavy category both box neither bulky nor heavy category neither box bulky but not heavy category bulky box heavy but not bulky category heavy note volume box product length width height example input length width height mass output heavy explanation none dimensions box greater equal volume cannot categorized bulky however mass box heavy since box not bulky but heavy return heavy example input length width height mass output neither explanation none dimensions box greater equal volume cannot categorized bulky mass also less than cannot categorized heavy either since neither two above categories return neither constraints length width height mass

count pairs similar strings given indexed string array words two strings similar they consist same characters example abca cba similar since both consist characters however abacba bcfd not similar since they not consist same characters return number pairs such wordlength two strings wordsi wordsj similar example input words abaaabbabcdbacaabc output explanation pairs satisfy conditions both words words only consist characters both words words only consist characters example input words aabbabba output explanation pairs satisfy conditions both words words only consist characters both words words only consist characters both words words only consist characters example input words nbacbadba output explanation since does not exist any pair satisfies conditions return constraints wordslength wordsilength wordsi consist only lowercase english letters

find divisibility array string given indexed string word length consisting digits positive integer divisibility array div word integer array length such divi numeric value wordi divisible divi otherwise return divisibility array word example input word output explanation only prefixes divisible example input word output explanation only prefixes divisible constraints wordlength word consists digits

hindex given array integers citations where citationsi number citations researcher received their ith paper citations sorted ascending order return researchers hindex according definition hindex wikipedia hindex defined maximum value such given researcher published least papers each cited least times must write algorithm runs logarithmic time example input citations output explanation means researcher papers total each them received citations respectively since researcher papers least citations each remaining two more than citations each their hindex example input citations output constraints citationslength citationsi citations sorted ascending order

subsequence minimum score given two strings allowed remove any number characters string score string characters removed string otherwise let left minimum index removed characters let maximum index removed characters score string left return minimum possible score subsequence subsequence string new string formed original string deleting some none characters without disturbing relative positions remaining characters ace subsequence abcde while aec not example input abacaba bzaa output explanation example remove character index indexed string becomes baa which subsequence string abacaba score proven minimum score achieve example input cde xyz output explanation example remove characters indices indexed string becomes which subsequence string cde score proven minimum score achieve constraints slength tlength consist only lowercase english letters

find string lcp define lcp matrix any indexed string word lowercase english letters grid such lcpij equal length longest common prefix between substrings wordin wordjn given matrix lcp return alphabetically smallest string word corresponds lcp such string return empty string string lexicographically smaller than string same length first position where differ string letter appears earlier alphabet than corresponding letter example aabd lexicographically smaller than aaca because first position they differ third letter comes before example input lcp output abab explanation lcp corresponds any letter string two alternating letters lexicographically smallest them abab example input lcp output aaaa explanation lcp corresponds any letter string single distinct letter lexicographically smallest them aaaa example input lcp output explanation lcp cannot equal since word consists only single letter answer exists constraints lcplength lcpilength lcpij

count number possible root nodes alice undirected tree nodes labeled tree represented integer array edges length where edgesi indicates edge between nodes tree alice wants bob find root tree she allows bob several guesses about her tree one guess does following chooses two distinct integers such exists edge tree tells alice parent tree bobs guesses represented integer array guesses where guessesj indicates bob guessed parent alice being lazy does not reply each bobs guesses but says least his guesses true given integer arrays edges guesses integer return number possible nodes root alices tree such tree return example input edges guesses output explanation root correct guesses root correct guesses root correct guesses root correct guesses root correct guesses considering root node leads correct guesses example input edges guesses output explanation root correct guesses root correct guesses root correct guesses root correct guesses root correct guesses considering any node root give least correct guess constraints edgeslength guesseslength edges represents valid tree guessesj edge tree guesses unique guesseslength

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

count number squarefree subsets given positive integer indexed array nums subset array nums squarefree product elements squarefree integer squarefree integer integer divisible square number other than return number squarefree nonempty subsets array nums since answer may too large return modulo nonempty subset nums array obtained deleting some possibly none but not elements nums two subsets different only chosen indices delete different example input nums output explanation squarefree subsets example subset consisting element product elements which squarefree integer subset consisting element product elements which squarefree integer subset consisting elements product elements which squarefree integer proven more than squarefree subsets given array example input nums output explanation squarefree subset example subset consisting element product elements which squarefree integer proven more than squarefree subset given array constraints numslength numsi

count number vowel strings range given indexed array string words two integers left string called vowel string starts vowel character ends vowel character where vowel characters return number vowel strings wordsi where belongs inclusive range left example input words areamyu left output explanation vowel string because starts ends amy not vowel string because does not end vowel vowel string because starts ends number vowel strings mentioned range example input words heyaeomuoooartro left output explanation aeo vowel string because starts ends not vowel string because does not start vowel ooo vowel string because starts ends artro vowel string because starts ends number vowel strings mentioned range constraints wordslength wordsilength wordsi consists only lowercase english letters left wordslength

disconnect path binary matrix most one flip given indexed binary matrix grid move cell row col any cells row col row col value matrix disconnected path flip value most one possibly none cell cannot flip cells return true possible matrix disconnect false otherwise note flipping cell changes value example input grid output true explanation change cell shown diagram above path resulting grid example input grid output false explanation not possible change most one cell such not path constraints gridlength gridilength gridij either grid gridm

separate digits array given array positive integers nums return array answer consists digits each integer nums after separating them same order they appear nums separate digits integer get digits same order example integer separation digits example input nums output explanation separation separation separation separation answer note answer contains separations same order example input nums output explanation separation each integer nums itself answer constraints numslength numsi

maximize greatness array given indexed integer array nums allowed permute nums new array perm your choosing define greatness nums number indices numslength which permi numsi return maximum possible greatness achieve after permuting nums example input nums output explanation one optimal rearrangements perm indices permi numsi return example input nums output explanation prove optimal perm indices permi numsi return constraints numslength numsi

minimum impossible given indexed integer array nums say integer expressible nums exist some integers index index indexk numslength which numsindex numsindex numsindexk other words integer expressible written bitwise some subsequence nums return minimum positive nonzero integer not expressible nums example input nums output explanation already present array know expressible since nums nums since not expressible return example input nums output explanation show smallest number not expressible constraints numslength numsi

longest valid parentheses given string containing characters return length longest valid wellformed parentheses substring example input output explanation longest valid parentheses substring example input output explanation longest valid parentheses substring example input output constraints slength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

merge two arrays summing values given two integer arrays nums nums numsi idi vali indicate number idi value equal vali numsi idi vali indicate number idi value equal vali each array contains unique ids sorted ascending order merge two arrays one array sorted ascending order respecting following conditions only ids appear least one two arrays should included resulting array each should included only once value should sum values two arrays does not exist one two arrays value array considered return resulting array returned array must sorted ascending order example input nums nums output explanation resulting array contains following value value value value example input nums nums output explanation common ids include each value resulting list constraints numslength numslength numsilength numsjlength idi vali both arrays contain unique ids both arrays strictly ascending order

find array concatenation value given indexed integer array nums concatenation two numbers number formed concatenating their numerals example concatenation concatenation value nums initially equal perform operation nums becomes empty exists more than one number nums pick first element last element nums respectively add value their concatenation concatenation value nums delete first last element nums one element exists add value concatenation value nums delete return concatenation value nums example input nums output explanation before performing any operation nums concatenation value first operation pick first element last element their concatenation add concatenation value becomes equal delete them nums nums becomes equal second operation pick first element last element their concatenation add concatenation value becomes equal delete them nums nums becomes empty since concatenation value answer example input nums output explanation before performing any operation nums concatenation value first operation pick first element last element their concatenation add concatenation value becomes equal delete them nums nums becomes equal second operation pick first element last element their concatenation add concatenation value becomes equal delete them nums nums becomes equal third operation nums only one element pick add concatenation value becomes equal delete nums nums become empty since concatenation value answer constraints numslength numsi

rearrange array maximize prefix score given indexed integer array nums rearrange elements nums any order given order let prefix array containing prefix sums nums after rearranging other words prefixi sum elements nums after rearranging score nums number positive integers array prefix return maximum score achieve example input nums output explanation rearrange array nums prefix score shown maximum score obtain example input nums output explanation any rearrangement array result score constraints numslength numsi

minimum time complete tasks computer run unlimited number tasks same time given integer array tasks where tasksi starti endi durationi indicates ith task should run total durationi seconds not necessarily continuous within inclusive time range starti endi may turn computer only when needs run task also turn off idle return minimum time which computer should turned complete tasks example input tasks output explanation first task run inclusive time range second task run inclusive time range third task run two inclusive time ranges computer total seconds example input tasks output explanation first task run inclusive time range second task run inclusive time ranges third task run two inclusive time range computer total seconds constraints taskslength tasksilength starti endi durationi endi starti

check knight tour configuration knight chessboard valid configuration knight starts topleft cell board visits every cell board exactly once given integer matrix grid consisting distinct integers range where gridrowcol indicates cell row col gridrowcolth cell knight visited moves indexed return true grid represents valid configuration knights movements false otherwise note valid knight move consists moving two squares vertically one square horizontally two squares horizontally one square vertically figure below illustrates possible eight moves knight some cell example input grid output true explanation above diagram represents grid shown valid configuration example input grid output false explanation above diagram represents grid move knight not valid considering position after move constraints gridlength gridilength gridrowcol integers grid unique

find score array after marking elements given array nums consisting positive integers starting score apply following algorithm choose smallest integer array not marked tie choose one smallest index add value chosen integer score mark chosen element two adjacent elements they exist repeat array elements marked return score get after applying above algorithm example input nums output explanation mark elements follows smallest unmarked element mark two adjacent elements smallest unmarked element mark left adjacent element only remaining unmarked element mark our score example input nums output explanation mark elements follows smallest unmarked element mark two adjacent elements smallest unmarked element since two them choose leftmost one mark one index adjacent element only remaining unmarked element mark our score constraints numslength numsi

minimum time visit cell grid given matrix grid consisting nonnegative integers where gridrowcol represents minimum time required able visit cell row col which means visit cell row col only when time visit greater than equal gridrowcol standing topleft cell matrix second must move any adjacent cell four directions down left each move takes second return minimum time required which visit bottomright cell matrix cannot visit bottomright cell return example input grid output explanation one paths take following cell move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid final time shown minimum time possible example input grid output explanation path top left bottomright cell constraints gridlength gridilength gridij grid

maximum number integers choose range given integer array banned two integers maxsum choosing some number integers following below rules chosen integers range each integer chosen most once chosen integers should not array banned sum chosen integers should not exceed maxsum return maximum number integers choose following mentioned rules example input banned maxsum output explanation choose integers range both did not appear banned their sum which did not exceed maxsum example input banned maxsum output explanation cannot choose any integer while following mentioned conditions example input banned maxsum output explanation choose integers they range did not appear banned their sum which did not exceed maxsum constraints bannedlength bannedi maxsum

minimum operations reduce integer given positive integer following operation any number times add subtract power return minimum number operations equal number power where example input output explanation following operations add subtract subtract shown minimum number operations need equal example input output explanation following operations add add subtract minimum number operations constraints

maximize win two segments some prizes xaxis given integer array prizepositions sorted nondecreasing order where prizepositionsi position ith prize could different prizes same position line also given integer allowed select two segments integer endpoints length each segment must collect prizes whose position falls within least one two selected segments endpoints segments two selected segments may intersect example choose segments win any prize satisfies prizepositionsi prizepositionsi return maximum number prizes win choose two segments optimally example input prizepositions output explanation example win prizes selecting two segments example input prizepositions output explanation example one choice segments able get prizes constraints prizepositionslength prizepositionsi prizepositions sorted nondecreasing order

bulls cows playing bulls cows game your friend write down secret number ask your friend guess what number when your friend makes guess provide hint following info number bulls which digits guess correct position number cows which digits guess your secret number but located wrong position specifically nonbull digits guess could rearranged such they become bulls given secret number secret your friends guess guess return hint your friends guess hint should formatted xayb where number bulls number cows note both secret guess may contain duplicate digits example input secret guess output explanation bulls connected cows underlined example input secret guess output explanation bulls connected cows underlined note only one two unmatched counted cow since nonbull digits only rearranged allow one bull constraints secretlength guesslength secretlength guesslength secret guess consist digits only

house robber several consecutive houses along street each which some money inside also robber who wants steal money homes but refuses steal adjacent homes capability robber maximum amount money steals one house houses robbed given integer array nums representing how much money stashed each house more formally ith house left numsi dollars also given integer representing minimum number houses robber steal always possible steal least houses return minimum capability robber out possible ways steal least houses example input nums output explanation three ways rob least houses rob houses indices capability maxnums nums rob houses indices capability maxnums nums rob houses indices capability maxnums nums return min example input nums output explanation ways rob houses way which leads minimum capability rob house index return maxnums nums constraints numslength numsi numslength

number beautiful subsets given array nums positive integers positive integer subset nums beautiful does not contain two integers absolute difference equal return number nonempty beautiful subsets array nums subset nums array obtained deleting some possibly none elements nums two subsets different only chosen indices delete different example input nums output explanation beautiful subsets array nums proved only beautiful subsets array example input nums output explanation beautiful subset array nums proved only beautiful subset array constraints numslength numsi

count number fair pairs given indexed integer array nums size two integers lower upper return number fair pairs pair fair lower numsi numsj upper example input nums lower upper output explanation fair pairs example input nums lower upper output explanation single fair pair constraints numslength numslength numsi lower upper

rearranging fruits two fruit baskets containing fruits each given two indexed integer arrays basket basket representing cost fruit each basket want both baskets equal use following operation many times want chose two indices swap ith fruit basket jth fruit basket cost swap minbasketibasketj two baskets considered equal sorting them according fruit cost makes them exactly same baskets return minimum cost both baskets equal impossible example input basket basket output explanation swap index basket index basket which cost basket basket rearranging both arrays makes them equal example input basket basket output explanation shown impossible both baskets equal constraints basketlength bakstelength basketlength basketibasketi

pass pillow people standing line labeled first person line holding pillow initially every second person holding pillow passes next person standing line once pillow reaches end line direction changes people continue passing pillow opposite direction example once pillow reaches nth person they pass person person given two positive integers time return index person holding pillow after time seconds example input time output explanation people pass pillow following way afer five seconds pillow given person example input time output explanation people pass pillow following way afer two seconds pillow given person constraints time

maximum difference remapping digit given integer num know danny mittal sneakily remap one possible digits another digit return difference between maximum minimum values danny remapping exactly one digit num notes when danny remaps digit another digit danny replaces occurrences num danny remap digit itself which case num does not change danny remap different digits obtaining minimum maximum values respectively resulting number after remapping contain leading zeroes mentioned danny mittal congratulate him being top weekly contest example input num output explanation achieve maximum value danny remap digit digit yield achieve minimum value danny remap digit digit yielding difference between these two numbers example input num output explanation maximum value returned function replaced minimum value returned function replaced return constraints num

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum time repair cars given integer array ranks representing ranks some mechanics ranksi rank ith mechanic mechanic rank repair cars minutes also given integer cars representing total number cars waiting garage repaired return minimum time taken repair cars note mechanics repair cars simultaneously example input ranks cars output explanation first mechanic repair two cars time required minutes second mechanic repair two cars time required minutes third mechanic repair two cars time required minutes fourth mechanic repair four cars time required minutes proved cars cannot repaired less than minutes example input ranks cars output explanation first mechanic repair one car time required minutes second mechanic repair four cars time required minutes third mechanic repair one car time required minutes proved cars cannot repaired less than minutes constraints rankslength ranksi cars

handling sum queries after update given two indexed arrays nums nums array queries queries three types queries query type queriesi flip values nums index index both indexed query type queriesi every index set numsi numsi numsi query type queriesi find sum elements nums return array containing answers third type queries example input nums nums queries output explanation after first query nums becomes after second query nums becomes answer third query returned example input nums nums queries output explanation after first query nums remains answer second query returned constraints numslengthnumslength numslength numslength querieslength queriesilength numslength numsi numsi

count ways group overlapping ranges given integer array ranges where rangesi starti endi denotes integers between starti endi both inclusive contained ith range split ranges two possibly empty groups such each range belongs exactly one group any two overlapping ranges must belong same group two ranges said overlapping exists least one integer present both ranges example overlapping because occur both ranges return total number ways split ranges two groups since answer may very large return modulo example input ranges output explanation two ranges overlapping they must same group two possible ways put both ranges together group put both ranges together group example input ranges output explanation ranges overlapping they must same group again ranges also overlapping they must also same group four possible ways group them ranges group ranges group ranges group group ranges group group constraints rangeslength rangesilength starti endi

serialize deserialize binary tree serialization process converting data structure object sequence bits stored file memory buffer transmitted across network connection link reconstructed later same another computer environment design algorithm serialize deserialize binary tree restriction how your serializationdeserialization algorithm should work need ensure binary tree serialized string string deserialized original tree structure clarification inputoutput format same how leetcode serializes binary tree not necessarily need follow format please creative come different approaches yourself example input root nullnull output nullnull example input root output constraints number nodes tree range nodeval

kth largest sum binary tree given root binary tree positive integer level sum tree sum values nodes same level return kth largest level sum tree not necessarily distinct fewer than levels tree return note two nodes same level they same distance root example input root output explanation level sums following level level level level largest level sum example input root null output explanation largest level sum constraints number nodes tree nodeval

items maximum sum bag consists items each item number written given four nonnegative integers numones numzeros numnegones bag initially contains numones items written them numzeroes items written them numnegones items written them want pick exactly items available items return maximum possible sum numbers written items example input numones numzeros numnegones output explanation bag items numbers written them take items written them get sum total proven maximum possible sum example input numones numzeros numnegones output explanation bag items numbers written them take items written them item written get sum total proven maximum possible sum constraints numones numzeros numnegones numones numzeros numnegones

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

find maximum number marked indices given indexed integer array nums initially indices unmarked allowed operation any number times pick two different unmarked indices such numsi numsj mark return maximum possible number marked indices nums using above operation any number times example input nums output explanation first operation pick operation allowed because nums nums mark index shown theres other valid operation answer example input nums output explanation first operation pick operation allowed because nums nums mark index second operation pick operation allowed because nums nums mark index since other operation answer example input nums output explanation valid operation answer constraints numslength numsi

number ways earn points test types questions given integer target indexed integer array types where typesi counti marksi indicates counti questions ith type each one them worth marksi points return number ways earn exactly target points exam since answer may too large return modulo note questions same type indistinguishable example questions same type solving questions same solving questions questions example input target types output explanation earn points one seven ways solve questions type solve questions type question type solve questions type questions type solve questions type question type solve question type question type question type solve questions type solve questions type example input target types output explanation earn points one four ways solve questions type solve questions type question type solve questions type questions type solve question type example input target types output explanation only earn points answering questions constraints target typeslength typesilength counti marksi

number even odd bits given positive integer let even denote number even indices binary representation indexed value let odd denote number odd indices binary representation indexed value return integer array answer where answer even odd example input output explanation binary representation contains indices even odd indices example input output explanation binary representation contains index even odd indices constraints

smallest missing nonnegative integer after operations given indexed integer array nums integer value one operation add subtract value any element nums example nums value choose subtract value nums nums mex minimum excluded array smallest missing nonnegative integer example mex while mex return maximum mex nums after applying mentioned operation any number times example input nums value output explanation one achieve result applying following operations add value nums twice nums subtract value nums once nums subtract value nums twice nums mex nums shown maximum mex achieve example input nums value output explanation one achieve result applying following operation subtract value nums once nums mex nums shown maximum mex achieve constraints numslength value numsi

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

left sum differences given indexed integer array nums find indexed integer array answer where answerlength numslength answeri leftsumi rightsumi where leftsumi sum elements left index array nums such element leftsumi rightsumi sum elements index array nums such element rightsumi return array answer example input nums output explanation array leftsum array rightsum array answer example input nums output explanation array leftsum array rightsum array answer constraints numslength numsi

split minimum sum given positive integer num split two nonnegative integers num num such concatenation num num permutation num other words sum number occurrences each digit num num equal number occurrences digit num num num contain leading zeros return minimum possible sum num num notes guaranteed num does not contain any leading zeros order occurrence digits num num may differ order occurrence num example input num output explanation split num num giving sum prove indeed minimal possible sum example input num output explanation split num num which would give optimal sum constraints num

missing number given array nums containing distinct numbers range return only number range missing array example input nums output explanation since numbers numbers range missing number range since does not appear nums example input nums output explanation since numbers numbers range missing number range since does not appear nums example input nums output explanation since numbers numbers range missing number range since does not appear nums constraints numslength numsi numbers nums unique follow could implement solution using only extra space complexity runtime complexity

distribute money maximum children given integer money denoting amount money dollars another integer children denoting number children must distribute money distribute money according following rules money must distributed everyone must receive least dollar nobody receives dollars return maximum number children who may receive exactly dollars distribute money according aforementioned rules way distribute money return example input money children output explanation maximum number children dollars one ways distribute money dollars first child dollars second child dollars third child proven distribution exists such number children getting dollars greater than example input money children output explanation each child given dollars constraints money children

minimum score changing two elements given indexed integer array nums low score nums minimum value numsi numsj over numslength high score nums maximum value numsi numsj over numslength score nums sum high low scores nums minimize score nums change value most two elements nums return minimum possible score after changing value most two elements nums note denotes absolute value example input nums output explanation change value nums nums nums becomes value numsi numsj always equal return example input nums output explanation change nums nums nums becomes our low score achieved when which case numsi numsj our high score achieved when which case numsi numsj sum our high low score which prove minimal constraints numslength numsi

count total number colored cells exists infinitely large twodimensional grid uncolored unit cells given positive integer indicating must following routine minutes first minute color any arbitrary unit cell blue every minute thereafter color blue every uncolored cell touches blue cell below pictorial representation state grid after minutes return number colored cells end minutes example input output explanation after minute only blue cell return example input output explanation after minutes colored cells boundary center return constraints

count increasing quadruplets given indexed integer array nums size containing numbers return number increasing quadruplets quadruplet increasing numsi numsk numsj numsl example input nums output explanation when numsi numsk numsj numsl when numsi numsk numsj numsl other quadruplets return example input nums output explanation exists only one quadruplet but since numsj numsk return constraints numslength numsi numslength integers nums unique nums permutation

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

put marbles bags bags given indexed integer array weights where weightsi weight ith marble also given integer divide marbles bags according following rules bag empty ith marble jth marble bag marbles index between ith jth indices should also same bag bag consists marbles index inclusively cost bag weightsi weightsj score after distributing marbles sum costs bags return difference between maximum minimum scores marble distributions example input weights output explanation distribution results minimal score distribution results maximal score return their difference example input weights output explanation only distribution possible since both maximal minimal score same return constraints weightslength weightsi

count vowel strings ranges given indexed array strings words array integers queries each query queriesi asks find number strings present range both inclusive words start end vowel return array ans size querieslength where ansi answer ith query note vowel letters example input words ababcbeceaae queries output explanation strings starting ending vowel aba ece answer query strings aba ece query strings ece query return example input words aei queries output explanation every string satisfies conditions return constraints wordslength wordsilength wordsi consists only lowercase english letters sumwordsilength querieslength wordslength

split array coprime products given indexed integer array nums length split index where called valid product first elements product remaining elements coprime example nums split index valid because coprime while split index not valid because not coprime split index not valid because return smallest index which array split validly such split two values val val coprime gcdval val where gcdval val greatest common divisor val val example input nums output explanation table above shows values product first elements remaining elements their gcd each index only valid split index example input nums output explanation table above shows values product first elements remaining elements their gcd each index valid split constraints numslength numsi

count number beautiful subarrays given indexed integer array nums one operation choose two different indices such numslength choose nonnegative integer such kth bit indexed binary representation numsi numsj subtract numsi numsj subarray beautiful possible elements equal after applying above operation any number times return number beautiful subarrays array nums subarray contiguous nonempty sequence elements within array example input nums output explanation beautiful subarrays nums elements subarray equal following way choose subtract both numbers subarray becomes choose subtract both numbers subarray becomes elements subarray equal following way choose subtract both numbers subarray becomes choose subtract both numbers subarray becomes choose subtract both numbers subarray becomes example input nums output explanation beautiful subarrays nums constraints numslength numsi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

take gifts richest pile given integer array gifts denoting number gifts various piles every second following choose pile maximum number gifts more than one pile maximum number gifts choose any leave behind floor square root number gifts pile take rest gifts return number gifts remaining after seconds example input gifts output explanation gifts taken following way first second last pile chosen gifts left behind second pile chosen gifts left behind after first pile chosen gifts left behind finally last pile chosen again gifts left behind final remaining gifts total number gifts remaining example input gifts output explanation case regardless which pile choose leave behind gift each pile cant take any pile total gifts remaining constraints giftslength giftsi

substring xor queries given binary string integer array queries where queriesi firsti secondi ith query find shortest substring whose decimal value val yields secondi when bitwise xored firsti other words val firsti secondi answer ith query endpoints indexed substring lefti righti such substring exists multiple answers choose one minimum lefti return array ans where ansi lefti righti answer ith query substring contiguous nonempty sequence characters within string example input queries output explanation first query substring range which decimal value answer first query second query substring range decimal value returned second query example input queries output explanation example substring answers query returned example input queries output explanation example substring range decimal value answer constraints slength either querieslength firsti secondi

filter elements array given integer array arr filtering function return new array fewer equal number elements returned array should only contain elements where fnarri evaluated truthy value please solve without builtin arrayfilter method example input arr function greaterthann return output explanation const newarray filterarr function filters out values not greater than example input arr function firstindexn return output explanation also accept index each element case function removes elements not index example input arr function plusonen return output explanation falsey values such should filtered out constraints arrlength arri

convert array array conditions given integer array nums need create array nums satisfying following conditions array should contain only elements array nums each row array contains distinct integers number rows array should minimal return resulting array multiple answers return any them note array different number elements each row example input nums output explanation create array contains following rows elements nums used each row array contains distinct integers valid answer shown cannot less than rows valid array example input nums output explanation elements array distinct keep them first row array constraints numslength numsi numslength

minimize maximum difference pairs given indexed integer array nums integer find pairs indices nums such maximum difference amongst pairs minimized also ensure index appears more than once amongst pairs note pair elements index difference pair numsi numsj where represents absolute value return minimum maximum difference pairs define maximum empty set zero example input nums output explanation first pair formed indices second pair formed indices maximum difference maxnums nums nums nums max return example input nums output explanation let indices form pair difference pair which minimum attain constraints numslength numsi numslength

function composition given array functions return new function function composition array functions function composition fnx fghx function composition empty list functions identity function may assume each function array accepts one integer input returns one integer output example input functions output explanation evaluating left starting example input functions output explanation evaluating left example input functions output explanation composition zero functions identity function constraints functionslength functions accept return single integer

minimum number visited cells grid given indexed integer matrix grid your initial position topleft cell starting cell move one following cells cells gridij rightward movement cells gridij downward movement return minimum number cells need visit reach bottomright cell valid path return example input grid output explanation image above shows one paths visits exactly cells example input grid output explanation image above shows one paths visits exactly cells example input grid output explanation proven path exists constraints gridlength gridilength gridij gridm

ksubarray sums equal given indexed integer array arr integer array arr circular other words first element array next element last element last element array previous element first element following operation any number times pick any element arr increase decrease return minimum number operations such sum each subarray length equal subarray contiguous part array example input arr output explanation one operation index value equal array after operation subarray starts index sum subarray starts index sum subarray starts index sum subarray starts index sum example input arr output explanation three operations index value equal two operations index value equal array after operations subarray starts index sum subarray starts index sum subarray starts index sum subarray starts index sum constraints arrlength arri

find maximum divisibility score given two indexed integer arrays nums divisors divisibility score divisorsi number indices such numsj divisible divisorsi return integer divisorsi maximum divisibility score more than one integer maximum score return minimum them example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since number nums divisible divisibility score divisors since nums divisible divisibility score divisors since nums nums nums divisible since divisors maximum divisibility score return example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since nums nums divisible divisibility score divisors since nums nums divisible divisibility score divisors since nums nums divisible since divisors divisors divisors maximum divisibility score return minimum them divisors example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since number nums divisible divisibility score divisors since number nums divisible since divisors divisors both maximum divisibility score return minimum them divisors constraints numslength divisorslength numsi divisorsi

minimum reverse operations given integer integer range representing indexed array arr length where positions set except position which set also given integer array banned containing some positions array ith position banned arrbannedi bannedi perform multiple operations arr operation choose subarray size reverse subarray however arr should never any positions banned other words after each operation arrbannedi remains return array ans where each ansi minimum number reverse operations needed bring position arr impossible subarray contiguous nonempty sequence elements within array values ansi independent reverse array array containing values reverse order example input banned output explanation case only one possible reverse operation perform which reversing whole array initially placed position amount operations need position never place banned positions answer positions finally one reverse operation bring index answer position example input banned output explanation case initially position answer position perform reverse operations size currently located position need reverse subarray leave position but reversing subarray makes position which shouldnt happen cant move position making result other positions example input banned output explanation case only perform reverse operations size never changes position constraints bannedlength bannedi bannedi values banned unique

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

design graph shortest path calculator directed weighted graph consists nodes numbered edges graph initially represented given array edges where edgesi fromi toi edgecosti meaning edge fromi toi cost edgecosti implement graph class graphint int edges initializes object nodes given edges addedgeint edge adds edge list edges where edge edgecost guaranteed edge between two nodes before adding one int shortestpathint node int node returns minimum cost path node node path exists return cost path sum costs edges path example input graph shortestpath shortestpath addedge shortestpath output null null explanation graph new graph gshortestpath return shortest path first diagram above total cost gshortestpath return path gaddedge add edge node node get second diagram above gshortestpath return shortest path total cost constraints edgeslength edgesilength edgelength fromi toi node node edgecosti edgecost repeated edges selfloops graph any point most calls made addedge most calls made shortestpath

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

minimum additions valid string given string word which insert letters anywhere any number times return minimum number letters must inserted word becomes valid string called valid formed concatenating string abc several times example input word output explanation insert letter before letter next obtain valid string abc example input word aaa output explanation insert letters next each obtain valid string abcabcabc example input word abc output explanation word already valid modifications needed constraints wordlength word consists letters only

cache time limit write class allows getting setting keyvalue pairs however time expiration associated each key class three public methods setkey value duration accepts integer key integer value duration milliseconds once duration elapsed key should inaccessible method should return true same unexpired key already exists false otherwise both value duration should overwritten key already exists getkey unexpired key exists should return associated value otherwise should return count returns count unexpired keys example input timelimitedcache set get count get output null false explanation cache constructed keyvalue pair added time limit value doesnt exist false returned key requested value returned count called one active key cache key expires get called but returned because cache empty example input timelimitedcache set set get get get count output null false true explanation cache constructed keyvalue pair added time limit value doesnt exist false returned keyvalue pair added time limit nonexpired value already existed true returned old value overwritten get called which returned get called which returned key expires get called but cache empty returned count returns because cache empty constraints key value duration total method calls not exceed

debounce given function time milliseconds return debounced version function debounced function function whose execution delayed milliseconds whose execution cancelled called again within window time debounced function should also recieve passed parameters example lets say function called first function calls would cancelled function call would executed instead call would cancelled would executed would executed above diagram shows how debounce transform events each rectangle represents debounce time each color represents different set inputs please solve without using lodashs debounce function example input calls inputs inputs output inputs explanation let start datenow function loginputs consolelogdatenow start inputs const dlog debouncelog settimeout dlog settimeout dlog call cancelled call because call occurred before call delayed executed inputs example input calls inputs inputs output inputs inputs explanation call delayed inputs call delayed inputs example input calls inputs inputs inputs output inputs inputs explanation call delayed ran inputs call cancelled call call delayed ran inputs constraints callslength callsit callsiinputslength

array prototype last write code enhances arrays such call arraylast method any array return last element elements array should return example input nums output explanation calling numslast should return last element example input nums output explanation because elements return constraints arrlength arri

sum distances given indexed integer array nums exists array arr length numslength where arri sum over such numsj numsi such set arri return array arr example input nums output explanation when nums nums nums nums arr when arr because other index value when nums nums nums nums arr when nums nums nums nums arr when arr because other index value example input nums output explanation since each element nums distinct arri constraints numslength numsi

convert object json string given object return valid json string object may assume object only includes strings integers arrays objects booleans null returned string should not include extra spaces order keys should same order returned objectkeys please solve without using builtin jsonstringify method example input object output explanation return json representation note order keys should same order returned objectkeys example input object astrbctruednull output astrbctruednull explanation primitives json strings numbers booleans null example input object keyabnullhello output keyabnullhello explanation objects arrays include other objects arrays example input object true output true explanation primitive types valid inputs constraints object includes strings integers booleans arrays objects null jsonstringifyobjectlength maxnestinglevel strings only contain alphanumeric characters

array reduce transformation given integer array nums reducer function initial value init return reduced array reduced array created applying following operation val fninit nums val fnval nums val fnval nums every element array processed final value val returned length array should return init please solve without using builtin arrayreduce method example input nums function sumaccum curr return accum curr init output explanation initially value init nums nums nums nums final answer example input nums function sumaccum curr return accum curr curr init output explanation initially value init nums nums nums nums final answer example input nums function sumaccum curr return init output explanation empty arrays answer always init constraints numslength numsi init

group write code enhances arrays such call arraygroupbyfn method any array return grouped version array grouped array object where each key output fnarri each value array containing items original array key provided callback accept item array return string key order each value list should order items appear array any order keys acceptable please solve without lodashs groupby function example input array function item return itemid output explanation output arraygroupbyfn selector function gets out each item array two objects both those objects put first array one object object put second array example input array function list return stringlist output explanation array any type case selector function defines key being first element array arrays their first element they grouped together example input array function return stringn output true false explanation selector function splits array whether each number greater than constraints arraylength returns string

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

promise pool given array asynchronous functions functions pool limit return asynchronous function promisepool should return promise resolves when input functions resolve pool limit defined maximum number promises pending once promisepool should begin execution many functions possible continue executing new functions when old promises resolve promisepool should execute functionsi functionsi functionsi etc when last promise resolves promisepool should also resolve example promisepool execute one function time series however first executes two functions when either two functions resolve function should executed available functions left execute assume functions never reject acceptable promisepool return promise resolves any value example input functions new promiseres settimeoutres new promiseres settimeoutres new promiseres settimeoutres output explanation three functions passed they sleep respectively they resolve respectively returned promise resolves first functions executed pool size limit reached function resolves function executed pool size function resolves nothing left execute pool size function resolves pool size zero returned promise also resolves example input functions new promiseres settimeoutres new promiseres settimeoutres new promiseres settimeoutres output explanation three input promises resolve respectively returned promise resolves functions executed pool limit never met function resolves pool size function resolved pool size function resolves pool size returned promise also resolves example input functions new promiseres settimeoutres new promiseres settimeoutres new promiseres settimeoutres output explanation three input promises resolve respectively returned promise resolves function executed pool size function resolves function executed pool size function resolves function executed pool size function resolves pool size returned promise resolves constraints functionslength

row maximum ones given binary matrix mat find indexed position row contains maximum count ones number ones row case multiple rows maximum count ones row smallest row number should selected return array containing index row number ones example input mat output explanation both rows same number return index smaller row maximum count ones answer example input mat output explanation row indexed maximum count ones return index count answer example input mat output explanation row indexed maximum count ones answer constraints matlength matilength matij either

generate fibonacci sequence write generator function returns generator object which yields fibonacci sequence fibonacci sequence defined relation first few numbers series example input callcount output explanation const gen fibgenerator gennextvalue gennextvalue gennextvalue gennextvalue gennextvalue example input callcount output explanation gennext never called nothing outputted constraints callcount

cousins binary tree given root binary tree replace value each node tree sum cousins values two nodes binary tree cousins they same depth different parents return root modified tree note depth node number edges path root node example input root null output null explanation diagram above shows initial binary tree binary tree after changing value each node node value does not any cousins sum node value does not any cousins sum node value does not any cousins sum node value cousin value sum node value cousin value sum node value cousins values sum example input root output explanation diagram above shows initial binary tree binary tree after changing value each node node value does not any cousins sum node value does not any cousins sum node value does not any cousins sum constraints number nodes tree range nodeval

shortest cycle graph bidirectional graph vertices where each vertex labeled edges graph represented given integer array edges where edgesi denotes edge between vertex vertex every vertex pair connected most one edge vertex edge itself return length shortest cycle graph cycle exists return cycle path starts ends same node each edge path used only once example input edges output explanation cycle smallest length example input edges output explanation cycles graph constraints edgeslength edgesilength repeated edges

counter given integer return counter function counter function initially returns returns more than previous value every subsequent time called etc example input callcallcall output explanation counter first time counter called returns counter returns more than previous time counter returns more than previous time example input callcallcallcallcall output explanation counter initially returns increases after each sebsequent call constraints most calls counter made

prime diagonal given indexed twodimensional integer array nums return largest prime number lies least one diagonals nums case prime present any diagonals return note integer prime greater than positive integer divisors other than itself integer val one diagonals nums exists integer which numsii val which numsinumslength val above diagram one diagonal another diagonal example input nums output explanation numbers only numbers present least one diagonals since largest prime return example input nums output explanation numbers present least one diagonals largest prime return constraints numslength numslength numsilength numsij

memoize given function return memoized version function memoized function function never called twice same inputs instead return cached value assume possible input functions sum fib factorial sum accepts two integers returns fib accepts single integer returns fibn fibn otherwise factorial accepts single integer returns factorialn otherwise example input sum callcallgetcallcountcallgetcallcount output explanation const sum const memoizedsum memoizesum memoizedsum returns sum called not seen before memoizedsum returns however sum not called because same inputs seen before total call count memoizedsum returns sum called not seen before total call count example input factorial callcallcallgetcallcountcallgetcallcount output explanation const factorial factorialn const memofactorial memoizefactorial memofactorial returns memofactorial returns memofactorial returns however factorial not called because seen before total call count memofactorial returns however factorial not called because seen before total call count example input fib callgetcallcount output explanation fib total call count constraints most function calls most attempts access callcount input function sum fib factorial

prime subtraction operation given indexed integer array nums length perform following operation many times want pick index haven’t picked before pick prime strictly less than numsi subtract numsi return true nums strictly increasing array using above operation false otherwise strictly increasing array array whose each element strictly greater than preceding element example input nums output true explanation first operation pick subtract nums nums becomes second operation subtract nums nums becomes equal after second operation nums sorted strictly increasing order answer true example input nums output true explanation initially nums sorted strictly increasing order dont need any operations example input nums output false explanation proven way perform operations nums sorted strictly increasing order answer false constraints numslength numsi numslength

flatten deeply nested array given multidimensional array arr depth return flattened version array multidimensional array recursive data structure contains integers other multidimensional arrays flattened array version array some subarrays removed replaced actual elements subarray flattening operation should only done current depth nesting less than depth elements first array considered please solve without builtin arrayflat method example input arr output explanation passing depth always result original array because smallest possible depth subarray not less than subarray should flattened example input arr output explanation subarrays starting flattened because their depth less than however remains unflattened because depth example input arr output explanation maximum depth any subarray them flattened constraints count numbers arr count subarrays arr maxdepth each number

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

curry given function return curried version function curried function function accepts fewer equal number parameters original function returns either another curried function same value original function would returned practical terms called original function sum would call curried version csum csum csum csum these methods calling curried function should return same value original example input function suma return inputs output explanation code being executed const curriedsum curryfn curriedsum curriedsum should return same value sum example input function suma return inputs output explanation curriedsum should return same value sum example input function suma return inputs output explanation should able pass parameters any way once none curriedsum should return same value sum example input function life return inputs output explanation currying function accepts zero parameters should effectively nothing curriedlife constraints inputslength inputsij fnlength inputsflatlength fnlength function parameters explicitly defined

json deep equal given two objects check they deeply equal two objects deeply equal they must contain same keys associated values must also deeply equal two objects also considered deeply equal they pass equality check may assume both objects output jsonparse other words they valid json please solve without using lodashs isequal function example input output true explanation keys values match exactly example input output true explanation although keys different order they match exactly example input xnulll xnulll output false explanation array numbers different array strings example input true false output false explanation true false constraints jsonstringifyolength jsonstringifyolength maxnestingdepth

design cancellable function sometimes long running task may wish cancel before completes help goal write function cancellable accepts generator object returns array two values cancel function promise may assume generator function only yield promises your functions responsibility pass values resolved promise back generator promise rejects your function should throw error back generator cancel callback called before generator done your function should throw error back generator error should string cancelled not error object error caught returned promise should resolve next value yielded returned otherwise promise should reject thrown error more code should executed when generator done promise your function returned should resolve value generator returned however generator throws error returned promise should reject error example how your code would used function tasks const val yield new promiseresolve resolve yield new promiseresolve settimeoutresolve return val calculation shouldnt done const cancel promise cancellabletasks settimeoutcancel promisecatchconsolelog logs cancelled tms instead cancel not called called after tms promise would resolved example input generatorfunction function return cancelledat output resolved explanation const generator generatorfunction const cancel promise cancellablegenerator settimeoutcancel promisethenconsolelog resolves tms generator immediately yields finishes because returned promise immediately resolves note cancelling finished generator does nothing example input generatorfunction function const msg yield new promiseres reshello throw error msg cancelledat null output rejected error hello explanation promise yielded function handles waiting resolve passes resolved value back generator error thrown which effect causing promise reject same thrown error example input generatorfunction function yield new promiseres settimeoutres return success cancelledat output rejected cancelled explanation while function waiting yielded promise resolve cancel called causes error message sent back generator since error uncaught returned promise rejected error example input generatorfunction function let result yield new promiseres settimeoutres result yield new promiseres res yield new promiseres settimeoutres result yield new promiseres res return result cancelledat null output resolved explanation promises yielded two those promises their values added result after generator finishes value value resolved returned promise example input generatorfunction function let result try yield new promiseres settimeoutres result yield new promiseres res yield new promiseres settimeoutres result yield new promiseres res catche return result return result cancelledat output resolved explanation first two yielded promises resolve cause result increment however tms generator cancelled error sent generator caught result returned finally resolved returned promise example input generatorfunction function try yield new promiseresolve reject rejectpromise rejected catche let yield new promiseresolve resolve let yield new promiseresolve resolve return cancelledat null output resolved explanation first yielded promise immediately rejects error caught because generator hasnt cancelled execution continues usual ends resolving constraints cancelledat null cancelledat generatorfunction returns generator object

minimum operations array elements equal given array nums consisting positive integers also given integer array queries size ith query want elements nums equal queriesi perform following operation array any number times increase decrease element array return array answer size where answeri minimum number operations elements nums equal queriesi note after each query array reset original state example input nums queries output explanation first query following operations decrease nums times nums decrease nums times nums decrease nums times nums total number operations first query second query following operations increase nums times nums increase nums times nums decrease nums time nums decrease nums times nums total number operations second query example input nums queries output explanation increase each value array total number operations constraints numslength querieslength numsi queriesi

minimize total price trips exists undirected unrooted tree nodes indexed given integer integer array edges length where edgesi indicates edge between nodes tree each node associated price given integer array price where pricei price ith node price sum given path sum prices nodes lying path additionally given integer array trips where tripsi starti endi indicates start ith trip node starti travel node endi any path before performing your first trip choose some nonadjacent nodes halve prices return minimum total price sum perform given trips example input edges price trips output explanation diagram above denotes tree after rooting node first part shows initial tree second part shows tree after choosing nodes making their price half trip choose path price sum path trip choose path price sum path trip choose path price sum path total price sum trips proven minimum answer achieve example input edges price trips output explanation diagram above denotes tree after rooting node first part shows initial tree second part shows tree after choosing node making price half trip choose path price sum path total price sum trips proven minimum answer achieve constraints edgeslength edges represents valid tree pricelength pricei even integer pricei tripslength starti endi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

find substring maximum cost given string string chars distinct characters integer array vals same length chars cost substring sum values each character substring cost empty string considered value character defined following way character not string chars value corresponding position indexed alphabet example value value value otherwise assuming index where character occurs string chars value valsi return maximum cost substrings string example input adaa chars vals output explanation value characters respectively substring maximum cost cost proven maximum cost example input abc chars abc vals output explanation value characters respectively substring maximum cost empty substring cost proven maximum cost constraints slength consist lowercase english letters charslength chars consist distinct lowercase english letters valslength charslength valsi

memoize given function return memoized version function memoized function function never called twice same inputs instead return cached value any function constraints what type values accepts inputs considered identical they each other example input getinputs function return output valcallsvalcallsvalcalls explanation const inputs getinputs const memoized memoizefn const arr inputs memoizedarr inputs required call inputs but those inputs seen before call required inputs required another call total example input getinputs function return output valcallsvalcallsvalcalls explanation merging two empty objects always result empty object may seem should only call because cachehits however none those objects each other example input getinputs const return oooooo function return output valcallsvalcallsvalcalls explanation merging two empty objects always result empty object third function calls result cachehit because every object passed identical constraints inputslength inputsflatlength inputsij nan

snail traversal write code enhances arrays such call snailrowscount colscount method transforms array array organised pattern known snail traversal order invalid input values should output empty array rowscount colscount numslength input considered invalid snail traversal order starts top left cell first value current array moves entire first column top bottom followed moving next column traversing bottom top pattern continues alternating direction traversal each column entire current array covered example when given input array rowscount colscount desired output matrix shown below note iterating matrix following arrows corresponds order numbers original array example input nums rowscount colscount output example input nums rowscount colscount output example input nums rowscount colscount output explanation multiplied original array length input invalid constraints numslength numsi rowscount colscount

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

find longest balanced substring binary string given binary string consisting only zeroes ones substring considered balanced zeroes before ones number zeroes equal number ones inside substring notice empty substring considered balanced substring return length longest balanced substring substring contiguous sequence characters within string example input output explanation longest balanced substring which length example input output explanation longest balanced substring which length example input output explanation balanced substring except empty substring answer constraints slength

check object instance class write function checks given value instance given class superclass problem object considered instance given class object access classs methods constraints data types passed function example value class could undefined example input func checkifinstanceofnew date date output true explanation object returned date constructor definition instance date example input func class animal class dog extends animal return checkifinstanceofnew dog animal output true explanation class animal class dog extends animal checkifinstanceofnew dog animal true dog subclass animal dog object instance both dog animal example input func checkifinstanceofdate date output false explanation date constructor cannot logically instance itself example input func checkifinstanceof number output true explanation number note instanceof keyword would return false however considered instance number because accesses number methods example tofixed

promise time limit given asyncronous function time milliseconds return new time limited version input function time limited function function identical original unless takes longer than milliseconds fullfill case reject time limit exceeded note should reject string not error example input async await new promiseres settimeoutres return inputs output rejectedtime limit exceededtime explanation provided function set resolve after however time limit set rejects tms because time limit reached example input async await new promiseres settimeoutres return inputs output resolvedtime explanation function resolved tms time limit never reached example input async await new promiseres settimeoutres return inputs output resolvedtime explanation function resolved tms time limit never reached example input async throw error inputs output rejectederrortime explanation function immediately throws error constraints inputslength returns promise

find width columns grid given indexed integer matrix grid width column maximum length integers example grid width only column since length return integer array ans size where ansi width ith column length integer len digits equal len nonnegative len otherwise example input grid output explanation column length example input grid output explanation column only length column integers length column both length constraints gridlength gridilength gridrc

mice cheese two mice different types cheese each type cheese should eaten exactly one mouse point cheese index indexed rewardi first mouse eats rewardi second mouse eats given positive integer array reward positive integer array reward nonnegative integer return maximum points mice achieve first mouse eats exactly types cheese example input reward reward output explanation example first mouse eats indexed types cheese second mouse eats types cheese total points proven maximum total points mice achieve example input reward reward output explanation example first mouse eats indexed types cheese second mouse does not eat any cheese total points proven maximum total points mice achieve constraints rewardlength rewardlength rewardi rewardi

collect coins tree exists undirected unrooted tree nodes indexed given integer integer array edges length where edgesi indicates edge between nodes tree also given array coins size where coinsi either where indicates presence coin vertex initially choose start any vertex tree perform following operations any number times collect coins distance most current vertex move any adjacent vertex tree find minimum number edges need collect coins back initial vertex note pass edge several times need count answer several times example input coins edges output explanation start vertex collect coin vertex move vertex collect coin vertex move back vertex example input coins edges output explanation start vertex collect coins vertices move vertex collect coin vertex move back vertex constraints coinslength coinsi edgeslength edgesilength edges represents valid tree

form smallest number two digit arrays given two arrays unique digits nums nums return smallest number contains least one digit each array example input nums nums output explanation number contains digit nums digit nums proven smallest number example input nums nums output explanation number contains digit which exists both arrays constraints numslength numslength numsi numsi digits each array unique

sleep given positive integer millis write asynchronous function sleeps millis milliseconds resolve any value example input millis output explanation should return promise resolves after let datenow sleepthen consolelogdatenow example input millis output explanation should return promise resolves after constraints millis

nested array generator given multidimensional array integers return generator object which yields integers same order inorder traversal multidimensional array recursive data structure contains both integers other multidimensional arrays inorder traversal iterates over each array left yielding any integers encounters applying inorder traversal any arrays encounters example input arr output explanation const generator inordertraversalarr generatornextvalue generatornextvalue generatornextvalue generatornextdone true example input arr output explanation integers generator doesnt yield anything constraints arrflatlength arrflati maxnestingdepth solve without creating new flattened version array

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

apply transform over each element array given integer array arr mapping function return new array transformation applied each element returned array should created such returnedarrayi fnarri please solve without builtin arraymap method example input arr function plusonen return output explanation const newarray maparr plusone function increases each value array one example input arr function plusin return output explanation function increases each value index resides example input arr function constant return output explanation function always returns constraints arrlength arri returns number

find score prefixes array define conversion array conver array arr follows converi arri maxarri where maxarri maximum value arrj over also define score array arr sum values conversion array arr given indexed integer array nums length return array ans length where ansi score prefix numsi example input nums output explanation prefix conversion array score prefix conversion array score prefix conversion array score prefix conversion array score prefix conversion array score example input nums output explanation prefix conversion array score prefix conversion array score prefix conversion array score prefix conversion array score prefix conversion array score prefix conversion array score constraints numslength numsi

find prefix common array two arrays given two indexed integer permutations length prefix common array array such equal count numbers present before index both return prefix common array sequence integers called permutation contains integers exactly once example input output explanation number common common common common example input output explanation number common only common common constraints alength blength guaranteed both permutation integers

array objects matrix write function converts array objects arr matrix arr array objects arrays each item array deeply nested child arrays child objects also contain numbers strings booleans null values first row should column names nesting column names unique keys within objects nesting column names respective paths object separated each remaining rows corresponds object arr each value matrix corresponds value object given object doesnt contain value given column cell should contain empty string colums matrix should lexographically ascending order example input arr output explanation two unique column names two objects corresponds coresponds example input arr output explanation unique column names first object values associated second object values associated third object keys row empty strings example input arr output explanation example objects nested keys represent full path each value separated periods three paths example input arr null true output null true explanation arrays also considered objects their keys being their indices each array one element keys example input arr output explanation keys every row empty array constraints arrlength unique keys

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

maximum given indexed integer array nums length integer operation choose element multiply return maximum possible value nums nums numsn obtained after applying operation nums most times note denotes bitwise between two integers example input nums output explanation apply operation index our new array nums equal return bitwise which example input nums output explanation apply operation twice index yield new array return constraints numslength numsi

array wrapper create class arraywrapper accepts array integers constructor class should two features when two instances class added together operator resulting value sum elements both arrays when string function called instance return comma separated string surrounded brackets example example input nums operation add output explanation const obj new arraywrapper const obj new arraywrapper obj obj example input nums operation string output explanation const obj new arraywrapper stringobj example input nums operation add output explanation const obj new arraywrapper const obj new arraywrapper obj obj constraints numslength numsi note nums array passed constructor

sum matrix given indexed integer array nums initially your score perform following operations matrix becomes empty each row matrix select largest number remove case tie does not matter which number chosen identify highest number amongst those removed step add number your score return final score example input nums output explanation first operation remove add our score next remove add our score lastly remove add our score our final score example input nums output explanation remove add answer return constraints numslength numsilength numsij

first missing positive given unsorted integer array nums return smallest missing positive integer must implement algorithm runs time uses constant extra space example input nums output explanation numbers range array example input nums output explanation array but missing example input nums output explanation smallest positive integer missing constraints numslength numsi

container most water given integer array height length vertical lines drawn such two endpoints ith line heighti find two lines together xaxis form container such container contains most water return maximum amount water container store notice may not slant container example input height output explanation above vertical lines represented array case max area water blue section container contain example input height output constraints heightlength heighti

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

determine winner bowling game given two indexed integer arrays player player represent number pins player player hit bowling game respectively bowling game consists turns number pins each turn exactly assume player hit pins ith turn value ith turn player player hit pins any previous two turns otherwise score player sum values their turns return score player more than score player score player more than score player case draw example input player player output explanation score player score player score player more than score player player winner answer example input player player output explanation score player score player score player more than score player player winner answer example input player player output explanation score player score player score player equals score player draw answer constraints playerlength playerlength playeri playeri

call function custom context enhance functions callpolyfill method method accepts object obj first parameter any number additional arguments obj becomes context function additional arguments passed function callpolyfill method belongs example function function taxprice taxrate const totalcost price taxrate consolelogthe cost thisitem totalcost calling function tax log cost undefined because context not defined however calling function taxcallpolyfillitem salad log cost salad context appropriately set function logged appropriate output please solve without using builtin functioncall method example input function addb return thisa args output explanation fncallpolyfilla callpolyfill sets context passed argument example input function taxprice taxrate return cost thisitem price taxrate args item burger output cost burger explanation callpolyfill sets context item burger passed additional arguments constraints typeof args object args null argslength jsonstringifyargslength

modify graph edge weights given undirected weighted connected graph containing nodes labeled integer array edges where edgesi indicates edge between nodes weight some edges weight while others positive weight your task modify edges weight assigning them positive integer values range shortest distance between nodes source destination becomes equal integer target multiple modifications shortest distance between source destination equal target any them considered correct return array containing edges even unmodified ones any order possible shortest distance source destination equal target empty array impossible note not allowed modify weights edges initial positive weights example input edges source destination target output explanation graph above shows possible modification edges making distance equal example input edges source destination target output explanation graph above contains initial edges not possible distance equal modifying edge weight empty array returned example input edges source destination target output explanation graph above shows modified graph having shortest distance constraints edgeslength edgesilength source destination source destination target graph connected selfloops repeated edges

count number complete components given integer undirected graph vertices numbered given integer array edges where edgesi denotes exists undirected edge connecting vertices return number complete connected components graph connected component subgraph graph which exists path between any two vertices vertex subgraph shares edge vertex outside subgraph connected component said complete exists edge between every pair vertices example input edges output explanation picture above one see components graph complete example input edges output explanation component containing vertices complete since edge between every pair two vertices other hand component containing vertices not complete since edge between vertices number complete components graph constraints edgeslength edgesilength repeated edges

sliding subarray beauty given integer array nums containing integers find beauty each subarray size beauty subarray xth smallest integer subarray negative fewer than negative integers return integer array containing integers which denote beauty subarrays order first index array subarray contiguous nonempty sequence elements within array example input nums output explanation subarrays size first subarray smallest negative integer second subarray smallest negative integer third subarray smallest negative integer example input nums output explanation subarrays size smallest negative integer smallest negative integer smallest negative integer smallest negative integer example input nums output explanation subarrays size smallest negative integer negative integer beauty smallest negative integer smallest negative integer smallest negative integer constraints numslength numsi

lexicographically smallest palindrome given string consisting lowercase english letters allowed perform operations one operation replace character another lowercase english letter your task palindrome minimum number operations possible multiple palindromes made using minimum number operations lexicographically smallest one string lexicographically smaller than string same length first position where differ string letter appears earlier alphabet than corresponding letter return resulting palindrome string example input egcfe output efcfe explanation minimum number operations egcfe palindrome lexicographically smallest palindrome string get modifying one character efcfe changing example input abcd output abba explanation minimum number operations abcd palindrome lexicographically smallest palindrome string get modifying two characters abba example input seven output neven explanation minimum number operations seven palindrome lexicographically smallest palindrome string get modifying one character neven constraints slength consists only lowercase english letters

find punishment number integer given positive integer return punishment number punishment number defined sum squares integers such decimal representation partitioned contiguous substrings such sum integer values these substrings equals example input output explanation exactly integers satisfy conditions statement since since partitioned since partitioned punishment number example input output explanation exactly integers satisfy conditions statement since since partitioned since partitioned since partitioned punishment number constraints

allow one function call given function return new function identical original function except ensures called most once first time returned function called should return same result every subsequent time called should return undefined example input abc calls output callsvalue explanation const oncefn oncefn oncefn oncefn undefined not called example input abc calls output callsvalue explanation const oncefn oncefn oncefn oncefn undefined not called oncefn undefined not called constraints callslength callsilength jsonstringifycallslength

create hello world function write function createhelloworld should return new function always returns hello world example input args output hello world explanation const createhelloworld hello world function returned createhelloworld should always return hello world example input args null output hello world explanation const createhelloworld null hello world any arguments could passed function but should always return hello world constraints argslength

differences between two objects write function accepts two deeply nested objects arrays obj obj returns new object representing their differences function should compare properties two objects identify any changes returned object should only contains keys where value different obj obj each changed key value should represented array obj value obj value keys exist one object but not other should not included returned object when comparing two arrays indices arrays considered their keys end result should deeply nested object where each leaf value difference array may assume both objects output jsonparse example input obj obj output explanation modifications made obj new keys appear obj but keys added removed should ignored example input obj null obj output null explanation keys changes applied chnaged changed change applied child object changed null example input obj obj output explanation obj obj keys different assigned values ignored because value unchanged key nested array arrays treated objects where indices keys two alterations array unchanged not included removed not included example input obj obj output explanation key exists both objects since two associated values different types they placed difference array example input obj false obj false output explanation apart different ordering keys two objects identical empty object returned constraints jsonstringifyobjlength jsonstringifyobjlength

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

minimum number operations array elements equal given indexed array nums consisiting positive integers following operation array any number times select index such replace either numsi numsi their gcd value return minimum number operations elements nums equal impossible return gcd two integers greatest common divisor two integers example input nums output explanation following operations choose index replace nums gcd nums choose index replace nums gcd nums choose index replace nums gcd nums choose index replace nums gcd nums example input nums output explanation shown impossible elements equal constraints numslength numsi followup time complexity solution works but could find constant time complexity solution

array empty given integer array nums containing distinct numbers perform following operations array empty first element smallest value remove otherwise put first element end array return integer denoting number operations takes nums empty example input nums output operation array example input nums output operation array example input nums output operation array constraints numslength numsi values nums distinct

maximum number moves grid given indexed matrix grid consisting positive integers start any cell first column matrix traverse grid following way cell row col move any cells row col row col row col such value cell move should strictly bigger than value current cell return maximum number moves perform example input grid output explanation start cell following moves shown maximum number moves made example input grid output explanation starting any cell first column cannot perform any moves constraints gridlength gridilength gridij

power heroes given indexed integer array nums representing strength some heroes power group heroes defined follows let indices heroes group power group maxnumsi numsi numsik minnumsi numsi numsik return sum power nonempty groups heroes possible since sum could very large return modulo example input nums output explanation group power group power group power group power group power group power group power sum powers groups example input nums output explanation total groups possible power each group sum powers groups constraints numslength numsi

lexicographically smallest beautiful string string beautiful consists first letters english lowercase alphabet does not contain any substring length more which palindrome given beautiful string length positive integer return lexicographically smallest string length which larger than beautiful such string return empty string string lexicographically larger than string same length first position where differ character strictly larger than corresponding character example abcd lexicographically larger than abcc because first position they differ fourth character greater than example input abcz output abda explanation string abda beautiful lexicographically larger than string abcz proven string lexicographically larger than string abcz beautiful lexicographically smaller than string abda example input output explanation proven string lexicographically larger than string beautiful constraints slength beautiful string

neighboring bitwise xor indexed array derived length derived computing bitwise xor adjacent values binary array original length specifically each index range derivedi originali original otherwise derivedi originali originali given array derived your task determine whether exists valid binary array original could formed derived return true such array exists false otherwise binary array array containing only example input derived output true explanation valid original array gives derived derived original original derived original original derived original original example input derived output true explanation valid original array gives derived derived original original derived original original example input derived output false explanation valid original array gives derived constraints derivedlength values derived either

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

first completely painted row column given indexed integer array arr integer matrix mat arr mat both contain integers range each index arr starting index paint cell mat containing integer arri return smallest index which either row column completely painted mat example input arr mat output explanation moves shown order both first row second column matrix become fully painted arr example input arr mat output explanation second column becomes fully painted arr constraints matlength matilength arrlength arri matrc integers arr unique integers mat unique

calculate delayed arrival time given positive integer arrivaltime denoting arrival time train hours another positive integer delayedtime denoting amount delay hours return time when train arrive station note time problem hours format example input arrivaltime delayedtime output explanation arrival time train hours delayed hours reach hours example input arrivaltime delayedtime output explanation arrival time train hours delayed hours reach which denoted hours format return constraints arrivaltime delayedtime

costs paths equal binary tree given integer representing number nodes perfect binary tree consisting nodes numbered root tree node each node tree two children where left child node child each node tree also cost represented given indexed integer array cost size where costi cost node allowed increment cost any node any number times return minimum number increments need cost paths root each leaf node equal note perfect binary tree tree where each node except leaf nodes exactly children cost path sum costs nodes path example input cost output explanation following increments increase cost node one time increase cost node three times increase cost node two times each path root leaf total cost total increments did shown minimum answer achieve example input cost output explanation two paths already equal total costs increments needed constraints power costlength costi

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

find losers circular game friends playing game friends sitting circle numbered clockwise order more formally moving clockwise ith friend brings ith friend moving clockwise nth friend brings friend rules game follows friend receives ball after friend passes friend who steps away them clockwise direction after friend who receives ball should pass friend who steps away them clockwise direction after friend who receives ball should pass friend who steps away them clockwise direction forth other words ith turn friend holding ball should pass friend who steps away them clockwise direction game finished when some friend receives ball second time losers game friends who did not receive ball entire game given number friends integer return array answer which contains losers game ascending order example input output explanation game goes follows start friend pass ball friend who steps away them friend friend passes ball friend who steps away them friend friend passes ball friend who steps away them friend game ends friend receives ball second time example input output explanation game goes follows start friend pass ball friend who steps away them friend game ends friend receives ball second time constraints

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

find distinct difference array given indexed array nums length distinct difference array nums array diff length such diffi equal number distinct elements suffix numsi subtracted number distinct elements prefix nums return distinct difference array nums note numsi denotes subarray nums starting index ending index inclusive particularly numsi denotes empty subarray example input nums output explanation index element prefix distinct elements suffix diff index distinct elements prefix distinct elements suffix diff index distinct elements prefix distinct elements suffix diff index distinct elements prefix distinct element suffix diff index distinct elements prefix elements suffix diff example input nums output explanation index element prefix distinct elements suffix diff index distinct elements prefix distinct elements suffix diff index distinct elements prefix distinct elements suffix diff index distinct elements prefix distinct element suffix diff index distinct elements prefix elements suffix diff constraints numslength numsi

frequency tracker design data structure keeps track values answers some queries regarding their frequencies implement frequencytracker class frequencytracker initializes frequencytracker object empty array initially void addint number adds number data structure void deleteoneint number deletes one occurrence number data structure data structure may not contain number case nothing deleted bool hasfrequencyint frequency returns true number data structure occurs frequency number times otherwise returns false example input frequencytracker add add hasfrequency output null null null true explanation frequencytracker frequencytracker new frequencytracker frequencytrackeradd data structure contains frequencytrackeradd data structure contains frequencytrackerhasfrequency returns true because occurs twice example input frequencytracker add deleteone hasfrequency output null null null false explanation frequencytracker frequencytracker new frequencytracker frequencytrackeradd data structure contains frequencytrackerdeleteone data structure becomes empty frequencytrackerhasfrequency returns false because data structure empty example input frequencytracker hasfrequency add hasfrequency output null false null true explanation frequencytracker frequencytracker new frequencytracker frequencytrackerhasfrequency returns false because data structure empty frequencytrackeradd data structure contains frequencytrackerhasfrequency returns true because occurs once constraints number frequency most calls made add deleteone hasfrequency total

event emitter design eventemitter class interface similar but some differences one found nodejs event target interface dom eventemitter should allow subscribing events emitting them your eventemitter class should following two methods subscribe method takes two arguments name event string callback function callback function later called when event emitted event should able multiple listeners same event when emitting event multiple callbacks each should called order which they subscribed array results should returned assume callbacks passed subscribe referentially identical subscribe method should also return object unsubscribe method enables user unsubscribe when called callback should removed list subscriptions undefined should returned emit method takes two arguments name event string optional array arguments passed callbacks callbacks subscribed given event return empty array otherwise return array results callback calls order they subscribed example input actions eventemitter emit subscribe subscribe emit values firstevent function return firstevent function return firstevent output emittedsubscribedsubscribedemitted explanation const emitter new eventemitter emitteremitfirstevent callback subscribed yet emittersubscribefirstevent function return emittersubscribefirstevent function return emitteremitfirstevent returns output example input actions eventemitter subscribe emit emit values firstevent function cbargs return argsjoin firstevent firstevent output subscribedemittedemitted explanation note emit method should able accept optional array arguments const emitter new eventemitter emittersubscribefirstevent function cbargs return argsjoin emitteremitfirstevent emitteremitfirstevent example input actions eventemitter subscribe emit unsubscribe emit values firstevent args argsjoin firstevent firstevent output subscribedemittedunsubscribedemitted explanation const emitter new eventemitter const sub emittersubscribefirstevent args argsjoin emitteremitfirstevent subunsubscribe undefined emitteremitfirstevent subscriptions constraints actionslength valueslength actionslength test cases valid dont need handle scenarios when unsubscribing nonexisting subscription only different actions eventemitter emit subscribe unsubscribe eventemitter action doesnt take any arguments emit action takes between either arguments first argument name event want emit argument passed callback functions subscribe action takes arguments where first one event name second callback function unsubscribe action takes one argument which indexed order subscription made before

maximum sum exactly elements given indexed integer array nums integer your task perform following operation exactly times order maximize your score select element nums remove selected element array add new element value array increase your score return maximum score achieve after performing operation exactly times example input nums output explanation need choose exactly elements nums maximize sum first iteration choose sum nums second iteration choose sum nums third iteration choose sum nums return proven maximum answer achieve example input nums output explanation need choose exactly elements nums maximize sum first iteration choose sum nums second iteration choose sum nums return proven maximum answer achieve constraints numslength numsi

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

chunk array given array arr chunk size size return chunked array chunked array contains original elements arr but consists subarrays each length size length last subarray may less than size arrlength not evenly divisible size may assume array output jsonparse other words valid json please solve without using lodashs chunk function example input arr size output explanation arr split subarrays each element example input arr size output explanation arr split subarrays elements however only two elements left subarray example input arr size output explanation size greater than arrlength elements first subarray example input arr size output explanation elements chunked empty array returned constraints arr valid json array jsonstringifyarrlength size arrlength

minimum string length after removing substrings given string consisting only uppercase english letters apply some operations string where one operation remove any occurrence one substrings return minimum possible length resulting string obtain note string concatenates after removing substring could produce new substrings example input abfcacdb output explanation following operations remove substring abfcacdb fcacdb remove substring fcacdb fcab remove substring fcab resulting length string shown minimum length obtain example input acbbd output explanation cannot any operations string length remains same constraints slength consists only uppercase english letters

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

number adjacent elements same color indexed array nums length initially elements uncolored value given integer array queries where queriesi indexi colori each query color index indexi color colori array nums return array answer same length queries where answeri number adjacent elements same color after ith query more formally answeri number indices such numsj numsj numsj after ith query example input queries output explanation initially array nums where denotes uncolored elements array after query nums count adjacent elements same color after query nums count adjacent elements same color after query nums count adjacent elements same color after query nums count adjacent elements same color after query nums count adjacent elements same color example input queries output explanation initially array nums where denotes uncolored elements array after query nums count adjacent elements same color constraints querieslength queriesilength indexi colori

minimum cost path special roads given array start where start startx starty represents your initial position startx starty space also given array target where target targetx targety represents your target position targetx targety cost going position any other position space also some special roads given array specialroads where specialroadsi costi indicates ith special road take cost equal costi use each special road any number times return minimum cost required startx starty targetx targety example input start target specialroads output explanation optimal path following move cost move uses first special edge cost move cost move uses second special edge cost total cost shown cannot achieve smaller total cost than example input start target specialroads output explanation optimal not use any special edges directly starting ending position cost constraints startlength targetlength startx targetx starty targety specialroadslength specialroadsilength startx targetx starty targety costi

maximum number fish grid given indexed matrix grid size where represents land cell gridrc water cell containing gridrc fish gridrc fisher start any water cell following operations any number times catch fish cell move any adjacent water cell return maximum number fish fisher catch chooses his starting cell optimally water cell exists adjacent cell cell one cells exists example input grid output explanation fisher start cell collect fish move cell collect fish example input grid output explanation fisher start cells collect single fish constraints gridlength gridilength gridij

number senior citizens given indexed array strings details each element details provides information about given passenger compressed string length system such first ten characters consist phone number passengers next character denotes gender person following two characters used indicate age person last two characters determine seat allotted person return number passengers who strictly more than years old example input details mff output explanation passengers indices ages people who over years old example input details output explanation none passengers older than constraints detailslength detailsilength detailsi consists digits detailsi either phone numbers seat numbers passengers distinct

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

throttle given function time milliseconds return throttled version function throttled function first called without delay time interval milliseconds cant executed but should store latest function arguments provided call them after end delay instance function called first function call would block calling functions following milliseconds second function call would save arguments third call arguments should overwrite currently stored arguments second call because second third calls called before once delay passed throttled function should called latest arguments provided delay period should also create another delay period above diagram shows how throttle transform events each rectangle represents throttle time each color represents different set inputs example input calls tinputs output tinputs explanation call always called without delay example input calls tinputstinputs output tinputstinputs explanation called function arguments without delay called within delay period because next call reached save arguments call use them callback call example input calls tinputstinputstinputst inputst inputs output tinputstinputstinputstinputs explanation called function arguments without delay called within delay period because should only save arguments also called within delay period because need latest function arguments overwrite previous ones after delay period callback saved arguments callback makes another delay period next function called called delay period should called callback create another delay period called but after should called immediately should create another delay period constraints callslength callsit callsiinputsi callsiinputslength

counter write function createcounter should accept initial integer init should return object three functions three functions increment increases current value returns decrement reduces current value returns reset sets current value init returns example input init calls incrementresetdecrement output explanation const counter createcounter counterincrement counterreset counterdecrement example input init calls incrementincrementdecrementresetreset output explanation const counter createcounter counterincrement counterincrement counterdecrement counterreset counterreset constraints init total calls not exceed

sum multiples given positive integer find sum integers range inclusive divisible return integer denoting sum numbers given range satisfying constraint example input output explanation numbers range divisible sum these numbers example input output explanation numbers range divisible sum these numbers example input output explanation numbers range divisible sum these numbers constraints

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

minimize string length given indexed string repeatedly perform following operation any number times choose index string let character position delete closest occurrence left any closest occurrence any your task minimize length performing above operation any number times return integer denoting length minimized string example input aaabc output explanation example aaabc start selecting character index remove closest left index which index closest index which index after operation string becomes abc any further operation perform string leave unchanged length minimized string example input cbbd output explanation start character index occurrence left index but one index delete index string becomes cbd further operations leave unchanged minimized length example input dddaaa output explanation start character index closest occurrence left index closest occurrence index delete both index string becomes daaa new string select character index closest occurrence left index closest occurrence index delete both them string becomes cannot minimize further minimized length constraints slength contains only lowercase english letters

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

difference number distinct values diagonals given indexed grid size should find matrix answer size value each cell matrix answer calculated following way let topleftrc number distinct values topleft diagonal cell matrix grid let bottomrightrc number distinct values bottomright diagonal cell matrix grid answerrc topleftrc bottomrightrc return matrix answer matrix diagonal diagonal line cells starting some cell either topmost row leftmost column going bottomright direction reaching matrixs end cell belongs topleft diagonal cell both belong same diagonal similarly defined bottomright diagonal example input grid output explanation diagram denotes initial grid diagram denotes grid cell where bluecolored cells cells bottomright diagonal diagram denotes grid cell where redcolored cells cells topleft diagonal diagram denotes grid cell where bluecolored cells cells bottomright diagonal redcolored cells cells topleft diagonal cell contains bottomright diagonal topleft diagonal answer cell contains bottomright diagonal topleft diagonal answer cell contains bottomright diagonal topleft diagonal answer answers other cells similarly calculated example input grid output explanation cell contains bottomright diagonal topleft diagonal answer constraints gridlength gridilength gridij

remove trailing zeros string given positive integer num represented string return integer num without trailing zeros string example input num output explanation integer trailing zeros remove them return integer example input num output explanation integer trailing zeros return integer constraints numlength num consists only digits num doesnt any leading zeros

execute cancellable function delay given function array arguments args timeout milliseconds return cancel function cancelfn after delay should called args passed parameters unless cancelfn called first case should never called example input args canceltime output time returned explanation const cancel cancellablefn called tms settimeoutcancel canceltime after delay time should called tms value returned example input args canceltime output explanation never called because canceltime before delay time example input args canceltime output time returned explanation called tms because canceltime constraints function args valid json array argslength cancelt

maximum strength group given indexed integer array nums representing score students exam teacher would form one nonempty group students maximal strength where strength group students indices defined numsi numsi numsi numsik return maximum strength group teacher create example input nums output explanation one way form group maximal strength group students indices their strength which show optimal example input nums output explanation group students indices we’ll resulting strength cannot achieve greater strength constraints numslength numsi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

sum matrix after queries given integer indexed array queries where queriesi typei indexi vali initially indexed matrix filled each query must apply one following changes typei set values row indexi vali overwriting any previous values typei set values column indexi vali overwriting any previous values return sum integers matrix after queries applied example input queries output explanation image above describes matrix after each query sum matrix after queries applied example input queries output explanation image above describes matrix after each query sum matrix after queries applied constraints querieslength queriesilength typei indexi vali

return length arguments passed write function argumentslength returns count arguments passed example input argsarr output explanation argumentslength one value passed function should return example input argsarr null output explanation argumentslength null three values passed function should return constraints argsarr valid json array argsarrlength

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

count integers given two numeric strings num num two integers maxsum minsum denote integer good num num minsum digitsumx maxsum return number good integers since answer may large return modulo note digitsumx denotes sum digits example input num num minsum maxsum output explanation integers whose sum digits lies between return example input num num minsum maxsum output explanation integers whose sum digits lies between return constraints num num minsum maxsum

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

extra characters string given indexed string dictionary words dictionary break one more nonoverlapping substrings such each substring present dictionary may some extra characters which not present any substrings return minimum number extra characters left over break optimally example input leetscode dictionary leetcodeleetcode output explanation break two substrings leet index code index only unused character index return example input sayhelloworld dictionary helloworld output explanation break two substrings hello index world index characters indices not used any substring considered extra characters return constraints slength dictionarylength dictionaryilength dictionaryi consists only lowercase english letters dictionary contains distinct words

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

minimum cost characters equal given indexed binary string length which apply two types operations choose index invert characters index index both inclusive cost choose index invert characters index index both inclusive cost return minimum cost characters string equal invert character means value becomes viceversa example input output explanation apply second operation obtain cost shown minimum cost characters equal example input output explanation apply first operation obtain cost apply first operation obtain cost apply first operation obtain cost apply second operation obtain cost apply second operation obtain cost total cost characters equal shown minimum cost characters equal constraints slength either

semiordered permutation given indexed permutation integers nums permutation called semiordered first number equals last number equals perform below operation many times want nums semiordered permutation pick two adjacent elements nums swap them return minimum number operations nums semiordered permutation permutation sequence integers length containing each number exactly once example input nums output explanation permutation semiordered using these sequence operations swap permutation becomes swap permutation becomes proved sequence less than two operations nums semiordered permutation example input nums output explanation permutation semiordered using these sequence operations swap permutation becomes swap permutation becomes swap permutation becomes proved sequence less than three operations nums semiordered permutation example input nums output explanation permutation already semiordered permutation constraints numslength numsi nums permutation

compact object given object array obj return compact object compact object same original object except keys containing falsy values removed operation applies object any nested objects arrays considered objects where indices keys value considered falsy when booleanvalue returns false may assume obj output jsonparse other words valid json example input obj null false output explanation falsy values removed array example input obj null false output explanation obja objb falsy values removed example input obj null false output explanation obj obj obj obj falsy removed constraints obj valid json object jsonstringifyobjlength

maximum strictly increasing cells matrix given indexed integer matrix mat select any cell matrix your starting cell starting cell move any other cell same row column but only value destination cell strictly greater than value current cell repeat process many times possible moving cell cell longer any moves your task find maximum number cells visit matrix starting some cell return integer denoting maximum number cells visited example input mat output explanation image shows how visit cells starting row column shown cannot visit more than cells matter where start answer example input mat output explanation since cells must strictly increasing only visit one cell example example input mat output explanation image above shows how visit cells starting row column shown cannot visit more than cells matter where start answer constraints matlength matilength matij

buy two chocolates given integer array prices representing prices various chocolates store also given single integer money which represents your initial amount money must buy exactly two chocolates such way some nonnegative leftover money would minimize sum prices two chocolates buy return amount money leftover after buying two chocolates way buy two chocolates without ending debt return money note leftover must nonnegative example input prices money output explanation purchase chocolates priced units respectively units money afterwards return example input prices money output explanation cannot buy chocolates without going debt return constraints priceslength pricesi money

greatest common divisor traversal given indexed integer array nums allowed traverse between indices traverse between index index only gcdnumsi numsj where gcd greatest common divisor your task determine every pair indices nums where exists sequence traversals take return true possible traverse between such pairs indices false otherwise example input nums output true explanation example possible pairs indices index index use sequence traversals where move index index because gcdnums nums gcd move index index because gcdnums nums gcd index index directly because gcdnums nums gcd likewise index index directly because gcdnums nums gcd example input nums output false explanation sequence traversals take index index example return false example input nums output true explanation possible pairs indices traverse between valid sequence traversals exists each pair return true constraints numslength numsi

trapping rain water given integer matrix heightmap representing height each unit cell elevation map return volume water trap after raining example input heightmap output explanation after rain water trapped between blocks two small ponds units trapped total volume water trapped example input heightmap output constraints heightmaplength heightmapilength heightmapij

arithmetic slices integer array called arithmetic consists least three elements difference between any two consecutive elements same example arithmetic sequences given integer array nums return number arithmetic subarrays nums subarray contiguous subsequence array example input nums output explanation arithmetic slices nums itself example input nums output constraints numslength numsi

add two numbers given two nonempty linked lists representing two nonnegative integers most significant digit comes first each their nodes contains single digit add two numbers return sum linked list may assume two numbers not contain any leading zero except number itself example input output example input output example input output constraints number nodes each linked list range nodeval guaranteed list represents number does not leading zeros follow could solve without reversing input lists

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

sum given integer array nums return triplets numsi numsj numsk such numsi numsj numsk notice solution set must not contain duplicate triplets example input nums output explanation nums nums nums nums nums nums nums nums nums distinct triplets notice order output order triplets does not matter example input nums output explanation only possible triplet does not sum example input nums output explanation only possible triplet sums constraints numslength numsi

fizz buzz given integer return string array answer indexed where answeri fizzbuzz divisible answeri fizz divisible answeri buzz divisible answeri string none above conditions true example input output fizz example input output fizzbuzz example input output fizzbuzzfizzfizzbuzzfizzfizzbuzz constraints

strong password checker password considered strong below conditions met least characters most characters contains least one lowercase letter least one uppercase letter least one digit does not contain three repeating characters row baaabb weak but baaba strong given string password return minimum number steps required password strong password already strong return one step insert one character password delete one character password replace one character password another character example input password output example input password output example input password output constraints passwordlength password consists letters digits dot exclamation mark

sum left leaves given root binary tree return sum left leaves leaf node children left leaf leaf left child another node example input root nullnull output explanation two left leaves binary tree values respectively example input root output constraints number nodes tree range nodeval

construct quad tree given matrix grid only want represent grid quadtree return root quadtree representing grid quadtree tree data structure which each internal node exactly four children besides each node two attributes val true node represents grid false node represents grid notice assign val true false when isleaf false both accepted answer isleaf true node leaf node tree false node four children class node public boolean val public boolean isleaf public node topleft public node topright public node bottomleft public node bottomright construct quadtree twodimensional area using following steps current grid same value set isleaf true set val value grid set four children null stop current grid different values set isleaf false set val any value divide current grid four subgrids shown photo recurse each children proper subgrid want know more about quadtree refer wiki quadtree format dont need read section solving problem only want understand output format here output represents serialized format quadtree using level order traversal where null signifies path terminator where node exists below very similar serialization binary tree only difference node represented list isleaf val value isleaf val true represent list isleaf val value isleaf val false represent example input grid output explanation explanation example shown below notice represnts false represents true photo representing quadtree example input grid output nullnullnullnull explanation values grid not same divide grid four subgrids topleft bottomleft bottomright each same value topright different values divide subgrids where each same value explanation shown photo below constraints gridlength gridilength where

nary tree level order traversal given nary tree return level order traversal nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints height nary tree less than equal total number nodes between

nonoverlapping intervals given array intervals intervals where intervalsi starti endi return minimum number intervals need remove rest intervals nonoverlapping example input intervals output explanation removed rest intervals nonoverlapping example input intervals output explanation need remove two rest intervals nonoverlapping example input intervals output explanation dont need remove any intervals since theyre already nonoverlapping constraints intervalslength intervalsilength starti endi

maximum xor two numbers array given integer array nums return maximum result numsi xor numsj where example input nums output explanation maximum result xor example input nums output constraints numslength numsi

serialize deserialize bst serialization converting data structure object sequence bits stored file memory buffer transmitted across network connection link reconstructed later same another computer environment design algorithm serialize deserialize binary search tree restriction how your serializationdeserialization algorithm should work need ensure binary search tree serialized string string deserialized original tree structure encoded string should compact possible example input root output example input root output constraints number nodes tree range nodeval input tree guaranteed binary search tree

partition equal subset sum given integer array nums return true partition array two subsets such sum elements both subsets equal false otherwise example input nums output true explanation array partitioned example input nums output false explanation array cannot partitioned equal sum subsets constraints numslength numsi

path sum iii given root binary tree integer targetsum return number paths where sum values along path equals targetsum path does not need start end root leaf but must downwards traveling only parent nodes child nodes example input root nullnull targetsum output explanation paths sum shown example input root nullnullnull targetsum output constraints number nodes tree range nodeval targetsum

swap nodes pairs given linked list swap every two adjacent nodes return head must solve problem without modifying values lists nodes only nodes themselves may changed example input head output example input head output example input head output constraints number nodes list range nodeval

remove digits given string num representing nonnegative integer num integer return smallest possible integer after removing digits num example input num output explanation remove three digits form new number which smallest example input num output explanation remove leading number note output must not contain leading zeroes example input num output explanation remove digits number left nothing which constraints numlength num consists only digits num does not any leading zeros except zero itself

binary watch binary watch leds top represent hours leds bottom represent minutes each led represents zero one least significant bit example below binary watch reads given integer turnedon which represents number leds currently ignoring return possible times watch could represent may return answer any order hour must not contain leading zero example not valid should minute must consist two digits may contain leading zero example not valid should example input turnedon output example input turnedon output constraints turnedon

add strings given two nonnegative integers num num represented string return sum num num string must solve problem without using any builtin library handling large integers such biginteger must also not convert inputs integers directly example input num num output example input num num output example input num num output constraints numlength numlength num num consist only digits num num dont any leading zeros except zero itself

kth smallest lexicographical order given two integers return kth lexicographically smallest integer range example input output explanation lexicographical order second smallest number example input output constraints

delete node bst given root node reference bst key delete node given key bst return root node reference possibly updated bst deletion divided two stages search node remove node found delete node example input root null key output nullnull explanation given key delete find node value delete one valid answer nullnull shown above bst please notice another valid answer nullnull also accepted example input root null key output null explanation tree does not contain node value example input root key output constraints number nodes tree range nodeval each node unique value root valid binary search tree key follow could solve time complexity oheight tree

frog jump frog crossing river river divided some number units each unit may may not exist stone frog jump stone but must not jump water given list stones positions units sorted ascending order determine frog cross river landing last stone initially frog first stone assumes first jump must unit frogs last jump units next jump must either units frog only jump forward direction example input stones output true explanation frog jump last stone jumping unit stone units stone units stone units stone units stone units stone example input stones output false explanation way jump last stone gap between stone too large constraints stoneslength stonesi stones stones sorted strictly increasing order

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

battleships board given matrix board where each cell battleship empty return number battleships board battleships only placed horizontally vertically board other words they only made shape row columns rows column where any size least one horizontal vertical cell separates between two battleships adjacent battleships example input board xxxx output example input board output constraints boardlength boardilength boardij either follow could onepass using only extra memory without modifying values board

flatten multilevel doubly linked list given doubly linked list which contains nodes next pointer previous pointer additional child pointer child pointer may may not point separate doubly linked list also containing these special nodes these child lists may one more children their own produce multilevel data structure shown example below given head first level list flatten list nodes appear singlelevel doubly linked list let curr node child list nodes child list should appear after curr before currnext flattened list return head flattened list nodes list must their child pointers set null example input head nullnullnullnullnull output explanation multilevel linked list input shown after flattening multilevel linked list becomes example input head null output explanation multilevel linked list input shown after flattening multilevel linked list becomes example input head output explanation could empty list input constraints number nodes not exceed nodeval how multilevel linked list represented test cases use multilevel linked list example above null null null serialization each level follows null null null serialize levels together add nulls each level signify node connects upper node previous level serialization becomes null null null null null null merging serialization each level removing trailing nulls obtain nullnullnullnullnull

arithmetic slices subsequence given integer array nums return number arithmetic subsequences nums sequence numbers called arithmetic consists least three elements difference between any two consecutive elements same example arithmetic sequences example not arithmetic sequence subsequence array sequence formed removing some elements possibly none array example subsequence test cases generated answer fits bit integer example input nums output explanation arithmetic subsequence slices example input nums output explanation any subsequence array arithmetic constraints numslength numsi

regular expression matching given input string pattern implement regular expression matching support where matches any single character matches zero more preceding element matching should cover entire input string not partial example input output false explanation does not match entire string example input output true explanation means zero more preceding element repeating once becomes example input output true explanation means zero more any character constraints slength plength contains only lowercase english letters contains only lowercase english letters guaranteed each appearance character previous valid character match

find interval given array intervals where intervalsi starti endi each starti unique interval interval interval such startj endi startj minimized note may equal return array interval indices each interval interval exists interval put index example input intervals output explanation only one interval collection outputs example input intervals output explanation interval interval since start smallest start end interval since start smallest start end example input intervals output explanation interval interval since start smallest start end constraints intervalslength intervalsilength starti endi start point each interval unique

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

oone data structure design data structure store strings count ability return strings minimum maximum counts implement allone class allone initializes object data structure incstring key increments count string key key does not exist data structure insert count decstring key decrements count string key count key after decrement remove data structure guaranteed key exists data structure before decrement getmaxkey returns one keys maximal count element exists return empty string getminkey returns one keys minimum count element exists return empty string note each function must run average time complexity example input allone inc inc getmaxkey getminkey inc getmaxkey getminkey hello hello leet output null null null hello hello null hello leet explanation allone allone new allone alloneinchello alloneinchello allonegetmaxkey return hello allonegetminkey return hello alloneincleet allonegetmaxkey return hello allonegetminkey return leet constraints keylength key consists lowercase english letters guaranteed each call dec key existing data structure most calls made inc dec getmaxkey getminkey

number segments string given string return number segments string segment defined contiguous sequence nonspace characters example input hello name john output explanation five segments hello name john example input hello output constraints slength consists lowercase uppercase english letters digits one following characters only space character

split array largest sum given integer array nums integer split nums nonempty subarrays such largest sum any subarray minimized return minimized largest sum split subarray contiguous part array example input nums output explanation four ways split nums two subarrays best way split where largest sum two subarrays only example input nums output explanation four ways split nums two subarrays best way split where largest sum two subarrays only constraints numslength numsi min numslength

find anagrams string given two strings return array start indices anagrams may return answer any order anagram word phrase formed rearranging letters different word phrase typically using original letters exactly once example input cbaebabacd abc output explanation substring start index cba which anagram abc substring start index bac which anagram abc example input abab output explanation substring start index which anagram substring start index which anagram substring start index which anagram constraints slength plength consist lowercase english letters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

longest repeating character replacement given string integer choose any character string change any other uppercase english character perform operation most times return length longest substring containing same letter get after performing above operations example input abab output explanation replace two two vice versa example input aababba output explanation replace one middle form aabbbba substring bbbb longest repeating letters which may exists other ways achive answer too constraints slength consists only uppercase english letters slength

number boomerangs given points plane distinct where pointsi boomerang tuple points such distance between equals distance between order tuple matters return number boomerangs example input points output explanation two boomerangs example input points output example input points output constraints pointslength pointsilength points unique

pacific atlantic water flow rectangular island borders both pacific ocean atlantic ocean pacific ocean touches islands left top edges atlantic ocean touches islands bottom edges island partitioned grid square cells given integer matrix heights where heightsrc represents height above sea level cell coordinate island receives lot rain rain water flow neighboring cells directly north south east west neighboring cells height less than equal current cells height water flow any cell adjacent ocean ocean return list grid coordinates result where resulti denotes rain water flow cell both pacific atlantic oceans example input heights output explanation following cells flow pacific atlantic oceans shown below pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean note other possible paths these cells flow pacific atlantic oceans example input heights output explanation water flow only cell pacific atlantic oceans constraints heightslength heightsrlength heightsrc

integer roman roman numerals represented seven different symbols symbol value example written roman numeral two ones added together written xii which simply number written xxvii which roman numerals usually written largest smallest left however numeral four not iiii instead number four written because one before five subtract making four same principle applies number nine which written six instances where subtraction used placed before placed before placed before given integer convert roman numeral example input num output iii explanation represented ones example input num output lviii explanation iii example input num output mcmxciv explanation constraints num

find numbers disappeared array given array nums integers where numsi range return array integers range not appear nums example input nums output example input nums output constraints numslength numsi follow could without extra space runtime may assume returned list does not count extra space

string compression given array characters chars compress using following algorithm begin empty string each group consecutive repeating characters chars groups length append character otherwise append character followed groups length compressed string should not returned separately but instead stored input character array chars note group lengths longer split multiple characters chars after done modifying input array return new length array must write algorithm uses only constant extra space example input chars aabbccc output return first characters input array should abc explanation groups ccc compresses abc example input chars output return first character input array should explanation only group which remains uncompressed since single character example input chars abbbbbbbbbbbb output return first characters input array should explanation groups bbbbbbbbbbbb compresses constraints charslength charsi lowercase english letter uppercase english letter digit symbol

arranging coins coins want build staircase these coins staircase consists rows where ith row exactly coins last row staircase may incomplete given integer return number complete rows staircase build example input output explanation because row incomplete return example input output explanation because row incomplete return constraints

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

find duplicates array given integer array nums length where integers nums range each integer appears once twice return array integers appears twice must write algorithm runs time uses only constant extra space example input nums output example input nums output example input nums output constraints numslength numsi each element nums appears once twice

longest palindrome given string which consists lowercase uppercase letters return length longest palindrome built those letters letters case sensitive example not considered palindrome here example input abccccdd output explanation one longest palindrome built dccaccd whose length example input output explanation longest palindrome built whose length constraints slength consists lowercase andor uppercase english letters only

queue reconstruction height given array people people which attributes some people queue not necessarily order each peoplei represents ith person height exactly other people front who height greater than equal reconstruct return queue represented input array people returned queue should formatted array queue where queuej attributes jth person queue queue person front queue example input people output explanation person height other people taller same height front person height other people taller same height front person height two persons taller same height front which person person height one person taller same height front which person person height four people taller same height front which people person height one person taller same height front which person reconstructed queue example input people output constraints peoplelength peoplelength guaranteed queue reconstructed

convert number hexadecimal given integer num return string representing hexadecimal representation negative integers two’s complement method used letters answer string should lowercase characters should not any leading zeros answer except zero itself note not allowed use any builtin library method directly solve problem example input num output example input num output ffffffff constraints num

minimum genetic mutation gene string represented character long string choices suppose need investigate mutation gene string startgene gene string endgene where one mutation defined one single character changed gene string example aaccggtt aaccggta one mutation also gene bank bank records valid gene mutations gene must bank valid gene string given two gene strings startgene endgene gene bank bank return minimum number mutations needed mutate startgene endgene such mutation return note starting point assumed valid might not included bank example input startgene aaccggtt endgene aaccggta bank aaccggta output example input startgene aaccggtt endgene aaacggta bank aaccggtaaaccgctaaaacggta output constraints banklength startgenelength endgenelength bankilength startgene endgene banki consist only characters

sum given array nums integers return array unique quadruplets numsa numsb numsc numsd such distinct numsa numsb numsc numsd target may return answer any order example input nums target output example input nums target output constraints numslength numsi target

third maximum number given integer array nums return third distinct maximum number array third maximum does not exist return maximum number example input nums output explanation first distinct maximum second distinct maximum third distinct maximum example input nums output explanation first distinct maximum second distinct maximum third distinct maximum does not exist maximum returned instead example input nums output explanation first distinct maximum second distinct maximum both counted together since they same value third distinct maximum constraints numslength numsi follow find solution

reconstruct original digits english given string containing outoforder english representation digits return digits ascending order example input owoztneoer output example input fviefuro output constraints slength one characters egfihonsrutwvxz guaranteed valid

assign cookies assume awesome parent want give your children some cookies but should give each child most one cookie each child greed factor which minimum size cookie child content each cookie size assign cookie child child content your goal maximize number your content children output maximum number example input output explanation children cookies greed factors children even though cookies since their size both could only child whose greed factor content need output example input output explanation children cookies greed factors children cookies their sizes big enough gratify children need output constraints glength slength

construct rectangle web developer needs know how design web pages size given specific rectangular web page’s area your job design rectangular web page whose length width satisfy following requirements area rectangular web page designed must equal given target area width should not larger than length which means difference between length width should small possible return array where length width web page designed sequence example input area output explanation target area possible ways construct but according requirement illegal according requirement not optimal compared length width example input area output example input area output constraints area

minimum number arrows burst balloons some spherical balloons taped onto flat wall represents xyplane balloons represented integer array points where pointsi xstart xend denotes balloon whose horizontal diameter stretches between xstart xend not know exact ycoordinates balloons arrows shot directly vertically positive ydirection different points along xaxis balloon xstart xend burst arrow shot xstart xend limit number arrows shot shot arrow keeps traveling infinitely bursting any balloons path given array points return minimum number arrows must shot burst balloons example input points output explanation balloons burst arrows shoot arrow bursting balloons shoot arrow bursting balloons example input points output explanation one arrow needs shot each balloon total arrows example input points output explanation balloons burst arrows shoot arrow bursting balloons shoot arrow bursting balloons constraints pointslength pointsilength xstart xend

repeated substring pattern given string check constructed taking substring appending multiple copies substring together example input abab output true explanation substring twice example input aba output false example input abcabcabcabc output true explanation substring abc four times substring abcabc twice constraints slength consists lowercase english letters

sum given four integer arrays nums nums nums nums length return number tuples such numsi numsj numsk numsl example input nums nums nums nums output explanation two tuples nums nums nums nums nums nums nums nums example input nums nums nums nums output constraints numslength numslength numslength numslength numsi numsi numsi numsi

validate address given string queryip return ipv valid ipv address ipv valid ipv address neither not correct any type valid ipv address form xxxx where cannot contain leading zeros example valid ipv addresses while invalid ipv addresses valid ipv address form xxxxxxxx where xilength hexadecimal string which may contain digits lowercase english letter uppercase english letters leading zeros allowed example dbaae dbaae valid ipv addresses while dbaaej dbaae invalid ipv addresses example input queryip output ipv explanation valid ipv address return ipv example input queryip dbaae output ipv explanation valid ipv address return ipv example input queryip output neither explanation neither ipv address nor ipv address constraints queryip consists only english letters digits characters

lfu cache design implement data structure least frequently used lfu cache implement lfucache class lfucacheint capacity initializes object capacity data structure int getint key gets value key key exists cache otherwise returns void putint key int value update value key present inserts key not already present when cache reaches capacity should invalidate remove least frequently used key before inserting new item problem when tie two more keys same frequency least recently used key would invalidated determine least frequently used key use counter maintained each key cache key smallest use counter least frequently used key when key first inserted cache use counter set due put operation use counter key cache incremented either get put operation called functions get put must each run average time complexity example input lfucache put put get put get get put get get get output null null null null null explanation cntx use counter key cache show last used order tiebreakers leftmost element most recent lfucache lfu new lfucache lfuput cache cnt lfuput cache cnt cnt lfuget return cache cnt cnt lfuput lfu key because cnt smallest invalidate cache cnt cnt lfuget return not found lfuget return cache cnt cnt lfuput both same cnt but lru invalidate cache cnt cnt lfuget return not found lfuget return cache cnt cnt lfuget return cache cnt cnt constraints capacity key value most calls made get put

circular array loop playing game involving circular array nonzero integers nums each numsi denotes number indices forwardbackward must move located index numsi positive move numsi steps forward numsi negative move numsi steps backward since array circular may assume moving forward last element puts first element moving backwards first element puts last element cycle array consists sequence indices seq length where following movement rules above results repeating index sequence seq seq seqk seq every numsseqj either positive negative return true cycle nums false otherwise example input nums output true explanation graph shows how indices connected white nodes jumping forward while red jumping backward see cycle nodes white jumping same direction example input nums output false explanation graph shows how indices connected white nodes jumping forward while red jumping backward only cycle size return false example input nums output true explanation graph shows how indices connected white nodes jumping forward while red jumping backward see cycle while size node jumping forward node jumping backward not cycle see cycle nodes white jumping same direction constraints numslength numsi numsi follow could solve time complexity extra space complexity

permutations given collection numbers nums might contain duplicates return possible unique permutations any order example input nums output example input nums output constraints numslength numsi

concatenated words given array strings words without duplicates return concatenated words given list words concatenated word defined string comprised entirely least two shorter words not necesssarily distinct given array example input words catcatscatsdogcatsdogdogcatsdoghippopotamusesratratcatdogcat output catsdogcatsdogcatsdogratcatdogcat explanation catsdogcats concatenated cats dog cats dogcatsdog concatenated dog cats dog ratcatdogcat concatenated rat cat dog cat example input words catdogcatdog output catdog constraints wordslength wordsilength wordsi consists only lowercase english letters strings words unique sumwordsilength

zuma game playing variation game zuma variation zuma single row colored balls board where each ball colored red yellow blue green white also several colored balls your hand your goal clear balls board each turn pick any ball your hand insert between two balls row either end row group three more consecutive balls same color remove group balls board removal causes more groups three more same color form continue removing each group none left more balls board win game repeat process either win not any more balls your hand given string board representing row balls board string hand representing balls your hand return minimum number balls insert clear balls board cannot clear balls board using balls your hand return example input board wrrbbw hand output explanation impossible clear balls best insert board becomes wrrrbbw wrrrbbw wbbw insert board becomes wbbbw wbbbw balls remaining board out balls insert example input board wwrrbbww hand wrbrw output explanation board empty insert board becomes wwrrrbbww wwrrrbbww wwbbww insert board becomes wwbbbww wwbbbww wwww empty balls your hand needed clear board example input board hand ggggg output explanation board empty insert board becomes insert board becomes ggg ggg empty balls your hand needed clear board constraints boardlength handlength board hand consist characters initial row balls board not any groups three more consecutive balls same color

magical string magical string consists only obeys following rules string magical because concatenating number contiguous occurrences characters generates string itself first few elements group consecutive occurrences each group see occurrence sequence itself given integer return number first number magical string example input output explanation first elements magical string contains three return example input output constraints

unique substrings wraparound string define string base infinite wraparound string abcdefghijklmnopqrstuvwxyz base look zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd given string return number unique nonempty substrings present base example input output explanation only substring base example input cac output explanation two substrings base example input zab output explanation six substrings zab base constraints slength consists lowercase english letters

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

max consecutive ones given binary array nums return maximum number consecutive array example input nums output explanation first two digits last three digits consecutive maximum number consecutive example input nums output constraints numslength numsi either

next greater element next greater element some element array first greater element same array given two distinct indexed integer arrays nums nums where nums subset nums each numslength find index such numsi numsj determine next greater element numsj nums next greater element answer query return array ans length numslength such ansi next greater element described above example input nums nums output explanation next greater element each value nums follows underlined nums next greater element answer underlined nums next greater element underlined nums next greater element answer example input nums nums output explanation next greater element each value nums follows underlined nums next greater element underlined nums next greater element answer constraints numslength numslength numsi numsi integers nums nums unique integers nums also appear nums follow could find onumslength numslength solution

ones zeroes given array binary strings strs two integers return size largest subset strs such most subset set subset set elements also elements example input strs output explanation largest subset most answer other valid but smaller subsets include invalid subset because contains greater than maximum example input strs output explanation largest subset answer constraints strslength strsilength strsi consists only digits

generate random point circle given radius position center circle implement function randpoint which generates uniform random point inside circle implement solution class solutiondouble radius double xcenter double ycenter initializes object radius circle radius position center xcenter ycenter randpoint returns random point inside circle point circumference circle considered circle answer returned array example input solution randpoint randpoint randpoint output null explanation solution solution new solution solutionrandpoint return solutionrandpoint return solutionrandpoint return constraints radius xcenter ycenter most calls made randpoint

license key formatting given license key represented string consists only alphanumeric characters dashes string separated groups dashes also given integer want reformat string such each group contains exactly characters except first group which could shorter than but must contain least one character furthermore must dash inserted between two groups should convert lowercase letters uppercase return reformatted license key example input fzew output fzew explanation string split two parts each part characters note two extra dashes not needed removed example input output explanation string split three parts each part characters except first part could shorter mentioned above constraints slength consists english letters digits dashes

multiply strings given two nonnegative integers num num represented strings return product num num also represented string note must not use any builtin biginteger library convert inputs integer directly example input num num output example input num num output constraints numlength numlength num num consist digits only both num num not contain any leading zero except number itself

win game two players take turns adding running total any integer player who first causes running total reach exceed wins what change game players cannot reuse integers example two players might take turns drawing common pool numbers without replacement they reach total given two integers maxchoosableinteger desiredtotal return true first player move force win otherwise return false assume both players play optimally example input maxchoosableinteger desiredtotal output false explanation matter which integer first player choose first player lose first player choose integer first player choose second player only choose integers second player win choosing get total which desiredtotal same other integers chosen first player second player always win example input maxchoosableinteger desiredtotal output true example input maxchoosableinteger desiredtotal output true constraints maxchoosableinteger desiredtotal

count repetitions define str string str which consists string concatenated times example str abc abcabcabc define string obtained string remove some characters such becomes example abc obtained abdbec based our definition removing bolded underlined characters given two strings two integers two strings str str return maximum integer such str str obtained str example input acb output example input acb acb output constraints slength slength consist lowercase english letters

random point nonoverlapping rectangles given array nonoverlapping axisaligned rectangles rects where rectsi indicates bottomleft corner point ith rectangle topright corner point ith rectangle design algorithm pick random integer point inside space covered one given rectangles point perimeter rectangle included space covered rectangle any integer point inside space covered one given rectangles should equally likely returned note integer point point integer coordinates implement solution class solutionint rects initializes object given rectangles rects int pick returns random integer point inside space covered one given rectangles example input solution pick pick pick pick pick output null explanation solution solution new solution solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return constraints rectslength rectsilength rectangles not overlap most calls made pick

sort characters frequency given string sort decreasing order based frequency characters frequency character number times appears string return sorted string multiple answers return any them example input tree output eert explanation appears twice while both appear once must appear before both eetr also valid answer example input cccaaa output aaaccc explanation both appear three times both cccaaa aaaccc valid answers note cacaca incorrect same characters must together example input aabb output bbaa explanation bbaa also valid answer but aabb incorrect note treated two different characters constraints slength consists uppercase lowercase english letters digits

number complement complement integer integer get when flip binary representation example integer binary complement which integer given integer num return complement example input num output explanation binary representation leading zero bits complement need output example input num output explanation binary representation leading zero bits complement need output constraints num note question same httpsleetcodecomproblemscomplementofbaseinteger

teemo attacking our hero teemo attacking enemy ashe poison attacks when teemo attacks ashe ashe gets poisoned exactly duration seconds more formally attack second mean ashe poisoned inclusive time interval duration teemo attacks again before poison effect ends timer reset poison effect end duration seconds after new attack given nondecreasing integer array timeseries where timeseriesi denotes teemo attacks ashe second timeseriesi integer duration return total number seconds ashe poisoned example input timeseries duration output explanation teemos attacks ashe follows second teemo attacks ashe poisoned seconds second teemo attacks ashe poisoned seconds ashe poisoned seconds which seconds total example input timeseries duration output explanation teemos attacks ashe follows second teemo attacks ashe poisoned seconds second however teemo attacks again resets poison timer ashe poisoned seconds ashe poisoned seconds which seconds total constraints timeserieslength timeseriesi duration timeseries sorted nondecreasing order

island perimeter given row col grid representing map where gridij represents land gridij represents water grid cells connected horizontallyvertically not diagonally grid completely surrounded water exactly one island one more connected land cells island doesnt lakes meaning water inside isnt connected water around island one cell square side length grid rectangular width height dont exceed determine perimeter island example input grid output explanation perimeter yellow stripes image above example input grid output example input grid output constraints row gridlength col gridilength row col gridij exactly one island grid

smallest good base given integer represented string return smallest good base call good base digits base example input output explanation base example input output explanation base example input output explanation base constraints integer range does not contain any leading zeros

target sum given integer array nums integer target want build expression out nums adding one symbols before each integer nums concatenate integers example nums add before before concatenate them build expression return number different expressions build which evaluates target example input nums target output explanation ways assign symbols sum nums target example input nums target output constraints numslength numsi sumnumsi target

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

sum closest given integer array nums length integer target find three integers nums such sum closest target return sum three integers may assume each input would exactly one solution example input nums target output explanation sum closest target example input nums target output explanation sum closest target constraints numslength numsi target

hamming distance hamming distance between two integers number positions which corresponding bits different given two integers return hamming distance between them example input output explanation above arrows point positions where corresponding bits different example input output constraints

matchsticks square given integer array matchsticks where matchsticksi length ith matchstick want use matchsticks one square should not break any stick but link them each matchstick must used exactly one time return true square false otherwise example input matchsticks output true explanation form square length one side square came two sticks length example input matchsticks output false explanation cannot find way form square matchsticks constraints matchstickslength matchsticksi

heaters winter coming contest your first job design standard heater fixed warm radius warm houses every house warmed long house within heaters warm radius range given positions houses heaters horizontal line return minimum radius standard heaters those heaters could cover houses notice heaters follow your radius standard warm radius same example input houses heaters output explanation only heater placed position use radius standard houses warmed example input houses heaters output explanation two heater placed position need use radius standard houses warmed example input houses heaters output constraints houseslength heaterslength housesi heatersi

sliding window median median middle value ordered integer list size list even middle value median mean two middle values examples arr median examples arr median given integer array nums integer sliding window size which moving very left array very only see numbers window each time sliding window moves one position return median array each window original array answers within actual value accepted example input nums output explanation window position median example input nums output constraints numslength numsi

nondecreasing subsequences given integer array nums return different possible nondecreasing subsequences given array least two elements may return answer any order example input nums output example input nums output constraints numslength numsi

largest palindrome product given integer return largest palindromic integer represented product two ndigits integers since answer very large return modulo example input output explanation example input output constraints

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

keyboard row given array strings words return words typed using letters alphabet only one row american keyboard image below american keyboard first row consists characters qwertyuiop second row consists characters asdfghjkl third row consists characters zxcvbnm example input words helloalaskadadpeace output alaskadad example input words omk output example input words adsdfsfd output adsdfsfd constraints wordslength wordsilength wordsi consists english letters both lowercase uppercase

predict winner given integer array nums two players playing game array player player player player take turns player starting first both players start game score each turn player takes one numbers either end array nums numsnumslength which reduces size array player adds chosen number their score game ends when more elements array return true player win game scores both players equal player winner should also return true may assume both players playing optimally example input nums output false explanation initially player choose between chooses player choose player chooses player left final score player player player never winner need return false example input nums output true explanation player first chooses player choose between matter which number player choose player choose finally player more score than player need return true representing player win constraints numslength numsi

valid sudoku determine sudoku board valid only filled cells need validated according following rules each row must contain digits without repetition each column must contain digits without repetition each nine subboxes grid must contain digits without repetition note sudoku board partially filled could valid but not necessarily solvable only filled cells need validated according mentioned rules example input board output true example input board output false explanation same example except top left corner being modified since two top left subbox invalid constraints boardlength boardilength boardij digit

diagonal traverse given matrix mat return array elements array diagonal order example input mat output example input mat output constraints matlength matilength matij

minimum moves equal array elements given integer array nums size return minimum number moves required array elements equal one move increment decrement element array test cases designed answer fit bit integer example input nums output explanation only two moves needed remember each move increments decrements one element example input nums output constraints numslength numslength numsi

pattern given array integers nums pattern subsequence three integers numsi numsj numsk such numsi numsk numsj return true pattern nums otherwise return false example input nums output false explanation pattern sequence example input nums output true explanation pattern sequence example input nums output true explanation three patterns sequence constraints numslength numsi

poor pigs buckets buckets liquid where exactly one buckets poisonous figure out which one poisonous feed some number poor pigs liquid see whether they die not unfortunately only minutestotest minutes determine which bucket poisonous feed pigs according these steps choose some live pigs feed each pig choose which buckets feed pig consume chosen buckets simultaneously take time each pig feed any number buckets each bucket fed any number pigs wait minutestodie minutes may not feed any other pigs time after minutestodie minutes passed any pigs fed poisonous bucket die others survive repeat process run out time given buckets minutestodie minutestotest return minimum number pigs needed figure out which bucket poisonous within allotted time example input buckets minutestodie minutestotest output explanation determine poisonous bucket follows time feed first pig buckets feed second pig buckets time possible outcomes only first pig dies bucket must poisonous only second pig dies bucket must poisonous both pigs die bucket must poisonous neither pig dies bucket must poisonous example input buckets minutestodie minutestotest output explanation determine poisonous bucket follows time feed first pig bucket feed second pig bucket time possible outcomes either pig dies poisonous bucket one fed neither pig dies feed first pig bucket feed second pig bucket time one two pigs must die poisonous bucket one fed constraints buckets minutestodie minutestotest

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

implement rand using rand given api rand generates uniform random integer range write function rand generates uniform random integer range only call api rand shouldnt call any other api please not use languages builtin random api each test case one internal argument number times your implemented function rand called while testing note not argument passed rand example input output example input output example input output constraints follow what expected value number calls rand function could minimize number calls rand

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

total hamming distance hamming distance between two integers number positions which corresponding bits different given integer array nums return sum hamming distances between pairs integers nums example input nums output explanation binary representation showing four bits relevant case answer hammingdistance hammingdistance hammingdistance example input nums output constraints numslength numsi answer given input fit bit integer

minimum moves equal array elements given integer array nums size return minimum number moves required array elements equal one move increment elements array example input nums output explanation only three moves needed remember each move increments two elements example input nums output constraints numslength numslength numsi answer guaranteed fit bit integer

reverse pairs given integer array nums return number reverse pairs array reverse pair pair where numslength numsi numsj example input nums output explanation reverse pairs nums nums nums nums example input nums output explanation reverse pairs nums nums nums nums nums nums constraints numslength numsi

letter combinations phone number given string containing digits inclusive return possible letter combinations number could represent return answer any order mapping digits letters telephone buttons given below note does not map any letters example input digits output adaeafbdbebfcdcecf example input digits output example input digits output abc constraints digitslength digitsi digit range

group anagrams given array strings strs group anagrams together return answer any order anagram word phrase formed rearranging letters different word phrase typically using original letters exactly once example input strs eatteatanatenatbat output batnattanateeattea example input strs output example input strs output constraints strslength strsilength strsi consists lowercase english letters

super washing machines super washing machines line initially each washing machine some dresses empty each move could choose any washing machines pass one dress each washing machine one adjacent washing machines same time given integer array machines representing number dresses each washing machine left line return minimum number moves washing machines same number dresses not possible return example input machines output explanation move move move example input machines output explanation move move example input machines output explanation impossible three washing machines same number dresses constraints machineslength machinesi

complex number multiplication complex number represented string form realimaginaryi where real real part integer range imaginary imaginary part integer range given two complex numbers num num strings return string complex number represents their multiplications example input num num output explanation need convert form example input num num output explanation need convert form constraints num num valid complex numbers

ipo suppose leetcode start ipo soon order sell good price shares venture capital leetcode would work some projects increase capital before ipo since limited resources only finish most distinct projects before ipo help leetcode design best way maximize total capital after finishing most distinct projects given projects where ith project pure profit profitsi minimum capital capitali needed start initially capital when finish project obtain pure profit profit added your total capital pick list most distinct projects given projects maximize your final capital return final maximized capital answer guaranteed fit bit signed integer example input profits capital output explanation since your initial capital only start project indexed after finishing obtain profit your capital becomes capital either start project indexed project indexed since choose most projects need finish project indexed get maximum capital output final maximized capital which example input profits capital output constraints profitslength capitallength profitsi capitali

detect capital define usage capitals word when one following cases holds letters word capitals usa letters word not capitals leetcode only first letter word capital google given string word return true usage capitals example input word usa output true example input word flag output false constraints wordlength word consists lowercase uppercase english letters

find bottom left tree value given root binary tree return leftmost value last row tree example input root output example input root nullnullnull output constraints number nodes tree range nodeval

matrix given binary matrix mat return distance nearest each cell distance between two adjacent cells example input mat output example input mat output constraints matlength matilength matij either least one mat

beautiful arrangement suppose integers labeled permutation those integers perm indexed considered beautiful arrangement every either following true permi divisible divisible permi given integer return number beautiful arrangements construct example input output explanation first beautiful arrangement perm divisible perm divisible second beautiful arrangement perm divisible divisible perm example input output constraints

freedom trail video game fallout quest road freedom requires players reach metal dial called freedom trail ring use dial spell specific keyword open door given string ring represents code engraved outer ring another string key represents keyword needs spelled return minimum number steps spell characters keyword initially first character ring aligned direction should spell characters key one one rotating ring clockwise anticlockwise each character string key aligned direction pressing center button stage rotating ring spell key character keyi rotate ring clockwise anticlockwise one place which counts one step final purpose rotation align one rings characters direction where character must equal keyi character keyi aligned direction press center button spell which also counts one step after pressing could begin spell next character key next stage otherwise finished spelling example input ring godding key output explanation first key character since already place need step spell character second key character need rotate ring godding anticlockwise two steps become ddinggo also need more step spelling final output example input ring godding key godding output constraints ringlength keylength ring key consist only lower case english letters guaranteed key could always spelled rotating ring

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

minimum time difference given list hour clock time points hhmm format return minimum minutes difference between any two timepoints list example input timepoints output example input timepoints output constraints timepointslength timepointsi format hhmm

zigzag conversion string paypalishiring written zigzag pattern given number rows may want display pattern fixed font better legibility read line line pahnaplsiigyir write code take string conversion given number rows string convertstring int numrows example input paypalishiring numrows output pahnaplsiigyir example input paypalishiring numrows output pinalsigyahrpi explanation example input numrows output constraints slength consists english letters lowercase uppercase numrows

reverse string given string integer reverse first characters every characters counting start string fewer than characters left reverse them less than but greater than equal characters reverse first characters leave other original example input abcdefg output bacdfeg example input abcd output bacd constraints slength consists only lowercase english letters

kdiff pairs array given array integers nums integer return number unique kdiff pairs array kdiff pair integer pair numsi numsj where following true numslength numsi numsj notice val denotes absolute value val example input nums output explanation two diff pairs array although two input should only return number unique pairs example input nums output explanation four diff pairs array example input nums output explanation one diff pair array constraints numslength numsi

random flip matrix binary grid matrix values set initially design algorithm randomly pick index where matrixij flips indices where matrixij should equally likely returned optimize your algorithm minimize number calls made builtin random function your language optimize time space complexity implement solution class solutionint int initializes object size binary matrix int flip returns random index matrix where matrixij flips void reset resets values matrix example input solution flip flip flip reset flip output null null explanation solution solution new solution solutionflip return should equally likely returned solutionflip return since returned solutionflip return based previously returned indices only returned solutionreset values reset returned solutionflip return should equally likely returned constraints least one free cell each call flip most calls made flip reset

relative ranks given integer array score size where scorei score ith athlete competition scores guaranteed unique athletes placed based their scores where place athlete highest score place athlete highest score placement each athlete determines their rank place athletes rank gold medal place athletes rank silver medal place athletes rank bronze medal place nth place athlete their rank their placement number xth place athletes rank return array answer size where answeri rank ith athlete example input score output gold medalsilver medalbronze medal explanation placements example input score output gold medalbronze medalsilver medal explanation placements constraints scorelength scorei values score unique

next greater element given circular integer array nums next element numsnumslength nums return next greater number every element nums next greater number number first greater number traversingorder next array which means could search circularly find next greater number doesnt exist return number example input nums output explanation first next greater number number cant find next greater number second next greater number needs search circularly which also example input nums output constraints numslength numsi

diameter binary tree given root binary tree return length diameter tree diameter binary tree length longest path between any two nodes tree path may may not pass root length path between two nodes represented number edges between them example input root output explanation length path example input root output constraints number nodes tree range nodeval

most frequent subtree sum given root binary tree return most frequent subtree sum tie return values highest frequency any order subtree sum node defined sum node values formed subtree rooted node node itself example input root output example input root output constraints number nodes tree range nodeval

game play analysis sql schema table activity column name type playerid int deviceid int eventdate date gamesplayed int playerid eventdate primary key table table shows activity players some games each row record player who logged played number games possibly before logging out someday using some device write sql query report fraction players logged again day after day they first logged rounded decimal places other words need count number players logged least two consecutive days starting their first login date divide number total number players query result format following example example input activity table playerid deviceid eventdate gamesplayed output fraction explanation only player logged back after first day logged answer

minesweeper lets play minesweeper game wikipedia online game given char matrix board representing game board where represents unrevealed mine represents unrevealed empty square represents revealed blank square adjacent mines above below left diagonals digit represents how many mines adjacent revealed square represents revealed mine also given integer array click where click clickr clickc represents next click position unrevealed squares return board after revealing position according following rules mine revealed game over should change empty square adjacent mines revealed change revealed blank adjacent unrevealed squares should revealed recursively empty square least one adjacent mine revealed change digit representing number adjacent mines return board when more squares revealed example input board eeeeeeemeeeeeeeeeeee click output bebbmbbbbbbbb example input board bebbmbbbbbbbb click output bebbxbbbbbbbb constraints boardlength boardilength boardij either digit clicklength clickr clickc boardclickrclickc either

contiguous array given binary array nums return maximum length contiguous subarray equal number example input nums output explanation longest contiguous subarray equal number example input nums output explanation longest contiguous subarray equal number constraints numslength numsi either

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

perfect number perfect number positive integer equal sum positive divisors excluding number itself divisor integer integer divide evenly given integer return true perfect number otherwise return false example input num output true explanation divisors example input num output false constraints num

coin change given integer array coins representing coins different denominations integer amount representing total amount money return number combinations amount amount money cannot made any combination coins return may assume infinite number each kind coin answer guaranteed fit signed bit integer example input amount coins output explanation four ways amount example input amount coins output explanation amount cannot made coins example input amount coins output constraints coinslength coinsi values coins unique amount

random pick weight given indexed array positive integers where describes weight ith index need implement function pickindex which randomly picks index range wlength inclusive returns probability picking index sumw example probability picking index probability picking index example input solutionpickindex output null explanation solution solution new solution solutionpickindex return only option return since only one element example input solutionpickindexpickindexpickindexpickindexpickindex output null explanation solution solution new solution solutionpickindex return returning second element index probability solutionpickindex return solutionpickindex return solutionpickindex return solutionpickindex return returning first element index probability since randomization problem multiple answers allowed following outputs considered correct null null null null null constraints wlength pickindex called most times

convert bst greater tree given root binary search tree bst convert greater tree such every key original bst changed original key plus sum keys greater than original key bst reminder binary search tree tree satisfies these constraints left subtree node contains only nodes keys less than nodes key subtree node contains only nodes keys greater than nodes key both left subtrees must also binary search trees example input root nullnullnullnullnullnull output nullnullnullnullnullnull example input root null output null constraints number nodes tree range nodeval values tree unique root guaranteed valid binary search tree note question same httpsleetcodecomproblemsbinarysearchtreetogreatersumtree

remove boxes given several boxes different colors represented different positive numbers may experience several rounds remove boxes box left each time choose some continuous boxes same color composed boxes remove them get points return maximum points get example input boxes output explanation points points points points example input boxes output example input boxes output constraints boxeslength boxesi

encode decode tinyurl note companion problem system design problem design tinyurl tinyurl url shortening service where enter url such httpsleetcodecomproblemsdesigntinyurl returns short url such httptinyurlcomeiak design class encode url decode tiny url restriction how your encodedecode algorithm should work need ensure url encoded tiny url tiny url decoded original url implement solution class solution initializes object system string encodestring longurl returns tiny url given longurl string decodestring shorturl returns original long url given shorturl guaranteed given shorturl encoded same object example input url httpsleetcodecomproblemsdesigntinyurl output httpsleetcodecomproblemsdesigntinyurl explanation solution obj new solution string tiny objencodeurl returns encoded tiny url string ans objdecodetiny returns original url after decoding constraints urllength url guranteed valid url

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

single element sorted array given sorted array consisting only integers where every element appears exactly twice except one element which appears exactly once return single element appears only once your solution must run olog time space example input nums output example input nums output constraints numslength numsi

roman integer roman numerals represented seven different symbols symbol value example written roman numeral two ones added together written xii which simply number written xxvii which roman numerals usually written largest smallest left however numeral four not iiii instead number four written because one before five subtract making four same principle applies number nine which written six instances where subtraction used placed before placed before placed before given roman numeral convert integer example input iii output explanation iii example input lviii output explanation iii example input mcmxciv output explanation constraints slength contains only characters guaranteed valid roman numeral range

continuous subarray sum given integer array nums integer return true nums good subarray false otherwise good subarray subarray where length least two sum elements subarray multiple note subarray contiguous part array integer multiple exists integer such always multiple example input nums output true explanation continuous subarray size whose elements sum example input nums output true explanation continuous subarray size whose elements sum multiple because integer example input nums output false constraints numslength numsi sumnumsi

base given integer num return string base representation example input num output example input num output constraints num

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

longest word dictionary deleting given string string array dictionary return longest string dictionary formed deleting some given string characters more than one possible result return longest word smallest lexicographical order possible result return empty string example input abpcplea dictionary aleapplemonkeyplea output apple example input abpcplea dictionary abc output constraints slength dictionarylength dictionaryilength dictionaryi consist lowercase english letters

minimum absolute difference bst given root binary search tree bst return minimum absolute difference between values any two different nodes tree example input root output example input root nullnull output constraints number nodes tree range nodeval note question same httpsleetcodecomproblemsminimumdistancebetweenbstnodes

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

game play analysis sql schema table activity column name type playerid int deviceid int eventdate date gamesplayed int playerid eventdate primary key table table shows activity players some games each row record player who logged played number games possibly before logging out someday using some device write sql query report first login date each player return result table any order query result format following example example input activity table playerid deviceid eventdate gamesplayed output playerid firstlogin

find mode binary search tree given root binary search tree bst duplicates return modes most frequently occurred element tree more than one mode return them any order assume bst defined follows left subtree node contains only nodes keys less than equal nodes key subtree node contains only nodes keys greater than equal nodes key both left subtrees must also binary search trees example input root null output example input root output constraints number nodes tree range nodeval follow could without using any extra space assume implicit stack space incurred due recursion does not count

longest uncommon subsequence given array strings strs return length longest uncommon subsequence between them longest uncommon subsequence does not exist return uncommon subsequence between array strings string subsequence one string but not others subsequence string string obtained after deleting any number characters example abc subsequence aebdc because delete underlined characters aebdc get abc other subsequences aebdc include aebdc aeb empty string example input strs abacdceae output example input strs aaaaaaaa output constraints strslength strsilength strsi consists lowercase english letters

fibonacci number fibonacci numbers commonly denoted form sequence called fibonacci sequence such each number sum two preceding ones starting given calculate example input output explanation example input output explanation example input output explanation constraints

two sum given array integers nums integer target return indices two numbers such they add target may assume each input would exactly one solution may not use same element twice return answer any order example input nums target output explanation because nums nums return example input nums target output example input nums target output constraints numslength numsi target only one valid answer exists followup come algorithm less than time complexity

find largest value each tree row given root binary tree return array largest value each row tree indexed example input root null output example input root output constraints number nodes tree range nodeval

longest uncommon subsequence given two strings return length longest uncommon subsequence between longest uncommon subsequence does not exist return uncommon subsequence between two strings string subsequence one but not other subsequence string string obtained after deleting any number characters example abc subsequence aebdc because delete underlined characters aebdc get abc other subsequences aebdc include aebdc aeb empty string example input aba cdc output explanation one longest uncommon subsequence aba because aba subsequence aba but not cdc note cdc also longest uncommon subsequence example input aaa bbb output explanation longest uncommon subsequences aaa bbb example input aaa aaa output explanation every subsequence string also subsequence string similarly every subsequence string also subsequence string constraints alength blength consist lowercase english letters

longest palindromic subsequence given string find longest palindromic subsequences length subsequence sequence derived another sequence deleting some elements without changing order remaining elements example input bbbab output explanation one possible longest palindromic subsequence bbbb example input cbbd output explanation one possible longest palindromic subsequence constraints slength consists only lowercase english letters

binary tree tilt given root binary tree return sum every tree nodes tilt tilt tree node absolute difference between sum left subtree node values subtree node values node does not left child sum left subtree node values treated rule similar node does not child example input root output explanation tilt node children tilt node children tilt node left subtree left child sum subtree child sum sum every tilt example input root null output explanation tilt node children tilt node children tilt node children tilt node left subtree left child sum subtree child sum tilt node left child sum subtree child sum tilt node left subtree values which sums subtree values which sums sum every tilt example input root output constraints number nodes tree range nodeval

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

classes more than students sql schema table courses column name type student varchar class varchar student class primary key column table each row table indicates name student class which they enrolled write sql query report classes least five students return result table any order query result format following example example input courses table student class math english math biology math computer math math math output class math explanation math students include english student not include biology student not include computer student not include

employee bonus sql schema table employee column name type empid int name varchar supervisor int salary int empid primary key column table each row table indicates name employee addition their salary their manager table bonus column name type empid int bonus int empid primary key column table empid foreign key empid employee table each row table contains employee their respective bonus write sql query report name bonus amount each employee bonus less than return result table any order query result format following example example input employee table empid name supervisor salary brad null john dan thomas bonus table empid bonus output name bonus brad null john null dan

subarray sum equals given array integers nums integer return total number subarrays whose sum equals subarray contiguous nonempty sequence elements within array example input nums output example input nums output constraints numslength numsi

tag validator given string representing code snippet implement tag validator parse code return whether valid code snippet valid following rules hold code must wrapped valid closed tag otherwise code invalid closed tag not necessarily valid exactly following format tagnametagcontenttagname them tagname start tag tagname end tag tagname start end tags should same closed tag valid only tagname tagcontent valid valid tagname only contain uppercase letters length range otherwise tagname invalid valid tagcontent may contain other valid closed tags cdata any characters see note except unmatched unmatched start end tag unmatched closed tags invalid tagname otherwise tagcontent invalid start tag unmatched end tag exists same tagname vice versa however also need consider issue unbalanced when tags nested unmatched cannot find subsequent when find subsequent characters next should parsed tagname not necessarily valid cdata following format cdatacdatacontent range cdatacontent defined characters between cdata first subsequent cdatacontent may contain any characters function cdata forbid validator parse cdatacontent even some characters parsed tag matter valid invalid should treat regular characters example input code divthis first line cdatadivdiv output true explanation code wrapped closed tag div div tagname valid tagcontent consists some characters cdata although cdatacontent unmatched start tag invalid tagname should considered plain text not parsed tag tagcontent valid code valid return true example input code div cdata cdatadivdiv output true explanation first separate code starttagtagcontentendtag starttag div endtag div tagcontent could also separated textcdatatext text cdata cdata cdatadiv where cdatacontent div text reason why starttag not div because rule reason why cdata not cdatadiv because rule example input code output false explanation unbalanced closed must unmatched vice versa constraints codelength code consists english letters digits

managers least direct reports sql schema table employee column name type int name varchar department varchar managerid int primary key column table each row table indicates name employee their department their manager managerid null employee does not manager employee manager themself write sql query report managers least five direct reports return result table any order query result format following example example input employee table name department managerid john none dan james amy anne ron output name john

powx implement powx which calculates raised power example input output example input output example input output explanation constraints integer either not zero

optimal division given integer array nums adjacent integers nums perform float division example nums evaluate expression however add any number parenthesis any position change priority operations want add these parentheses such value expression after evaluation maximum return corresponding expression maximum value string format note your expression should not contain redundant parenthesis example input nums output explanation however bold parenthesis redundant since they not influence operation priority should return other cases example input nums output explanation shown after trying possibilities cannot get expression evaluation greater than constraints numslength numsi only one optimal division given input

reshape matrix matlab handy function called reshape which reshape matrix new one different size keeping original data given matrix mat two integers representing number rows number columns wanted reshaped matrix reshaped matrix should filled elements original matrix same rowtraversing order they reshape operation given parameters possible legal output new reshaped matrix otherwise output original matrix example input mat output example input mat output constraints matlength matilength matij

next greater element iii given positive integer find smallest integer which exactly same digits existing integer greater value than such positive integer exists return note returned integer should fit bit integer valid answer but does not fit bit integer return example input output example input output constraints

nary tree postorder traversal given root nary tree return postorder traversal nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints number nodes tree range nodeval height nary tree less than equal follow recursive solution trivial could iteratively

maximum depth nary tree given nary tree find maximum depth maximum depth number nodes along longest path root node down farthest leaf node narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints total number nodes range depth nary tree less than equal

nary tree preorder traversal given root nary tree return preorder traversal nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints number nodes tree range nodeval height nary tree less than equal follow recursive solution trivial could iteratively

range addition given matrix initialized array operations ops where opsi means mxy should incremented one count return number maximum integers matrix after performing operations example input ops output explanation maximum integer four return example input ops output example input ops output constraints opslength opsilength

fraction addition subtraction given string expression representing expression fraction addition subtraction return calculation result string format final result should irreducible fraction your final result integer change format fraction denominator case should converted example input expression output example input expression output example input expression output constraints input string only contains does output each fraction input output format ±numeratordenominator first input fraction output positive omitted input only contains valid irreducible fractions where numerator denominator each fraction always range denominator means fraction integer fraction format defined above number given fractions range numerator denominator final result guaranteed valid range bit int

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

student attendance record given string representing attendance record student where each character signifies whether student absent late present day record only contains following three characters absent late present student eligible attendance award they meet both following criteria student absent strictly fewer than days total student never late more consecutive days return true student eligible attendance award false otherwise example input ppallp output true explanation student fewer than absences never late more consecutive days example input ppalll output false explanation student late consecutive days last days not eligible award constraints slength either

count say countandsay sequence sequence digit strings defined recursive formula countandsay countandsayn way would say digit string countandsayn which converted different digit string determine how say digit string split minimal number substrings such each substring contains exactly one unique digit each substring say number digits say digit finally concatenate every said digit example saying conversion digit string given positive integer return nth term countandsay sequence example input output explanation base case example input output explanation countandsay countandsay say one countandsay say two countandsay say one one constraints

valid square given coordinates four points space return true four points construct square coordinate point represented input not given any order valid square four equal sides positive length four equal angles degree angles example input output true example input output false example input output true constraints plength plength plength plength

customer placing largest number orders sql schema table orders column name type ordernumber int customernumber int ordernumber primary key table table contains information about order customer write sql query find customernumber customer who placed largest number orders test cases generated exactly one customer placed more orders than any other customer query result format following example example input orders table ordernumber customernumber output customernumber explanation customer number two orders which greater than either customer because each them only one order result customernumber follow what more than one customer largest number orders find customernumber case

big countries sql schema table world column name type name varchar continent varchar area int population int gdp bigint name primary key column table each row table gives information about name country continent which belongs area population gdp value country big area least three million population least twentyfive million write sql query report name population area big countries return result table any order query result format following example example input world table name continent area population gdp afghanistan asia albania europe algeria africa andorra europe angola africa output name population area afghanistan algeria

reverse words string iii given string reverse order characters each word within sentence while preserving whitespace initial word order example input lets take leetcode contest output stel ekat edocteel tsetnoc example input god ding output dog gnid constraints slength contains printable ascii characters does not contain any leading trailing spaces least one word words separated single space

subtree another tree given roots two binary trees root subroot return true subtree root same structure node values subroot false otherwise subtree binary tree tree tree consists node tree nodes descendants tree tree could also considered subtree itself example input root subroot output true example input root nullnullnullnull subroot output false constraints number nodes root tree range number nodes subroot tree range rootval subrootval

erect fence given array trees where treesi represents location tree garden fence entire garden using minimum length rope expensive garden wellfenced only trees enclosed return coordinates trees exactly located fence perimeter may return answer any order example input trees output explanation trees perimeter fence except tree which inside fence example input trees output explanation fence forms line passes trees constraints treeslength treesilength given positions unique

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

logical two binary grids represented quadtrees binary matrix matrix which elements either given quadtree quadtree quadtree represents binary matrix quadtree represents another binary matrix return quadtree representing binary matrix which result logical bitwise two binary matrixes represented quadtree quadtree notice assign value node true false when isleaf false both accepted answer quadtree tree data structure which each internal node exactly four children besides each node two attributes val true node represents grid false node represents grid isleaf true node leaf node tree false node four children class node public boolean val public boolean isleaf public node topleft public node topright public node bottomleft public node bottomright construct quadtree twodimensional area using following steps current grid same value set isleaf true set val value grid set four children null stop current grid different values set isleaf false set val any value divide current grid four subgrids shown photo recurse each children proper subgrid want know more about quadtree refer wiki quadtree format inputoutput represents serialized format quadtree using level order traversal where null signifies path terminator where node exists below very similar serialization binary tree only difference node represented list isleaf val value isleaf val true represent list isleaf val value isleaf val false represent example input quadtree quadtree nullnullnullnull output explanation quadtree quadtree shown above see binary matrix which represented each quadtree apply logical bitwise two binary matrices get binary matrix below which represented result quadtree notice binary matrices shown only illustration dont construct binary matrix get result tree example input quadtree quadtree output explanation each tree represents binary matrix size each matrix contains only zero resulting matrix size also zero constraints quadtree quadtree both valid quadtrees each representing grid where

student attendance record attendance record student represented string where each character signifies whether student absent late present day record only contains following three characters absent late present any student eligible attendance award they meet both following criteria student absent strictly fewer than days total student never late more consecutive days given integer return number possible attendance records length student eligible attendance award answer may very large return modulo example input output explanation records length eligible award only not eligible because absences need fewer than example input output example input output constraints

array nesting given integer array nums length where nums permutation numbers range should build set numsk numsnumsk numsnumsnumsk subjected following rule first element starts selection element numsk index next element should numsnumsk numsnumsnumsk stop adding before duplicate element occurs return longest length set example input nums output explanation nums nums nums nums nums nums nums one longest sets nums nums nums nums example input nums output constraints numslength numsi numslength values nums unique

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

find closest palindrome given string representing integer return closest integer not itself which palindrome tie return smaller one closest defined absolute difference minimized between two integers example input output example input output explanation closest palindromes but return smallest which constraints nlength consists only digits does not leading zeros representing integer range

shortest unsorted continuous subarray given integer array nums need find one continuous subarray such only sort subarray nondecreasing order whole array sorted nondecreasing order return shortest such subarray output length example input nums output explanation need sort ascending order whole array sorted ascending order example input nums output example input nums output constraints numslength numsi follow solve time complexity

investments sql schema table insurance column name type pid int tiv float tiv float lat float lon float pid primary key column table each row table contains information about one policy where pid policyholders policy tiv total investment value tiv total investment value lat latitude policy holders city guaranteed lat not null lon longitude policy holders city guaranteed lon not null write sql query report sum total investment values tiv policyholders who same tiv value one more other policyholders not located same city any other policyholder lat lon attribute pairs must unique round tiv two decimal places query result format following example example input insurance table pid tiv tiv lat lon output tiv explanation first record table last record meets both two criteria tiv value same third fourth records location unique second record does not meet any two criteria tiv not any other policyholders location same third record which makes third record fail too result sum tiv first last record which

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

brick wall rectangular brick wall front rows bricks ith row some number bricks each same height one unit but they different widths total width each row same draw vertical line top bottom cross least bricks your line goes edge brick brick not considered crossed cannot draw line along one two vertical edges wall which case line obviously cross bricks given array wall contains information about wall return minimum number crossed bricks after drawing such vertical line example input wall output example input wall output constraints walllength wallilength sumwallilength sumwalli same each row wallij

find customer referee sql schema table customer column name type int name varchar refereeid int primary key column table each row table indicates customer their name customer who referred them write sql query report names customer not referred customer return result table any order query result format following example example input customer table name refereeid null jane null alex bill null zack mark output name jane bill zack

minimum index sum two lists given two arrays strings list list find common strings least index sum common string string appeared both list list common string least index sum common string such appeared listi listj should minimum value other common strings return common strings least index sum return answer any order example input list shoguntapioca expressburger kingkfc list piattithe grill torrey pineshungry hunter steakhouseshogun output shogun explanation only common string shogun example input list shoguntapioca expressburger kingkfc list kfcshogunburger king output shogun explanation common string least index sum shogun index sum example input list happysadgood list sadhappygood output sadhappy explanation three common strings happy index sum sad index sum good index sum strings least index sum sad happy constraints listlength listlength listilength listilength listi listi consist spaces english letters strings list unique strings list unique least common string between list list

nonnegative integers without consecutive ones given positive integer return number integers range whose binary representations not contain consecutive ones example input output explanation here nonnegative integers their corresponding binary representations them only integer disobeys rule two consecutive ones other satisfy rule example input output example input output constraints

delete operation two strings given two strings word word return minimum number steps required word word same one step delete exactly one character either string example input word sea word eat output explanation need one step sea another step eat example input word leetcode word etco output constraints wordlength wordlength word word consist only lowercase english letters

permutation string given two strings return true contains permutation false otherwise other words return true one permutations substring example input eidbaooo output true explanation contains one permutation example input eidboaoo output false constraints slength slength consist lowercase english letters

next permutation permutation array integers arrangement members sequence linear order example arr following permutations arr next permutation array integers next lexicographically greater permutation integer more formally permutations array sorted one container according their lexicographical order next permutation array permutation follows sorted container such arrangement not possible array must rearranged lowest possible order sorted ascending order example next permutation arr similarly next permutation arr while next permutation arr because does not lexicographical larger rearrangement given array integers nums find next permutation nums replacement must place use only constant extra memory example input nums output example input nums output example input nums output constraints numslength numsi

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

array partition given integer array nums integers group these integers pairs such sum minai maximized return maximized sum example input nums output explanation possible pairings ignoring ordering elements min min min min min min maximum possible sum example input nums output explanation optimal pairing min min min constraints numslength numsi

distribute candies alice candies where ith candy type candytypei alice noticed she started gain weight she visited doctor doctor advised alice only eat candies she always even alice likes her candies very much she wants eat maximum number different types candies while following doctors advice given integer array candytype length return maximum number different types candies she eat she only eats them example input candytype output explanation alice only eat candies since only types she eat one each type example input candytype output explanation alice only eat candies whether she eats types she only eat different types example input candytype output explanation alice only eat candies even though she eat candies she only type constraints candytypelength even candytypei

longest harmonious subsequence define harmonious array array where difference between maximum value minimum value exactly given integer array nums return length longest harmonious subsequence possible subsequences subsequence array sequence derived array deleting some elements without changing order remaining elements example input nums output explanation longest harmonious subsequence example input nums output example input nums output constraints numslength numsi

out boundary paths grid ball ball initially position startrow startcolumn allowed move ball one four adjacent cells grid possibly out grid crossing grid boundary apply most maxmove moves ball given five integers maxmove startrow startcolumn return number paths move ball out grid boundary since answer very large return modulo example input maxmove startrow startcolumn output example input maxmove startrow startcolumn output constraints maxmove startrow startcolumn

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

search insert position given sorted array distinct integers target value return index target found not return index where would inserted order must write algorithm olog runtime complexity example input nums target output example input nums target output example input nums target output constraints numslength numsi nums contains distinct values sorted ascending order target

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

min cost climbing stairs given integer array cost where costi cost ith step staircase once pay cost either climb one two steps either start step index step index return minimum cost reach top floor example input cost output explanation start index pay climb two steps reach top total cost example input cost output explanation start index pay climb two steps reach index pay climb two steps reach index pay climb two steps reach index pay climb one step reach index pay climb two steps reach index pay climb one step reach top total cost constraints costlength costi

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

design hashset design hashset without using any builtin hash table libraries implement myhashset class void addkey inserts value key hashset bool containskey returns whether value key exists hashset not void removekey removes value key hashset key does not exist hashset nothing example input myhashset add add contains contains add contains remove contains output null null null true false null true null false explanation myhashset myhashset new myhashset myhashsetadd set myhashsetadd set myhashsetcontains return true myhashsetcontains return false not found myhashsetadd set myhashsetcontains return true myhashsetremove set myhashsetcontains return false already removed constraints key most calls made add remove contains

best time buy sell stock transaction fee given array prices where pricesi price given stock ith day integer fee representing transaction fee find maximum profit achieve may complete many transactions but need pay transaction fee each transaction note may not engage multiple transactions simultaneously must sell stock before buy again example input prices fee output explanation maximum profit achieved buying prices selling prices buying prices selling prices total profit example input prices fee output constraints priceslength pricesi fee

number atoms given string formula representing chemical formula return count each atom atomic element always starts uppercase character zero more lowercase letters representing name one more digits representing elements count may follow count greater than count digits follow example possible but impossible two formulas concatenated together produce another formula example hohemg also formula formula placed parentheses count optionally added also formula example formulas return count elements string following form first name sorted order followed count count more than followed second name sorted order followed count count more than test cases generated values output fit bit integer example input formula output explanation count elements example input formula mgoh output hmgo explanation count elements example input formula konso output knos explanation count elements constraints formulalength formula consists english letters digits formula always valid

insert binary search tree given root node binary search tree bst value insert tree return root node bst after insertion guaranteed new value does not exist original bst notice may exist multiple valid ways insertion long tree remains bst after insertion return any them example input root val output explanation another accepted tree example input root val output nullnull example input root nullnullnullnullnullnull val output constraints number nodes tree range nodeval values nodeval unique val guaranteed val does not exist original bst

calendar iii kbooking happens when events some nonempty intersection some time common events given some events starttime endtime after each given event return integer representing maximum kbooking between previous events implement mycalendarthree class mycalendarthree initializes object int bookint starttime int endtime returns integer representing largest integer such exists kbooking calendar example input mycalendarthree book book book book book book output null explanation mycalendarthree mycalendarthree new mycalendarthree mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return constraints starttime endtime most calls made book

remove comments given program remove comments program source array strings source where sourcei ith line source code represents result splitting original source code string newline character two types comments line comments block comments string denotes line comment which represents rest characters same line should ignored string denotes block comment which represents characters next nonoverlapping occurrence should ignored here occurrences happen reading order line line left clear string does not yet end block comment ending would overlapping beginning first effective comment takes precedence over others example string occurs block comment ignored similarly string occurs line block comment also ignored certain line code empty after removing comments must not output line each string answer list nonempty control characters single quote double quote characters example source string not comment not test case also nothing else such defines macros interfere comments guaranteed every open block comment eventually closed outside line block comment always starts new comment finally implicit newline characters deleted block comments please see examples below details after removing comments source code return source code same format example input source test program int main variable declaration int test multiline comment testing output int main int explanation line line code visualized below test program int main variable declaration int test multiline comment testing string denotes block comment line lines string denotes line comments line line output code visualized below int main int example input source acomment line morecommentb output explanation original source string acommentnlinenmorecommentb where bolded newline characters after deletion implicit newline characters deleted leaving string which when delimited newline characters becomes constraints sourcelength sourceilength sourcei consists printable ascii characters every open block comment eventually closed singlequote doublequote input

palindrome number given integer return true palindrome false otherwise example input output true explanation reads left left example input output false explanation left reads left becomes not palindrome example input output false explanation reads left not palindrome constraints follow could solve without converting integer string

longest palindromic substring given string return longest palindromic substring example input babad output bab explanation aba also valid answer example input cbbd output constraints slength consist only digits english letters

prefix suffix search design special dictionary searches words prefix suffix implement wordfilter class wordfilterstring words initializes object words dictionary fstring pref string suff returns index word dictionary which prefix pref suffix suff more than one valid index return largest them such word dictionary return example input wordfilter apple output null explanation wordfilter wordfilter new wordfilterapple wordfilterfa return because word index prefix suffix constraints wordslength wordsilength preflength sufflength wordsi pref suff consist lowercase english letters only most calls made function

self dividing numbers selfdividing number number divisible every digit contains example selfdividing number because selfdividing number not allowed contain digit zero given two integers left return list selfdividing numbers range left example input left output example input left output constraints left

contain virus virus spreading rapidly your task quarantine infected area installing walls world modeled binary grid isinfected where isinfectedij represents uninfected cells isinfectedij represents cells contaminated virus wall only one wall installed between any two directionally adjacent cells shared boundary every night virus spreads neighboring cells four directions unless blocked wall resources limited each day install walls around only one region affected area continuous block infected cells threatens most uninfected cells following night never tie return number walls used quarantine infected regions world become fully infected return number walls used example input isinfected output explanation contaminated regions first day add walls quarantine viral region left board after virus spreads second day add walls quarantine viral region virus fully contained example input isinfected output explanation even though only one cell saved walls built notice walls only built shared boundary two different cells example input isinfected output explanation region left only builds two new walls constraints isinfectedlength isinfectedilength isinfectedij either always contiguous viral region described process infect strictly more uncontaminated squares next round

count different palindromic subsequences given string return number different nonempty palindromic subsequences since answer may very large return modulo subsequence string obtained deleting zero more characters string sequence palindromic equal sequence reversed two sequences different some which example input bccb output explanation different nonempty palindromic subsequences bcb bccb note bcb counted only once even though occurs twice example input abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba output explanation different nonempty palindromic subsequences which modulo constraints slength either

largest number least twice others given integer array nums where largest integer unique determine whether largest element array least twice much every other number array return index largest element return otherwise example input nums output explanation largest integer every other number array least twice big index value return example input nums output explanation less than twice value return constraints numslength numsi largest element nums unique

calendar implementing program use your calendar add new event adding event not cause triple booking triple booking happens when three events some nonempty intersection some moment common three events event represented pair integers start end represents booking halfopen interval start end range real numbers such start end implement mycalendartwo class mycalendartwo initializes calendar object boolean bookint start int end returns true event added calendar successfully without causing triple booking otherwise return false not add event calendar example input mycalendartwo book book book book book book output null true true true false true true explanation mycalendartwo mycalendartwo new mycalendartwo mycalendartwobook return true event booked mycalendartwobook return true event booked mycalendartwobook return true event double booked mycalendartwobook return false event cannot booked because would result triple booking mycalendartwobook return true event booked does not use time which already double booked mycalendartwobook return true event booked time double booked third event time single booked time double booked second event constraints start end most calls made book

monotone increasing digits integer monotone increasing digits only each pair adjacent digits satisfy given integer return largest number less than equal monotone increasing digits example input output example input output example input output constraints

cherry pickup given grid representing field cherries each cell one three possible integers means cell empty pass means cell contains cherry pick pass means cell contains thorn blocks your way return maximum number cherries collect following rules below starting position reaching moving down valid path cells cells value after reaching returning moving left valid path cells when passing path cell containing cherry pick cell becomes empty cell valid path between cherries collected example input grid output explanation player started went down down reach cherries picked single trip matrix becomes player went left left return home picking one more cherry total number cherries picked maximum possible example input grid output constraints gridlength gridilength gridij grid gridn

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

random pick blacklist given integer array unique integers blacklist design algorithm pick random integer range not blacklist any integer mentioned range not blacklist should equally likely returned optimize your algorithm such minimizes number calls builtin random function your language implement solution class solutionint int blacklist initializes object integer blacklisted integers blacklist int pick returns random integer range not blacklist example input solution pick pick pick pick pick pick pick output null explanation solution solution new solution solutionpick return any integer should note every call pick must equally likely returned probability solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return constraints blacklistlength min blacklisti values blacklist unique most calls made pick

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

asteroid collision given array asteroids integers representing asteroids row each asteroid absolute value represents size sign represents direction positive meaning negative meaning left each asteroid moves same speed find out state asteroids after collisions two asteroids meet smaller one explode both same size both explode two asteroids moving same direction never meet example input asteroids output explanation collide resulting never collide example input asteroids output explanation collide exploding each other example input asteroids output explanation collide resulting collide resulting constraints asteroidslength asteroidsi asteroidsi

find pivot index given array integers nums calculate pivot index array pivot index index where sum numbers strictly left index equal sum numbers strictly indexs index left edge array left sum because elements left also applies edge array return leftmost pivot index such index exists return example input nums output explanation pivot index left sum nums nums nums sum nums nums example input nums output explanation index satisfies conditions problem statement example input nums output explanation pivot index left sum elements left index sum nums nums constraints numslength numsi note question same httpsleetcodecomproblemsfindthemiddleindexinarray

network delay time given network nodes labeled also given times list travel times directed edges timesi where source node target node time takes signal travel source target send signal given node return minimum time takes nodes receive signal impossible nodes receive signal return example input times output example input times output example input times output constraints timeslength timesilength pairs unique multiple edges

calendar implementing program use your calendar add new event adding event not cause double booking double booking happens when two events some nonempty intersection some moment common both events event represented pair integers start end represents booking halfopen interval start end range real numbers such start end implement mycalendar class mycalendar initializes calendar object boolean bookint start int end returns true event added calendar successfully without causing double booking otherwise return false not add event calendar example input mycalendar book book book output null true false true explanation mycalendar mycalendar new mycalendar mycalendarbook return true mycalendarbook return false not booked because time already booked another event mycalendarbook return true event booked first event takes every time less than but not constraints start end most calls made book

delete earn given integer array nums want maximize number points get performing following operation any number times pick any numsi delete earn numsi points afterwards must delete every element equal numsi every element equal numsi return maximum number points earn applying above operation some number times example input nums output explanation perform following operations delete earn points consequently also deleted nums delete earn points nums earn total points example input nums output explanation perform following operations delete earn points also deleted nums delete again earn points nums delete once more earn points nums earn total points constraints numslength numsi

find smallest letter greater than target given array characters letters sorted nondecreasing order character target least two different characters letters return smallest character letters lexicographically greater than target such character does not exist return first character letters example input letters cfj target output explanation smallest character lexicographically greater than letters example input letters cfj target output explanation smallest character lexicographically greater than letters example input letters xxyy target output explanation characters letters lexicographically greater than return letters constraints letterslength lettersi lowercase english letter letters sorted nondecreasing order letters contains least two different characters target lowercase english letter

subarray product less than given array integers nums integer return number contiguous subarrays where product elements subarray strictly less than example input nums output explanation subarrays product less than note not included product not strictly less than example input nums output constraints numslength numsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

minimum ascii delete sum two strings given two strings return lowest ascii sum deleted characters two strings equal example input sea eat output explanation deleting sea adds ascii value sum deleting eat adds sum end both strings equal minimum sum possible achieve example input delete leet output explanation deleting dee delete turn string let adds sum deleting leet adds sum end both strings equal let answer instead turned both strings lee eet would get answers which higher constraints slength slength consist lowercase english letters

lower case given string return string after replacing every uppercase letter same lowercase letter example input hello output hello example input here output here example input lovely output lovely constraints slength consists printable ascii characters

string integer atoi implement myatoistring function which converts string bit signed integer similar ccs atoi function algorithm myatoistring follows read ignore any leading whitespace check next character not already end string read character either determines final result negative positive respectively assume result positive neither present read next characters next nondigit character end input reached rest string ignored convert these digits integer digits read integer change sign necessary step integer out bit signed integer range clamp integer remains range specifically integers less than should clamped integers greater than should clamped return integer final result note only space character considered whitespace character not ignore any characters other than leading whitespace rest string after digits example input output explanation underlined characters what read caret current reader position step characters read because leading whitespace step characters read because neither nor step read parsed integer since range final result example input output explanation step leading whitespace read ignored step read result should negative step read parsed integer since range final result example input words output explanation step words characters read because leading whitespace step words characters read because neither nor step words read reading stops because next character nondigit parsed integer since range final result constraints slength consists english letters lowercase uppercase digits

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

kth largest element stream design class find kth largest element stream note kth largest element sorted order not kth distinct element implement kthlargest class kthlargestint int nums initializes object integer stream integers nums int addint val appends integer val stream returns element representing kth largest element stream example input kthlargest add add add add add output null explanation kthlargest kthlargest new kthlargest kthlargestadd return kthlargestadd return kthlargestadd return kthlargestadd return kthlargestadd return constraints numslength numsi val most calls made add guaranteed least elements array when search kth element

daily temperatures given array integers temperatures represents daily temperatures return array answer such answeri number days wait after ith day get warmer temperature future day which possible keep answeri instead example input temperatures output example input temperatures output example input temperatures output constraints temperatureslength temperaturesi

range module range module module tracks ranges numbers design data structure track ranges represented halfopen intervals query about them halfopen interval left denotes real numbers where left implement rangemodule class rangemodule initializes object data structure void addrangeint left int adds halfopen interval left tracking every real number interval adding interval partially overlaps currently tracked numbers should add any numbers interval left not already tracked boolean queryrangeint left int returns true every real number interval left currently being tracked false otherwise void removerangeint left int stops tracking every real number currently being tracked halfopen interval left example input rangemodule addrange removerange queryrange queryrange queryrange output null null null true false true explanation rangemodule rangemodule new rangemodule rangemoduleaddrange rangemoduleremoverange rangemodulequeryrange return trueevery number being tracked rangemodulequeryrange return falsenumbers not being tracked rangemodulequeryrange return true number being tracked remove operation constraints left most calls made addrange queryrange removerange

longest word dictionary given array strings words representing english dictionary return longest word words built one character time other words words more than one possible answer return longest word smallest lexicographical order answer return empty string note word should built left each additional character being added end previous word example input words wwoworworlworld output world explanation word world built one character time wor worl example input words abananaappapplapapplyapple output apple explanation both apply apple built other words dictionary however apple lexicographically smaller than apply constraints wordslength wordsilength wordsi consists lowercase english letters

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

maximum length repeated subarray given two integer arrays nums nums return maximum length subarray appears both arrays example input nums nums output explanation repeated subarray maximum length example input nums nums output explanation repeated subarray maximum length constraints numslength numslength numsi numsi

find kth smallest pair distance distance pair integers defined absolute difference between given integer array nums integer return kth smallest distance pairs numsi numsj where numslength example input nums output explanation here pairs smallest distance pair distance example input nums output example input nums output constraints numslength numsi

binary search given array integers nums which sorted ascending order integer target write function search target nums target exists return index otherwise return must write algorithm olog runtime complexity example input nums target output explanation exists nums index example input nums target output explanation does not exist nums return constraints numslength numsi target integers nums unique nums sorted ascending order

rotate image given matrix representing image rotate image degrees clockwise rotate image inplace which means modify input matrix directly not allocate another matrix rotation example input matrix output example input matrix output constraints matrixlength matrixilength matrixij

flood fill image represented integer grid image where imageij represents pixel value image also given three integers color should perform flood fill image starting pixel imagesrsc perform flood fill consider starting pixel plus any pixels connected directionally starting pixel same color starting pixel plus any pixels connected directionally those pixels also same color replace color aforementioned pixels color return modified image after performing flood fill example input image color output explanation center image position red pixel pixels connected path same color starting pixel blue pixels colored new color note bottom corner not colored because not directionally connected starting pixel example input image color output explanation starting pixel already colored changes made image constraints imagelength imageilength imageij color

parse lisp expression given string expression representing lisplike expression return integer value syntax these expressions given follows expression either integer let expression add expression mult expression assigned variable expressions always evaluate single integer integer could positive negative let expression takes form let expr where let always string let one more pairs alternating variables expressions meaning first variable assigned value expression second variable assigned value expression sequentially value let expression value expression expr add expression takes form add where add always string add always two expressions result addition evaluation evaluation mult expression takes form mult where mult always string mult always two expressions result multiplication evaluation evaluation question use smaller subset variable names variable starts lowercase letter zero more lowercase letters digits additionally your convenience names add let mult protected never used variable names finally concept scope when expression variable name evaluated within context evaluation innermost scope terms parentheses checked first value variable outer scopes checked sequentially guaranteed every expression legal please see examples more details scope example input expression let mult let add output explanation expression add when checking value variable check innermost scope outermost context variable trying evaluate since found first value example input expression let output explanation assignment let statements processed sequentially example input expression let add add output explanation first add evaluates assigned second add evaluates constraints expressionlength leading trailing spaces expression tokens separated single space expression answer intermediate calculations answer guaranteed fit bit integer expression guaranteed legal evaluate integer

shortest completing word given string licenseplate array strings words find shortest completing word words completing word word contains letters licenseplate ignore numbers spaces licenseplate treat letters case insensitive letter appears more than once licenseplate must appear word same number times more example licenseplate abc contains letters ignoring case twice possible completing words abccdef caaacab cbca return shortest completing word words guaranteed answer exists multiple shortest completing words return first one occurs words example input licenseplate pst words stepstepsstripestepple output steps explanation licenseplate contains letters ignoring case step contains but only contains steps contains both characters stripe missing stepple missing since steps only word containing letters answer example input licenseplate words lookspeststewshow output pest explanation licenseplate only contains letter words contain but these pest stew show shortest answer pest because word appears earliest constraints licenseplatelength licenseplate contains digits letters uppercase lowercase space wordslength wordsilength wordsi consists lower case english letters

bit bit characters two special characters first character represented one bit second character represented two bits given binary array bits ends return true last character must onebit character example input bits output true explanation only way decode twobit character onebit character last character onebit character example input bits output false explanation only way decode twobit character twobit character last character not onebit character constraints bitslength bitsi either

design linked list design your implementation linked list choose use singly doubly linked list node singly linked list should two attributes val next val value current node next pointerreference next node want use doubly linked list need one more attribute prev indicate previous node linked list assume nodes linked list indexed implement mylinkedlist class mylinkedlist initializes mylinkedlist object int getint index get value indexth node linked list index invalid return void addatheadint val add node value val before first element linked list after insertion new node first node linked list void addattailint val append node value val last element linked list void addatindexint index int val add node value val before indexth node linked list index equals length linked list node appended end linked list index greater than length node not inserted void deleteatindexint index delete indexth node linked list index valid example input mylinkedlist addathead addattail addatindex get deleteatindex get output null null null null null explanation mylinkedlist mylinkedlist new mylinkedlist mylinkedlistaddathead mylinkedlistaddattail mylinkedlistaddatindex linked list becomes mylinkedlistget return mylinkedlistdeleteatindex linked list mylinkedlistget return constraints index val please not use builtin linkedlist library most calls made get addathead addattail addatindex deleteatindex

design hashmap design hashmap without using any builtin hash table libraries implement myhashmap class myhashmap initializes object empty map void putint key int value inserts key value pair hashmap key already exists map update corresponding value int getint key returns value which specified key mapped map contains mapping key void removekey removes key corresponding value map contains mapping key example input myhashmap put put get get put get remove get output null null null null null explanation myhashmap myhashmap new myhashmap myhashmapput map myhashmapput map myhashmapget return map myhashmapget return not found map myhashmapput map update existing value myhashmapget return map myhashmapremove remove mapping map myhashmapget return not found map constraints key value most calls made put get remove

split linked list parts given head singly linked list integer split linked list consecutive linked list parts length each part should equal possible two parts should size differing more than one may lead some parts being null parts should order occurrence input list parts occurring earlier should always size greater than equal parts occurring later return array parts example input head output explanation first element output outputval outputnext null last element output null but string representation listnode example input head output explanation input split consecutive parts size difference most earlier parts larger size than later parts constraints number nodes list range nodeval

accounts merge given list accounts where each element accountsi list strings where first element accountsi name rest elements emails representing emails account would merge these accounts two accounts definitely belong same person some common email both accounts note even two accounts same name they may belong different people people could same name person any number accounts initially but their accounts definitely same name after merging accounts return accounts following format first element each account name rest elements emails sorted order accounts themselves returned any order example input accounts johnjohnsmithmailcomjohnnewyorkmailcomjohnjohnsmithmailcomjohnmailcommarymarymailcomjohnjohnnybravomailcom output johnjohnmailcomjohnnewyorkmailcomjohnsmithmailcommarymarymailcomjohnjohnnybravomailcom explanation first second johns same person they common email johnsmithmailcom third john mary different people none their email addresses used other accounts could return these lists any order example answer mary marymailcom john johnnybravomailcom john johnmailcom johnnewyorkmailcom johnsmithmailcom would accepted example input accounts gabegabemcogabemcogabemcokevinkevinmcokevinmcokevinmcoethanethanmcoethanmcoethanmcohanzohanzomcohanzomcohanzomcofernfernmcofernmcofernmco output ethanethanmcoethanmcoethanmcogabegabemcogabemcogabemcohanzohanzomcohanzomcohanzomcokevinkevinmcokevinmcokevinmcofernfernmcofernmcofernmco constraints accountslength accountsilength accountsijlength accountsi consists english letters accountsij valid email

letter case permutation given string transform every letter individually lowercase uppercase create another string return list possible strings could create return output any order example input output abababab example input output constraints slength consists lowercase english letters uppercase english letters digits

number subarrays bounded maximum given integer array nums two integers left return number contiguous nonempty subarrays such value maximum array element subarray range left test cases generated answer fit bit integer example input nums left output explanation three subarrays meet requirements example input nums left output constraints numslength numsi left

remove duplicates sorted array given integer array nums sorted nondecreasing order remove duplicates inplace such each unique element appears only once relative order elements should kept same return number unique elements nums consider number unique elements nums get accepted need following things change array nums such first elements nums contain unique elements order they present nums initially remaining elements nums not important size nums return custom judge judge test your solution following code int nums input array int expectednums expected answer correct length int removeduplicatesnums calls your implementation assert expectednumslength int assert numsi expectednumsi assertions pass your solution accepted example input nums output nums explanation your function should return first two elements nums being respectively does not matter what leave beyond returned they underscores example input nums output nums explanation your function should return first five elements nums being respectively does not matter what leave beyond returned they underscores constraints numslength numsi nums sorted nondecreasing order

champagne tower stack glasses pyramid where first row glass second row glasses row each glass holds one cup champagne some champagne poured first glass top when topmost glass full any excess liquid poured fall equally glass immediately left when those glasses become full any excess champagne fall equally left those glasses glass bottom row excess champagne fall floor example after one cup champagne poured top most glass full after two cups champagne poured two glasses second row half full after three cups champagne poured those two cups become full full glasses total after four cups champagne poured third row middle glass half full two outside glasses quarter full pictured below after pouring some nonnegative integer cups champagne return how full jth glass ith row both indexed example input poured queryrow queryglass output explanation poured cup champange top glass tower which indexed excess liquid glasses under top glass remain empty example input poured queryrow queryglass output explanation poured cups champange top glass tower which indexed one cup excess liquid glass indexed glass indexed share excess liquid equally each get half cup champange example input poured queryrow queryglass output constraints poured queryglass queryrow

toeplitz matrix given matrix return true matrix toeplitz otherwise return false matrix toeplitz every diagonal topleft bottomright same elements example input matrix output true explanation above grid diagonals each diagonal elements same answer true example input matrix output false explanation diagonal different elements constraints matrixlength matrixilength matrixij follow what matrix stored disk memory limited such only load most one row matrix memory once what matrix large only load partial row memory once

swap adjacent string string composed characters rxxlrxrxl move consists either replacing one occurrence replacing one occurrence given starting string start ending string end return true only exists sequence moves transform one string other example input start rxxlrxrxl end xrlxxrrlx output true explanation transform start end following these steps rxxlrxrxl xrxlrxrxl xrlxrxrxl xrlxxrrxl xrlxxrrlx example input start end output false constraints startlength startlength endlength both start end only consist characters

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

basic calculator given expression such expression evaluation map such given terms evalvars evalints return list tokens representing simplified expression such expression alternates chunks symbols space separating each chunk symbol chunk either expression parentheses variable nonnegative integer variable string lowercase letters not digits note variables multiple letters note variables never leading coefficient unary operator expressions evaluated usual order brackets first multiplication addition subtraction example expression answer format output follows each term free variables nonzero coefficient write free variables within term sorted order lexicographically example would never write term bac only abc terms degrees equal number free variables being multiplied counting multiplicity write largest degree terms our answer first breaking ties lexicographic order ignoring leading coefficient term example aabc degree leading coefficient term placed directly left asterisk separating variables they exist leading coefficient printed example wellformatted answer aaa aab terms constant terms coefficient not included example expression output note may assume given expression always valid intermediate results range example input expression evalvars evalints output example input expression temperature pressure evalvars temperature evalints output pressure example input expression evalvars evalints output constraints expressionlength expression consists lowercase english letters digits expression does not contain any leading trailing spaces tokens expression separated single space evalvarslength evalvarsilength evalvarsi consists lowercase english letters evalintslength evalvarslength evalintsi

number matching subsequences given string array strings words return number wordsi subsequence subsequence string new string generated original string some characters none deleted without changing relative order remaining characters example ace subsequence abcde example input abcde words abbacdace output explanation three strings words subsequence acd ace example input dsahjpjauf words ahjpjaujaahbwzgqnuktnmlanowax output constraints slength wordslength wordsilength wordsi consist only lowercase english letters

set intersection size least two given integer array intervals where intervalsi starti endi represents integers starti endi inclusively containing set array nums where each interval intervals least two integers nums example intervals containing sets return minimum possible size containing set example input intervals output explanation let nums shown cannot any containing array size example input intervals output explanation let nums shown cannot any containing array size example input intervals output explanation let nums shown cannot any containing array size constraints intervalslength intervalsilength starti endi

prime number set bits binary representation given two integers left return count numbers inclusive range left having prime number set bits their binary representation recall number set bits integer number present when written binary example written binary which set bits example input left output explanation set bits prime set bits prime set bit not prime set bits prime set bits prime numbers prime number set bits example input left output explanation set bits prime set bits prime set bits prime set bits prime set bits prime set bits not prime numbers prime number set bits constraints left left

partition labels given string want partition string many parts possible each letter appears most one part note partition done after concatenating parts order resultant string should return list integers representing size these parts example input ababcbacadefegdehijhklij output explanation partition ababcbaca defegde hijhklij partition each letter appears most one part partition ababcbacadefegde hijhklij incorrect because splits less parts example input eccbbbbdec output constraints slength consists lowercase english letters

jewels stones youre given strings jewels representing types stones jewels stones representing stones each character stones type stone want know how many stones also jewels letters case sensitive considered different type stone example input jewels stones aaabbbb output example input jewels stones output constraints jewelslength stoneslength jewels stones consist only english letters characters jewels unique

remove element given integer array nums integer val remove occurrences val nums inplace order elements may changed return number elements nums which not equal val consider number elements nums which not equal val get accepted need following things change array nums such first elements nums contain elements which not equal val remaining elements nums not important size nums return custom judge judge test your solution following code int nums input array int val value remove int expectednums expected answer correct length sorted values equaling val int removeelementnums val calls your implementation assert expectednumslength sortnums sort first elements nums int actuallength assert numsi expectednumsi assertions pass your solution accepted example input nums val output nums explanation your function should return first two elements nums being does not matter what leave beyond returned they underscores example input nums val output nums explanation your function should return first five elements nums containing note five elements returned any order does not matter what leave beyond returned they underscores constraints numslength numsi val

couples holding hands couples sitting seats arranged row want hold hands people seats represented integer array row where rowi person sitting ith seat couples numbered order first couple being second couple being last couple being return minimum number swaps every couple sitting side side swap consists choosing any two people they stand switch seats example input row output explanation only need swap second row third row person example input row output explanation couples already seated side side constraints rowlength even rowi elements row unique

cheapest flights within stops cities connected some number flights given array flights where flightsi fromi toi pricei indicates flight city fromi city toi cost pricei also given three integers src dst return cheapest price src dst most stops such route return example input flights src dst output explanation graph shown above optimal path most stop city marked red cost note path cities cheaper but invalid because uses stops example input flights src dst output explanation graph shown above optimal path most stop city marked red cost example input flights src dst output explanation graph shown above optimal path stops city marked red cost constraints flightslength flightsilength fromi toi fromi toi pricei not any multiple flights between two cities src dst src dst

domino tromino tiling two types tiles domino shape tromino shape may rotate these shapes given integer return number ways tile board since answer may very large return modulo tiling every square must covered tile two tilings different only two directionally adjacent cells board such exactly one tilings both squares occupied tile example input output explanation five different ways show above example input output constraints

max chunks sorted given integer array arr split arr some number chunks partitions individually sort each chunk after concatenating them result should equal sorted array return largest number chunks sort array example input arr output explanation splitting two more chunks not return required result example splitting result which isnt sorted example input arr output explanation split two chunks such however splitting highest number chunks possible constraints arrlength arri

kth symbol grammar build table rows indexed start writing row every subsequent row look previous row replace each occurrence each occurrence example row row row given two integer return kth indexed symbol nth row table rows example input output explanation row example input output explanation row row example input output explanation row row constraints

paths source target given directed acyclic graph dag nodes labeled find possible paths node node return them any order graph given follows graphi list nodes visit node directed edge node node graphij example input graph output explanation two paths example input graph output constraints graphlength graphij graphij selfloops elements graphi unique input graph guaranteed dag

cracking safe safe protected password password sequence digits where each digit range safe peculiar way checking password when enter sequence checks most recent digits entered each time type digit example correct password enter after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which correct safe unlocks return any string minimum length unlock safe some point entering example input output explanation password single digit enter each digit would also unlock safe example input output explanation each possible password typed starting digit typed starting digit typed starting digit typed starting digit unlock safe would also unlock safe constraints

reaching points given four integers return true possible convert point point some operations false otherwise allowed operation some point convert either example input output true explanation one series moves transforms starting point target example input output false example input output true constraints

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

reach number standing position infinite number line destination position target some number moves nummoves each move either left ith move starting nummoves take steps chosen direction given integer target return minimum number moves required minimum nummoves reach destination example input target output explanation move step step move step steps move step steps example input target output explanation move step step move step steps constraints target target

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

pyramid transition matrix stacking blocks form pyramid each block color which represented single letter each row blocks contains one less block than row beneath centered top pyramid aesthetically pleasing only specific triangular patterns allowed triangular pattern consists single block stacked top two blocks patterns given list threeletter strings allowed where first two characters pattern represent left bottom blocks respectively third character top block example abc represents triangular pattern block stacked top left block note different bac where left bottom bottom start bottom row blocks bottom given single string must use base pyramid given bottom allowed return true build pyramid way top such every triangular pattern pyramid allowed false otherwise example input bottom bcd allowed bcccdeceafff output true explanation allowed triangular patterns shown starting bottom level build level build level three triangular patterns pyramid which bcc cde cea allowed example input bottom aaaa allowed aabaacbcdbbedef output false explanation allowed triangular patterns shown starting bottom level multiple ways build level but trying possibilites get always stuck before building level constraints bottomlength allowedlength allowedilength letters input strings set values allowed unique

custom sort string given two strings order characters order unique sorted some custom order previously permute characters they match order order sorted more specifically character occurs before character order should occur before permuted string return any permutation satisfies property example input order cba abcd output cbad explanation appear order order should since does not appear order any position returned string dcba cdba cbda also valid outputs example input order cbafg abcd output cbad constraints orderlength slength order consist lowercase english letters characters order unique

preimage size factorial zeroes function let number zeroes end recall convention example because zeroes end while because two zeroes end given integer return number nonnegative integers property example input output explanation end zeroes example input output explanation such ends zeroes example input output constraints

open lock lock front circular wheels each wheel slots wheels rotate freely wrap around example turn each move consists turning one wheel one slot lock initially starts string representing state wheels given list deadends dead ends meaning lock displays any these codes wheels lock stop turning unable open given target representing value wheels unlock lock return minimum total number turns required open lock impossible example input deadends target output explanation sequence valid moves would note sequence would invalid because wheels lock become stuck after display becomes dead end example input deadends target output explanation turn last wheel reverse move example input deadends target output explanation cannot reach target without getting stuck constraints deadendslength deadendsilength targetlength target not list deadends target deadendsi consist digits only

largest plus sign given integer binary grid grid values initially except some indices given array mines ith element array mines defined minesi where gridxiyi return order largest axisaligned plus sign contained grid none return axisaligned plus sign order some center gridrc along four arms length going down left made note could beyond arms plus sign only relevant area plus sign checked example input mines output explanation above grid largest plus sign only order one them shown example input mines output explanation plus sign return constraints mineslength pairs unique

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

max chunks sorted given integer array arr length represents permutation integers range split arr some number chunks partitions individually sort each chunk after concatenating them result should equal sorted array return largest number chunks sort array example input arr output explanation splitting two more chunks not return required result example splitting result which isnt sorted example input arr output explanation split two chunks such however splitting highest number chunks possible constraints arrlength arri elements arr unique

kth smallest prime fraction given sorted integer array arr containing prime numbers where integers arr unique also given integer every where arrlength consider fraction arri arrj return kth smallest fraction considered return your answer array integers size where answer arri answer arrj example input arr output explanation fractions considered sorted order third fraction example input arr output constraints arrlength arri arr arri prime number numbers arr unique sorted strictly increasing order arrlength arrlength follow solve problem better than complexity

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

rotated digits integer good after rotating each digit individually degrees get valid number different each digit must rotated cannot choose leave alone number valid each digit remains digit after rotation example rotate themselves rotate each other case they rotated different direction other words gets mirrored rotate each other rest numbers not rotate any other number become invalid given integer return number good integers range example input output explanation four good numbers range note not good numbers since they remain unchanged after rotating example input output example input output constraints

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

rotate string given two strings goal return true only become goal after some number shifts shift consists moving leftmost character rightmost position example abcde bcdea after one shift example input abcde goal cdeab output true example input abcde goal abced output false constraints slength goallength goal consist lowercase english letters

escape ghosts playing simplified pacman game infinite grid start point given destination point target xtarget ytarget trying get several ghosts map their starting positions given array ghosts where ghostsi represents starting position ith ghost inputs integral coordinates each turn ghosts may independently choose either move unit any four cardinal directions north east south west stay actions happen simultaneously escape only reach target before any ghost reaches reach any square target same time ghost does not count escape return true possible escape regardless how ghosts move otherwise return false example input ghosts target output true explanation reach destination after turn while ghosts located cannot catch example input ghosts target output false explanation need reach destination but ghost lies between destination example input ghosts target output false explanation ghost reach target same time constraints ghostslength ghostsilength multiple ghosts same location targetlength xtarget ytarget

swim rising water given integer matrix grid where each value gridij represents elevation point rain starts fall time depth water everywhere swim square another directionally adjacent square only elevation both squares individually most swim infinite distances zero time course must stay within boundaries grid your swim return least time reach bottom square start top left square example input grid output explanation time grid location cannot anywhere else because directionally adjacent neighbors higher elevation than cannot reach point time when depth water swim anywhere inside grid example input grid output explanation final route shown need wait time connected constraints gridlength gridilength gridij each value gridij unique

minimum distance between bst nodes given root binary search tree bst return minimum difference between values any two different nodes tree example input root output example input root nullnull output constraints number nodes tree range nodeval note question same httpsleetcodecomproblemsminimumabsolutedifferenceinbst

global local inversions given integer array nums length which represents permutation integers range number global inversions number different pairs where numsi numsj number local inversions number indices where numsi numsi return true number global inversions equal number local inversions example input nums output true explanation global inversion local inversion example input nums output false explanation global inversions local inversion constraints numslength numsi integers nums unique nums permutation numbers range

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

smallest rotation highest score given array nums rotate nonnegative integer array becomes numsk numsk numsnumslength nums nums numsk afterward any entries less than equal their index worth one point example nums rotate becomes worth points because points points one point one point one point return rotation index corresponds highest score achieve rotated nums multiple answers return smallest such index example input nums output explanation scores each listed below nums score nums score nums score nums score nums score should choose which highest score example input nums output explanation nums always points matter how shifts choose smallest which constraints numslength numsi numslength

reorganize string given string rearrange characters any two adjacent characters not same return any possible rearrangement return not possible example input aab output aba example input aaab output constraints slength consists lowercase english letters

special binary string special binary strings binary strings following two properties number equal number every prefix binary string least many given special binary string move consists choosing two consecutive nonempty special substrings swapping them two strings consecutive last character first string exactly one index before first character second string return lexicographically largest resulting string possible after applying mentioned operations string example input output explanation strings occuring swapped lexicographically largest string possible after some number swaps example input output constraints slength either special binary string

combination sum given array distinct integers candidates target integer target return list unique combinations candidates where chosen numbers sum target may return combinations any order same number may chosen candidates unlimited number times two combinations unique frequency least one chosen numbers different test cases generated such number unique combinations sum target less than combinations given input example input candidates target output explanation candidates note used multiple times candidate these only two combinations example input candidates target output example input candidates target output constraints candidateslength candidatesi elements candidates distinct target

graph bipartite undirected graph nodes where each node numbered between given array graph where graphu array nodes node adjacent more formally each graphu undirected edge between node node graph following properties selfedges graphu does not contain parallel edges graphu does not contain duplicate values graphu graphv graph undirected graph may not connected meaning may two nodes such path between them graph bipartite nodes partitioned two independent sets such every edge graph connects node set node set return true only bipartite example input graph output false explanation way partition nodes two independent sets such every edge connects node one node other example input graph output true explanation partition nodes two sets constraints graphlength graphulength graphui graphu does not contain values graphu unique graphu contains graphv contains

sliding puzzle board five tiles labeled empty square represented move consists choosing directionally adjacent number swapping state board solved only board given puzzle board board return least number moves required state board solved impossible state board solved return example input board output explanation swap one move example input board output explanation number moves board solved example input board output explanation smallest number moves solves board example path after move after move after move after move after move after move constraints boardlength boardilength boardij each value boardij unique

valid tictactoe state given tictactoe board string array board return true only possible reach board position course valid tictactoe game board array consists characters character represents empty square here rules tictactoe players take turns placing characters empty squares first player always places characters while second player always places characters characters always placed empty squares never filled ones game ends when three same nonempty character filling any row column diagonal game also ends squares nonempty more moves played game over example input board output false explanation first player always plays example input board xox output false explanation players take turns making moves example input board xoxo oxox output true constraints boardlength boardilength boardij either

transform chessboard given binary grid board each move swap any two rows each other any two columns each other return minimum number moves transform board chessboard board task impossible return chessboard board board where directionally adjacent example input board output explanation one potential sequence moves shown first move swaps first second column second move swaps second third row example input board output explanation also note board top left corner also valid chessboard example input board output explanation matter what sequence moves cannot end valid chessboard constraints boardlength boardilength boardij either

rabbits forest forest unknown number rabbits asked rabbits how many rabbits same color collected answers integer array answers where answersi answer ith rabbit given array answers return minimum number rabbits could forest example input answers output explanation two rabbits answered could both same color say red rabbit answered cant red answers would inconsistent say rabbit answered blue should other blue rabbits forest didnt answer array smallest possible number rabbits forest answered plus didnt example input answers output constraints answerslength answersi

unique morse code words international morse code defines standard encoding where each letter mapped series dots dashes follows maps maps maps convenience full table letters english alphabet given below given array strings words where each word written concatenation morse code each letter example cab written which concatenation call such concatenation transformation word return number different transformations words example input words ginzengigmsg output explanation transformation each word gin zen gig msg different transformations example input words output constraints wordslength wordsilength wordsi consists lowercase english letters

maximize distance closest person given array representing row seats where seatsi represents person sitting ith seat seatsi represents ith seat empty indexed least one empty seat least one person sitting alex wants sit seat such distance between him closest person him maximized return maximum distance closest person example input seats output explanation alex sits second open seat seats closest person distance alex sits any other open seat closest person distance maximum distance closest person example input seats output explanation alex sits last seat seats closest person seats away maximum distance possible answer example input seats output constraints seatslength seatsi least one seat empty least one seat occupied

find eventual safe states directed graph nodes each node labeled graph represented indexed integer array graph where graphi integer array nodes adjacent node meaning edge node each node graphi node terminal node outgoing edges node safe node every possible path starting node leads terminal node another safe node return array containing safe nodes graph answer should sorted ascending order example input graph output explanation given graph shown above nodes terminal nodes outgoing edges either them every path starting nodes lead either node example input graph output explanation only node terminal node every path starting node leads node constraints graphlength graphilength graphij graphi sorted strictly increasing order graph may contain selfloops number edges graph range

race car your car starts position speed infinite number line your car negative positions your car drives automatically according sequence instructions accelerate reverse when get instruction your car does following position speed speed when get instruction your car does following your speed positive speed otherwise speed your position stays same example after commands aar your car goes positions your speed goes given target position target return length shortest sequence instructions get example input target output explanation shortest instruction sequence your position goes example input target output explanation shortest instruction sequence aaara your position goes constraints target

number lines write string given string lowercase english letters array widths denoting how many pixels wide each lowercase english letter specifically widths width widths width trying write across several lines where each line longer than pixels starting beginning write many letters first line such total width does not exceed pixels where stopped continue writing many letters second line continue process written return array result length where result total number lines result width last line pixels example input widths abcdefghijklmnopqrstuvwxyz output explanation write follows abcdefghij pixels wide klmnopqrst pixels wide uvwxyz pixels wide total lines last line pixels wide example input widths bbbcccdddaaa output explanation write follows bbbcccdddaa pixels wide pixels wide total lines last line pixels wide constraints widthslength widthsi slength contains only lowercase english letters

find first last position element sorted array given array integers nums sorted nondecreasing order find starting ending position given target value target not found array return must write algorithm olog runtime complexity example input nums target output example input nums target output example input nums target output constraints numslength numsi nums nondecreasing array target

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

keys rooms rooms labeled rooms locked except room your goal visit rooms however cannot enter locked room without having key when visit room may find set distinct keys each key number denoting which room unlocks take them unlock other rooms given array rooms where roomsi set keys obtain visited room return true visit rooms false otherwise example input rooms output true explanation visit room pick key visit room pick key visit room pick key visit room since able visit every room return true example input rooms output false explanation not enter room number since only key unlocks room constraints roomslength roomsilength sumroomsilength roomsij values roomsi unique

split array fibonacci sequence given string digits num such split fibonaccilike sequence formally fibonaccilike sequence list nonnegative integers such each integer fits bit signed integer type flength flength note when splitting string pieces each piece must not extra leading zeroes except piece number itself return any fibonaccilike sequence split num return cannot done example input num output explanation output would also accepted example input num output explanation task impossible example input num output explanation leading zeroes not allowed not valid constraints numlength num contains only digits

shifting letters given string lowercase english letters integer array shifts same length call shift letter next letter alphabet wrapping around becomes example shifta shiftt shiftz each shiftsi want shift first letters times return final string after such shifts applied example input abc shifts output rpl explanation start abc after shifting first letters dbc after shifting first letters igc after shifting first letters rpl answer example input aaa shifts output gfd constraints slength consists lowercase english letters shiftslength slength shiftsi

ambiguous coordinates some dimensional coordinates removed commas decimal points spaces ended string example becomes becomes return list strings representing possibilities what our original coordinates could our original representation never extraneous zeroes never started numbers any other number represented fewer digits also decimal point within number never occurs without least one digit occurring before never started numbers final answer list returned any order coordinates final answer exactly one space between them occurring after comma example input output example input output explanation not allowed example input output constraints slength sslength rest digits

expressive words sometimes people repeat letters represent extra feeling example hello heeellooo hiiii these strings heeellooo groups adjacent letters same eee ooo given string array query strings words query word stretchy made equal any number applications following extension operation choose group consisting characters add some number characters group size group three more example starting hello could extension group get hellooo but cannot get helloo since group size less than three also could another extension lllll get helllllooo helllllooo query word hello would stretchy because these two extension operations query hello hellooo helllllooo return number query strings stretchy example input heeellooo words hello helo output explanation extend word hello get heeellooo cant extend helo get heeellooo because group not size more example input zzzzzyyyyy words zzyyzyzyy output constraints slength wordslength wordsilength wordsi consist lowercase letters

goat latin given string sentence consist words separated spaces each word consists lowercase uppercase letters only would convert sentence goat latin madeup language similar pig latin rules goat latin follows word begins vowel append end word example word apple becomes applema word begins consonant not vowel remove first letter append end add example word goat becomes oatgma add one letter end each word per word index sentence starting example first word gets added end second word gets added end return final sentence representing conversion sentence goat latin example input sentence speak goat latin output imaa peaksmaaa oatgmaaaa atinlmaaaaa example input sentence quick brown fox jumped over lazy dog output hetmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa constraints sentencelength sentence consists english letters spaces sentence leading trailing spaces words sentence separated single space

subdomain visit count website domain discussleetcodecom consists various subdomains top level com next level leetcodecom lowest level discussleetcodecom when visit domain discussleetcodecom also visit parent domains leetcodecom com implicitly countpaired domain domain one two formats rep ddd rep where rep number visits domain ddd domain itself example discussleetcodecom countpaired domain indicates discussleetcodecom visited times given array countpaired domains cpdomains return array countpaired domains each subdomain input may return answer any order example input cpdomains discussleetcodecom output leetcodecom discussleetcodecom com explanation only one website domain discussleetcodecom discussed above subdomain leetcodecom com also visited they visited times example input cpdomains googlemailcom yahoocom intelmailcom wikiorg output mailcom yahoocom googlemailcom wikiorg org intelmailcom com explanation visit googlemailcom times yahoocom times intelmailcom once wikiorg times subdomains visit mailcom times com times org times constraints cpdomainlength cpdomainilength cpdomaini follows either repi dididi format repi didi format repi integer range consist lowercase english letters

binary trees factors given array unique integers arr where each integer arri strictly greater than binary tree using these integers each number may used any number times each nonleaf nodes value should equal product values children return number binary trees answer may too large return answer modulo example input arr output explanation these trees example input arr output explanation these trees constraints arrlength arri values arr unique

count unique characters substrings given string lets define function countuniquecharss returns number unique characters example calling countuniquecharss leetcode unique characters since they appear only once countuniquecharss given string return sum countuniquecharst where substring test cases generated such answer fits bit integer notice some substrings repeated case count repeated ones too example input abc output explanation possible substrings abcabbc abc every substring composed only unique letters sum lengths substring example input aba output explanation same example except countuniquecharsaba example input leetcode output constraints slength consists uppercase english letters only

merge sorted lists given array linkedlists lists each linkedlist sorted ascending order merge linkedlists one sorted linkedlist return example input lists output explanation linkedlists merging them one sorted list example input lists output example input lists output constraints listslength listsilength listsij listsi sorted ascending order sum listsilength not exceed

longest substring without repeating characters given string find length longest substring without repeating characters example input abcabcbb output explanation answer abc length example input bbbbb output explanation answer length example input pwwkew output explanation answer wke length notice answer must substring pwke subsequence not substring constraints slength consists english letters digits symbols spaces

image overlap given two images img img represented binary square matrices size binary matrix only values translate one image however choose sliding bits left andor down any number units place top other image calculate overlap counting number positions both images note also translation does not include any kind rotation any bits translated outside matrix borders erased return largest possible overlap example input img img output explanation translate img unit down unit number positions both images shown red example input img img output example input img img output constraints imglength imgilength imglength imgilength imgij either imgij either

rectangle overlap axisaligned rectangle represented list where coordinate bottomleft corner coordinate topright corner top bottom edges parallel xaxis left edges parallel yaxis two rectangles overlap area their intersection positive clear two rectangles only touch corner edges not overlap given two axisaligned rectangles rec rec return true they overlap otherwise return false example input rec rec output true example input rec rec output false example input rec rec output false constraints reclength reclength reci reci rec rec represent valid rectangle nonzero area

card flipping game given two indexed integer arrays fronts backs length where ith card positive integer frontsi printed front backsi printed back initially each card placed table such front number facing other facing down may flip over any number cards possibly zero after flipping cards integer considered good facing down some card not facing any card return minimum possible good integer after flipping cards good integers return example input fronts backs output explanation flip second card face numbers face down minimum good integer appears facing down but not facing shown minimum possible good integer obtainable after flipping some cards example input fronts backs output explanation good integers matter how flip cards return constraints frontslength backslength frontsi backsi

new game alice plays following game loosely based card game alice starts points draws numbers while she less than points each draw she gains integer number points randomly range maxpts where maxpts integer each draw independent outcomes equal probabilities alice stops drawing numbers when she gets more points return probability alice fewer points answers within actual answer considered accepted example input maxpts output explanation alice gets single card stops example input maxpts output explanation alice gets single card stops out possibilities she below points example input maxpts output constraints maxpts

making large island given binary matrix grid allowed change most one return size largest island grid after applying operation island directionally connected group example input grid output explanation change one connect two get island area example input grid output explanation change island bigger only one island area example input grid output explanation cant change any only one island area constraints gridlength gridilength gridij either

positions large groups string lowercase letters these letters form consecutive groups same character example string abbxxxxzyy groups xxxx group identified interval start end where start end denote start end indices inclusive group above example xxxx interval group considered large more characters return intervals every large group sorted increasing order start index example input abbxxxxzzy output explanation xxxx only large group start index end index example input abc output explanation groups none which large groups example input abcdddeeeeaabbbcd output explanation large groups ddd eeee bbb constraints slength contains lowercase english letters only

masking personal information given personal information string representing either email address phone number return masked personal information using below rules email address email address name consisting uppercase lowercase english letters followed symbol followed domain consisting uppercase lowercase english letters dot somewhere middle not first last character mask email uppercase letters name domain must converted lowercase letters middle letters name but first last letters must replaced asterisks phone number phone number formatted follows phone number contains digits last digits local number remaining digits beginning country code separation characters set separate above digits some way mask phone number remove separation characters masked phone number should form xxxx country code digits xxxx country code digit xxxx country code digits xxxx country code digits xxxx last digits local number example input leetcodeleetcodecom output leleetcodecom explanation email address name domain converted lowercase middle name replaced asterisks example input abqqcom output abqqcom explanation email address name domain converted lowercase middle name replaced asterisks note even though characters must asterisks middle example input output explanation phone number digits local number digits country code digits resulting masked number constraints either valid email phone number email slength consists uppercase lowercase english letters exactly one symbol symbol phone number slength consists digits spaces symbols

linked list components given head linked list containing unique integer values integer array nums subset linked list values return number connected components nums where two values connected they appear consecutively linked list example input head nums output explanation connected two connected components example input head nums output explanation connected connected two connected components constraints number nodes linked list nodeval values nodeval unique numslength numsi values nums unique

short encoding words valid encoding array words any reference string array indices indices such wordslength indiceslength reference string ends character each index indicesi substring starting indicesi but not next character equal wordsi given array words return length shortest reference string possible any valid encoding words example input words time bell output explanation valid encoding would timebell indices words time substring starting indices next underlined timebell words substring starting indices next underlined timebell words bell substring starting indices next underlined timebell example input words output explanation valid encoding would indices constraints wordslength wordsilength wordsi consists only lowercase letters

backspace string compare given two strings return true they equal when both typed empty text editors means backspace character note after backspacing empty text text continue empty example input abc adc output true explanation both become example input output true explanation both become example input output false explanation becomes while becomes constraints slength tlength only contain lowercase letters characters follow solve time space

wildcard matching given input string pattern implement wildcard pattern matching support where matches any single character matches any sequence characters empty sequence matching should cover entire input string not partial example input output false explanation does not match entire string example input output true explanation matches any sequence example input output false explanation matches but second letter which does not match constraints slength plength contains only lowercase english letters contains only lowercase english letters

guess word given array unique strings words where wordsi six letters long one word words chosen secret word also given helper object master may call masterguessword where word sixletterlong string must words masterguessword returns word not words integer representing number exact matches value position your guess secret word parameter allowedguesses each test case where allowedguesses maximum number times call masterguessword each test case should call masterguess secret word without exceeding maximum number allowed guesses get either took too many guesses did not find secret word called masterguess more than allowedguesses times did not call masterguess secret word guessed secret word correctly called masterguess secret word number calls masterguess less than equal allowedguesses test cases generated such guess secret word reasonable strategy other than using bruteforce method example input secret acckzz words acckzzccbazzeiowzzabcczz allowedguesses output guessed secret word correctly explanation masterguessaaaaaa returns because aaaaaa not wordlist masterguessacckzz returns because acckzz secret matches masterguessccbazz returns because ccbazz matches masterguesseiowzz returns because eiowzz matches masterguessabcczz returns because abcczz matches made calls masterguess one them secret pass test case example input secret hamada words hamadakhaled allowedguesses output guessed secret word correctly explanation since two words guess both constraints wordslength wordsilength wordsi consist lowercase english letters strings wordlist unique secret exists words allowedguesses

bricks falling when hit given binary grid where each represents brick represents empty space brick stable directly connected top grid least one other brick four adjacent cells stable also given array hits which sequence erasures want apply each time want erase brick location hitsi rowi coli brick location exists disappear some other bricks may longer stable because erasure fall once brick falls immediately erased grid does not land other stable bricks return array result where each resulti number bricks fall after ith erasure applied note erasure may refer location brick does bricks drop example input grid hits output explanation starting grid erase underlined brick resulting grid two underlined bricks longer stable they longer connected top nor adjacent another stable brick they fall resulting grid result example input grid hits output explanation starting grid erase underlined brick resulting grid remaining bricks stable bricks fall grid remains same next erase underlined brick resulting grid once again remaining bricks stable bricks fall result constraints gridlength gridilength gridij hitslength hitsilength unique

shortest path visiting nodes undirected connected graph nodes labeled given array graph where graphi list nodes connected node edge return length shortest path visits every node may start stop any node may revisit nodes multiple times may reuse edges example input graph output explanation one possible path example input graph output explanation one possible path constraints graphlength graphilength graphi does not contain grapha contains graphb contains input graph always connected

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

largest sum averages given integer array nums integer partition array most nonempty adjacent subarrays score partition sum averages each subarray note partition must use every integer nums score not necessarily integer return maximum score achieve possible partitions answers within actual answer accepted example input nums output explanation best choice partition nums answer could also partitioned nums example partition would lead score which worse example input nums output constraints numslength numsi numslength

longest mountain array may recall array arr mountain array only arrlength exists some index indexed arrlength such arr arr arri arri arri arri arrarrlength given integer array arr return length longest subarray which mountain return mountain subarray example input arr output explanation largest mountain which length example input arr output explanation mountain constraints arrlength arri follow solve using only one pass solve space

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

binary tree pruning given root binary tree return same tree where every subtree given tree not containing removed subtree node node node plus every node descendant node example input root null output nullnull explanation only red nodes satisfy property every subtree not containing diagram represents answer example input root output nullnull example input root output null constraints number nodes tree range nodeval either

largest triangle area given array points plane points where pointsi return area largest triangle formed any three different points answers within actual answer accepted example input points output explanation five points shown above figure red triangle largest example input points output constraints pointslength given points unique

most common word given string paragraph string array banned words banned return most frequent word not banned guaranteed least one word not banned answer unique words paragraph caseinsensitive answer should returned lowercase example input paragraph bob hit ball hit ball flew far after hit banned hit output ball explanation hit occurs times but banned word ball occurs twice other word does most frequent nonbanned word paragraph note words paragraph not case sensitive punctuation ignored even adjacent words such ball hit isnt answer even though occurs more because banned example input paragraph banned output constraints paragraphlength paragraph consists english letters space one symbols bannedlength bannedilength bannedi consists only lowercase english letters

reverse nodes kgroup given head linked list reverse nodes list time return modified list positive integer less than equal length linked list number nodes not multiple leftout nodes end should remain may not alter values lists nodes only nodes themselves may changed example input head output example input head output constraints number nodes list nodeval followup solve problem extra memory space

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

find replace string given indexed string must perform replacement operations replacement operations given three indexed parallel arrays indices sources targets length complete ith replacement operation check substring sourcesi occurs index indicesi original string does not occur nothing otherwise does occur replace substring targetsi example abcd indicesi sourcesi targetsi eee result replacement eeecd replacement operations must occur simultaneously meaning replacement operations should not affect indexing each other testcases generated such replacements not overlap example testcase abc indices sources abbc not generated because replacements overlap return resulting string after performing replacement operations substring contiguous sequence characters string example input abcd indices sources targets eee ffff output eeebffff explanation occurs index replace eee occurs index replace ffff example input abcd indices sources abec targets eeeffff output eeecd explanation occurs index replace eee does not occur index nothing constraints slength indiceslength sourceslength targetslength indexesi slength sourcesilength targetsilength consists only lowercase english letters sourcesi targetsi consist only lowercase english letters

friends appropriate ages persons social media website given integer array ages where agesi age ith person person not send friend request person any following conditions true agey agex agey agex agey agex otherwise send friend request note sends request not necessarily send request also person not send friend request themself return total number friend requests made example input ages output explanation people friend request each other example input ages output explanation friend requests made example input ages output explanation friend requests made constraints ageslength agesi

hand straights alice some number cards she wants rearrange cards groups each group size groupsize consists groupsize consecutive cards given integer array hand where handi value written ith card integer groupsize return true she rearrange cards false otherwise example input hand groupsize output true explanation alices hand rearranged example input hand groupsize output false explanation alices hand not rearranged groups constraints handlength handi groupsize handlength note question same httpsleetcodecomproblemsdividearrayinsetsofkconsecutivenumbers

push dominoes dominoes line place each domino vertically upright beginning simultaneously push some dominoes either left after each second each domino falling left pushes adjacent domino left similarly dominoes falling push their adjacent dominoes standing when vertical domino dominoes falling both sides stays due balance forces purposes question consider falling domino expends additional force falling already fallen domino given string dominoes representing initial state where dominoesi ith domino pushed left dominoesi ith domino pushed dominoesi ith domino not pushed return string representing final state example input dominoes rrl output rrl explanation first domino expends additional force second domino example input dominoes lrlrl output llrrllrrll constraints dominoeslength dominoesi either

soup servings two types soup type type initially each type soup four kinds operations serve soup soup serve soup soup serve soup soup serve soup soup when serve some soup give someone longer each turn choose four operations equal probability remaining volume soup not enough complete operation serve much possible stop once longer some quantity both types soup note not operation where mls soup used first return probability soup empty first plus half probability become empty same time answers within actual answer accepted example input output explanation choose first two operations become empty first third operation become empty same time fourth operation become empty first total probability becoming empty first plus half probability become empty same time example input output constraints

magic squares grid magic square grid filled distinct numbers such each row column both diagonals same sum given row col grid integers how many magic square subgrids each subgrid contiguous example input grid output explanation following subgrid magic square while one not total only one magic square inside given grid example input grid output constraints row gridlength col gridilength row col gridij

rectangle area given array axisaligned rectangles each rectanglei denotes ith rectangle where coordinates bottomleft corner coordinates topright corner calculate total area covered rectangles plane any area covered two more rectangles should only counted once return total area since answer may too large return modulo example input rectangles output explanation total area covered three rectangles illustrated picture green red rectangles overlap three rectangles overlap example input rectangles output explanation answer modulo which constraints rectangleslength rectangesilength

bus routes given array routes representing bus routes where routesi bus route ith bus repeats forever example routes means bus travels sequence forever start bus stop source not any bus initially want bus stop target travel between bus stops buses only return least number buses must take travel source target return not possible example input routes source target output explanation best strategy take first bus bus stop take second bus bus stop example input routes source target output constraints routeslength routesilength values routesi unique sumroutesilength routesij source target

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

add two numbers given two nonempty linked lists representing two nonnegative integers digits stored reverse order each their nodes contains single digit add two numbers return sum linked list may assume two numbers not contain any leading zero except number itself example input output explanation example input output example input output constraints number nodes each linked list range nodeval guaranteed list represents number does not leading zeros

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

consecutive numbers sum given integer return number ways write sum consecutive positive integers example input output explanation example input output explanation example input output explanation constraints

split array same average given integer array nums should move each element nums one two arrays such nonempty averagea averageb return true possible achieve false otherwise note array arr averagearr sum elements arr over length arr example input nums output true explanation split array both them average example input nums output false constraints numslength numsi

shortest distance character given string character occurs return array integers answer where answerlength slength answeri distance index closest occurrence character distance between two indices absi where abs absolute value function example input loveleetcode output explanation character appears indices indexed closest occurrence index index distance abs closest occurrence index index distance abs index tie between index index but distance same abs abs closest occurrence index index distance abs example input aaab output constraints slength lowercase english letters guaranteed occurs least once

chalkboard xor game given array integers nums represents numbers written chalkboard alice bob take turns erasing exactly one number chalkboard alice starting first erasing number causes bitwise xor elements chalkboard become player loses bitwise xor one element element itself bitwise xor elements also any player starts their turn bitwise xor elements chalkboard equal player wins return true only alice wins game assuming both players play optimally example input nums output false explanation alice two choices erase erase she erases nums array becomes bitwise xor elements chalkboard xor bob remove any element wants because alice one erase last element she lose alice erases first nums become bitwise xor elements chalkboard xor alice lose example input nums output true example input nums output true constraints numslength numsi

similar string groups two strings considered similar either they identical them equivalent swapping most two letters distinct positions within string example tars rats similar swapping positions rats arts similar but star not similar tars rats arts together these form two connected groups similarity tars rats arts star notice tars arts same group even though they not similar formally each group such word group only similar least one other word group given list strs strings where every string strs anagram every other string strs how many groups example input strs tarsratsartsstar output example input strs omvovm output constraints strslength strsilength strsi consists lowercase letters only words strs same length anagrams each other

sum distances tree undirected connected tree nodes labeled edges given integer array edges where edgesi indicates edge between nodes tree return array answer length where answeri sum distances between ith node tree other nodes example input edges output explanation tree shown above see dist dist dist dist dist equals answer example input edges output example input edges output constraints edgeslength edgesilength given input represents valid tree

most profit assigning work jobs workers given three arrays difficulty profit worker where difficultyi profiti difficulty profit ith job workerj ability jth worker jth worker only complete job difficulty most workerj every worker assigned most one job but one job completed multiple times example three workers attempt same job pays total profit worker cannot complete any job their profit return maximum profit achieve after assigning workers jobs example input difficulty profit worker output explanation workers assigned jobs difficulty they get profit separately example input difficulty profit worker output constraints difficultylength profitlength workerlength difficultyi profiti workeri

flipping image given binary matrix image flip image horizontally invert return resulting image flip image horizontally means each row image reversed example flipping horizontally results invert image means each replaced each replaced example inverting results example input image output explanation first reverse each row invert image example input image output explanation first reverse each row invert image constraints imagelength imageilength imagesij either

max increase keep city skyline city composed blocks where each block contains single building shaped vertical square prism given indexed integer matrix grid where gridrc represents height building located block row column citys skyline outer contour formed building when viewing side city distance skyline each cardinal direction north east south west may different allowed increase height any number buildings any amount amount different per building height height building also increased however increasing height building should not affect citys skyline any cardinal direction return maximum total sum height buildings increased without changing citys skyline any cardinal direction example input grid output explanation building heights shown center above image skylines when viewed each cardinal direction drawn red grid after increasing height buildings without affecting skylines gridnew example input grid output explanation increasing height any building result skyline changing constraints gridlength gridrlength gridrc

sudoku solver write program solve sudoku puzzle filling empty cells sudoku solution must satisfy following rules each digits must occur exactly once each row each digits must occur exactly once each column each digits must occur exactly once each subboxes grid character indicates empty cells example input board output explanation input board shown above only valid solution shown below constraints boardlength boardilength boardij digit guaranteed input board only one solution

minimum swaps sequences increasing given two integer arrays same length nums nums one operation allowed swap numsi numsi example nums nums swap element obtain nums nums return minimum number needed operations nums nums strictly increasing test cases generated given input always makes possible array arr strictly increasing only arr arr arr arrarrlength example input nums nums output explanation swap nums nums sequences nums nums which both strictly increasing example input nums nums output constraints numslength numslength numslength numsi numsi

buddy strings given two strings goal return true swap two letters result equal goal otherwise return false swapping letters defined taking two indices indexed such swapping characters example swapping indices abcd results cbad example input goal output true explanation swap get which equal goal example input goal output false explanation only letters swap which results goal example input goal output true explanation swap get which equal goal constraints slength goallength goal consist lowercase letters

koko eating bananas koko loves eat bananas piles bananas ith pile pilesi bananas guards gone come back hours koko decide her bananasperhour eating speed each hour she chooses some pile bananas eats bananas pile pile less than bananas she eats them instead not eat any more bananas hour koko likes eat slowly but wants finish eating bananas before guards return return minimum integer such she eat bananas within hours example input piles output example input piles output example input piles output constraints pileslength pileslength pilesi

boats save people given array people where peoplei weight ith person infinite number boats where each boat carry maximum weight limit each boat carries most two people same time provided sum weight those people most limit return minimum number boats carry every given person example input people limit output explanation boat example input people limit output explanation boats example input people limit output explanation boats constraints peoplelength peoplei limit

increasing order search tree given root binary search tree rearrange tree inorder leftmost node tree root tree every node left child only one child example input root nullnullnullnull output nullnullnullnullnullnullnullnull example input root output nullnull constraints number nodes given tree range nodeval

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

car fleet cars going same destination along onelane road destination target miles away given two integer array position speed both length where positioni position ith car speedi speed ith car miles per hour car never pass another car ahead but catch drive bumper bumper same speed faster car slow down match slower cars speed distance between these two cars ignored they assumed same position car fleet some nonempty set cars driving same position same speed note single car also car fleet car catches car fleet destination point considered one car fleet return number car fleets arrive destination example input target position speed output explanation cars starting speed speed become fleet meeting each other car starting does not catch any other car fleet itself cars starting speed speed become fleet meeting each other fleet moves speed reaches target note other cars meet these fleets before destination answer example input target position speed output explanation only one car only one fleet example input target position speed output explanation cars starting speed speed become fleet meeting each other fleet moves speed fleet speed car starting speed become one fleet meeting each other fleet moves speed reaches target constraints positionlength speedlength target positioni target values position unique speedi

groups specialequivalent strings given array strings same length words one move swap any two even indexed characters any two odd indexed characters string wordsi two strings wordsi wordsj specialequivalent after any number moves wordsi wordsj example wordsi zzxy wordsj xyzz specialequivalent because may moves zzxy xzzy xyzz group specialequivalent strings words nonempty subset words such every pair strings group special equivalent group largest size possible not string wordsi not group such wordsi specialequivalent every string group return number groups specialequivalent strings words example input words abcdcdabcbadxyzzzzxyzzyx output explanation one group abcd cdab cbad since they pairwise special equivalent none other strings pairwise special equivalent these other two groups xyzz zzxy zzyx note particular zzxy not special equivalent zzyx example input words abcacbbacbcacabcba output constraints wordslength wordsilength wordsi consist lowercase english letters strings same length

exam room exam room seats single row labeled when student enters room they must sit seat maximizes distance closest person multiple such seats they sit seat lowest number one room student sits seat number design class simulates mentioned exam room implement examroom class examroomint initializes object exam room number seats int seat returns label seat which next student set void leaveint indicates student sitting seat leave room guaranteed student sitting seat example input examroom seat seat seat seat leave seat output null null explanation examroom examroom new examroom examroomseat return one room student sits seat number examroomseat return student sits last seat number examroomseat return student sits last seat number examroomseat return student sits last seat number examroomleave examroomseat return student sits last seat number constraints guaranteed student sitting seat most calls made seat leave

decoded string index given encoded string decode string tape encoded string read one character time following steps taken character read letter letter written onto tape character read digit entire current tape repeatedly written more times total given integer return kth letter indexed decoded string example input leetcode output explanation decoded string leetleetcodeleetleetcodeleetleetcode letter string example input output explanation decoded string hahahaha letter example input output explanation decoded string repeated times letter constraints slength consists lowercase english letters digits starts letter guaranteed less than equal length decoded string decoded string guaranteed less than letters

permutations given array nums distinct integers return possible permutations return answer any order example input nums output example input nums output example input nums output constraints numslength numsi integers nums unique

smallest subtree deepest nodes given root binary tree depth each node shortest distance root return smallest subtree such contains deepest nodes original tree node called deepest largest depth possible any node entire tree subtree node tree consisting node plus set descendants node example input root nullnull output explanation return node value colored yellow diagram nodes coloured blue deepest nodes tree notice nodes contain deepest nodes tree but node smallest subtree them return example input root output explanation root deepest node tree example input root null output explanation deepest node tree valid subtrees subtrees nodes but subtree node smallest constraints number nodes tree range nodeval values nodes tree unique note question same httpsleetcodecomproblemslowestcommonancestorofdeepestleaves

orderly queue given string integer choose one first letters append end string return lexicographically smallest string could after applying mentioned step any number moves example input cba output acb explanation first move move character end obtaining string bac second move move character end obtaining final result acb example input baaca output aaabc explanation first move move character end obtaining string aacab second move move character end obtaining final result aaabc constraints slength consist lowercase english letters

surface area shapes given grid where placed some cubes each value gridij represents tower cubes placed top cell after placing these cubes decided glue any directly adjacent cubes each other forming several irregular shapes return total surface area resulting shapes note bottom face each shape counts toward surface area example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

shortest path get keys given grid grid where empty cell wall starting point lowercase letters represent keys uppercase letters represent locks start starting point one move consists walking one space one four cardinal directions cannot walk outside grid walk wall walk over key pick cannot walk over lock unless corresponding key some exactly one lowercase one uppercase letter first letters english alphabet grid means exactly one key each lock one lock each key also letters used represent keys locks chosen same order english alphabet return lowest number moves acquire keys impossible return example input grid abab output explanation note goal obtain keys not open locks example input grid aabb output example input grid output constraints gridlength gridilength gridij either english letter number keys grid range each key grid unique each key grid matching lock

monotonic array array monotonic either monotone increasing monotone decreasing array nums monotone increasing numsi numsj array nums monotone decreasing numsi numsj given integer array nums return true given array monotonic false otherwise example input nums output true example input nums output true example input nums output false constraints numslength numsi

profitable schemes group members list various crimes they could commit ith crime generates profiti requires groupi members participate member participates one crime member cant participate another crime lets call profitable scheme any subset these crimes generates least minprofit profit total number members participating subset crimes most return number schemes chosen since answer may very large return modulo example input minprofit group profit output explanation profit least group could either commit crimes crime total schemes example input minprofit group profit output explanation profit least group could commit any crimes long they commit one possible schemes constraints minprofit grouplength groupi profitlength grouplength profiti

reachable nodes subdivided graph given undirected graph original graph nodes labeled decide subdivide each edge graph chain nodes number new nodes varying between each edge graph given array edges where edgesi cnti indicates edge between nodes original graph cnti total number new nodes subdivide edge note cnti means not subdivide edge subdivide edge replace cnti new edges cnti new nodes new nodes xcnti new edges xcnti xcnti xcnti new graph want know how many nodes reachable node where node reachable distance maxmoves less given original graph maxmoves return number nodes reachable node new graph example input edges maxmoves output explanation edge subdivisions shown image above nodes reachable highlighted yellow example input edges maxmoves output example input edges maxmoves output explanation node disconnected rest graph only node reachable constraints edgeslength minn edgesilength multiple edges graph cnti maxmoves

advantage shuffle given two integer arrays nums nums both same length advantage nums respect nums number indices which numsi numsi return any permutation nums maximizes advantage respect nums example input nums nums output example input nums nums output constraints numslength numslength numslength numsi numsi

rle iterator use runlength encoding rle encode sequence integers runlength encoded array even length encoding indexed even encodingi tells number times nonnegative integer value encodingi repeated sequence example sequence arr encoded encoding encoding encoding also valid rle arr given runlength encoded array design iterator iterates implement rleiterator class rleiteratorint encoded initializes object encoded array encoded int nextint exhausts next elements returns last element exhausted way element left exhaust return instead example input rleiterator next next next next output null explanation rleiterator rleiterator new rleiterator maps sequence rleiteratornext exhausts terms sequence returning remaining sequence rleiteratornext exhausts term sequence returning remaining sequence rleiteratornext exhausts term sequence returning remaining sequence rleiteratornext exhausts terms returning because first term exhausted but second term did not exist since last term exhausted does not exist return constraints encodinglength encodinglength even encodingi most calls made next

nth magical number positive integer magical divisible either given three integers return nth magical number since answer may very large return modulo example input output example input output constraints

search rotated sorted array integer array nums sorted ascending order distinct values prior being passed your function nums possibly rotated unknown pivot index numslength such resulting array numsk numsk numsn nums nums numsk indexed example might rotated pivot index become given array nums after possible rotation integer target return index target nums not nums must write algorithm olog runtime complexity example input nums target output example input nums target output example input nums target output constraints numslength numsi values nums unique nums ascending array possibly rotated target

nodes distance binary tree given root binary tree value target node target integer return array values nodes distance target node return answer any order example input root nullnull target output explanation nodes distance target node value values example input root target output constraints number nodes tree range nodeval values nodeval unique target value one nodes tree

walking robot simulation robot infinite xyplane starts point facing north robot receive sequence these three possible types commands turn left degrees turn degrees move forward units one unit time some grid squares obstacles ith obstacle grid point obstaclesi robot runs obstacle instead stay current location move next command return maximum euclidean distance robot ever gets origin squared distance return note north means direction east means direction south means direction west means direction example input commands obstacles output explanation robot starts move north units turn move east units furthest point robot ever gets origin which squared units away example input commands obstacles output explanation robot starts move north units turn move east unit get blocked obstacle robot turn left move north units furthest point robot ever gets origin which squared units away example input commands obstacles output explanation robot starts move north units turn turn move south units furthest point robot ever gets origin which squared units away constraints commandslength commandsi either integer range obstacleslength answer guaranteed less than

stone game alice bob play game piles stones even number piles arranged row each pile positive integer number stones pilesi objective game end most stones total number stones across piles odd ties alice bob take turns alice starting first each turn player takes entire pile stones either beginning end row continues more piles left which point person most stones wins assuming alice bob play optimally return true alice wins game false bob wins example input piles output true explanation alice starts first only take first last say she takes first row becomes bob takes board alice takes win points bob takes last board alice takes win points demonstrated taking first winning move alice return true example input piles output true constraints pileslength pileslength even pilesi sumpilesi odd

ksimilar strings strings ksimilar some nonnegative integer swap positions two letters exactly times resulting string equals given two anagrams return smallest which ksimilar example input output explanation two string similar because use one swap change example input abc bca output explanation two strings similar because use two swaps change abc bac bca constraints slength slength slength contain only lowercase letters set anagram

fair candy swap alice bob different total number candies given two integer arrays alicesizes bobsizes where alicesizesi number candies ith box candy alice bobsizesj number candies jth box candy bob since they friends they would exchange one candy box each after exchange they both same total amount candy total amount candy person sum number candies each box they return integer array answer where answer number candies box alice must exchange answer number candies box bob must exchange multiple answers may return any one them guaranteed least one answer exists example input alicesizes bobsizes output example input alicesizes bobsizes output example input alicesizes bobsizes output constraints alicesizeslength bobsizeslength alicesizesi bobsizesj alice bob different total number candies least one valid answer given input

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

transpose matrix given integer array matrix return transpose matrix transpose matrix matrix flipped over main diagonal switching matrixs row column indices example input matrix output example input matrix output constraints matrixlength matrixilength matrixij

length longest fibonacci subsequence sequence fibonaccilike given strictly increasing array arr positive integers forming sequence return length longest fibonaccilike subsequence arr one does not exist return subsequence derived another sequence arr deleting any number elements none arr without changing order remaining elements example subsequence example input arr output explanation longest subsequence fibonaccilike example input arr output explanation longest subsequence fibonaccilike constraints arrlength arri arri

possible full binary trees given integer return list possible full binary trees nodes each node each tree answer must nodeval each element answer root node one possible tree may return final list trees any order full binary tree binary tree where each node exactly children example input output nullnullnullnullnullnullnullnullnullnullnullnull example input output constraints

reordered power given integer reorder digits any order original order such leading digit not zero return true only resulting number power two example input output true example input output false constraints

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

middle linked list given head singly linked list return middle node linked list two middle nodes return second middle node example input head output explanation middle node list node example input head output explanation since list two middle nodes values return second one constraints number nodes list range nodeval

super egg drop given identical eggs access building floors labeled know exists floor where such any egg dropped floor higher than break any egg dropped below floor not break each move may take unbroken egg drop any floor where egg breaks longer use however egg does not break may reuse future moves return minimum number moves need determine certainty what value example input output explanation drop egg floor breaks know otherwise drop egg floor breaks know does not break know need minimum moves determine certainty what value example input output example input output constraints

peak index mountain array array arr mountain following properties hold arrlength exists some arrlength such arr arr arri arri arri arri arrarrlength given mountain array arr return index such arr arr arri arri arri arrarrlength must solve ologarrlength time complexity example input arr output example input arr output example input arr output constraints arrlength arri arr guaranteed mountain array

lemonade change lemonade stand each lemonade costs customers standing queue buy order one time order specified bills each customer only buy one lemonade pay either bill must provide correct change each customer net transaction customer pays note not any change hand first given integer array bills where billsi bill ith customer pays return true provide every customer correct change false otherwise example input bills output true explanation first customers collect three bills order fourth customer collect bill give back fifth customer give bill bill since customers got correct change output true example input bills output false explanation first two customers order collect two bills next two customers order collect bill give back bill last customer not give change back because only two bills since not every customer received correct change answer false constraints billslength billsi either

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

find replace pattern given list strings words string pattern return list wordsi match pattern may return answer any order word matches pattern exists permutation letters after replacing every letter pattern get desired word recall permutation letters bijection letters letters every letter maps another letter two letters map same letter example input words abcdeqmeeaqqdkdccc pattern abb output meeaqq explanation mee matches pattern because permutation ccc does not match pattern because not permutation since map same letter example input words abc pattern output abc constraints patternlength wordslength wordsilength patternlength pattern wordsi lowercase english letters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

score after flipping matrix given binary matrix grid move consists choosing any row column toggling each value row column changing every row matrix interpreted binary number score matrix sum these numbers return highest possible score after making any number moves zero moves example input grid output explanation example input grid output constraints gridlength gridilength gridij either

mirror reflection special square room mirrors each four walls except southwest corner receptors each remaining corners numbered square room walls length laser ray southwest corner first meets east wall distance receptor given two integers return number receptor ray meets first test cases guaranteed ray meet receptor eventually example input output explanation ray meets receptor first time gets reflected back left wall example input output constraints

maximum frequency stack design stacklike data structure push elements stack pop most frequent element stack implement freqstack class freqstack constructs empty frequency stack void pushint val pushes integer val onto top stack int pop removes returns most frequent element stack tie most frequent element element closest stacks top removed returned example input freqstack push push push push push push pop pop pop pop output null null null null null null null explanation freqstack freqstack new freqstack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpop return most frequent stack becomes freqstackpop return most frequent but closest top stack becomes freqstackpop return most frequent stack becomes freqstackpop return most frequent but closest top stack becomes constraints val most calls made push pop guaranteed least one element stack before calling pop

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

possible bipartition want split group people labeled two groups any size each person may dislike some other people they should not same group given integer array dislikes where dislikesi indicates person labeled does not person labeled return true possible split everyone two groups way example input dislikes output true explanation first group second group example input dislikes output false explanation need least groups divide them cannot put them two groups constraints dislikeslength dislikesilength pairs dislikes unique

bitwise ors subarrays given integer array arr return number distinct bitwise ors nonempty subarrays arr bitwise subarray bitwise each integer subarray bitwise subarray one integer integer subarray contiguous nonempty sequence elements within array example input arr output explanation only one possible result example input arr output explanation possible subarrays these yield results unique values answer example input arr output explanation possible results constraints arrlength arri

minimum cost hire workers workers given two integer arrays quality wage where qualityi quality ith worker wagei minimum wage expectation ith worker want hire exactly workers form paid group hire group workers must pay them according following rules every worker paid group should paid ratio their quality compared other workers paid group every worker paid group must paid least their minimum wage expectation given integer return least amount money needed form paid group satisfying above conditions answers within actual answer accepted example input quality wage output explanation pay worker worker example input quality wage output explanation pay worker workers separately constraints qualitylength wagelength qualityi wagei

prime palindrome given integer return smallest prime palindrome greater than equal integer prime exactly two divisors itself note not prime number example primes integer palindrome reads same left does left example palindromes test cases generated answer always exists range example input output example input output example input output constraints

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

projection area shapes given grid where place some cubes axisaligned axes each value gridij represents tower cubes placed top cell view projection these cubes onto planes projection shadow maps our dimensional figure dimensional plane viewing shadow when looking cubes top front side return total area three projections example input grid output explanation here three projections shadows shape made each axisaligned plane example input grid output example input grid output constraints gridlength gridilength gridij

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest subarray sum least given integer array nums integer return length shortest nonempty subarray nums sum least such subarray return subarray contiguous part array example input nums output example input nums output example input nums output constraints numslength numsi

loud rich group people labeled where each person different amount money different level quietness given array richer where richeri indicates more money than integer array quiet where quieti quietness ith person given data richer logically correct data not lead situation where richer than richer than same time return integer array answer where answerx least quiet person person smallest value quiety people who definitely equal more money than person example input richer quiet output explanation answer person more money than which more money than which more money than only person who quieter lower quietx person but not clear they more money than person answer people definitely equal more money than person which could persons person who quietest lower quietx person other answers filled out similar reasoning example input richer quiet output constraints quietlength quieti values quiet unique richerlength pairs richer unique observations richer logically consistent

spiral matrix iii start cell rstart cstart rows cols grid facing east northwest corner first row column grid southeast corner last row column walk clockwise spiral shape visit every position grid whenever move outside grids boundary continue our walk outside grid but may return grid boundary later eventually reach rows cols spaces grid return array coordinates representing positions grid order visited them example input rows cols rstart cstart output example input rows cols rstart cstart output constraints rows cols rstart rows cstart cols

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

construct binary tree preorder postorder traversal given two integer arrays preorder postorder where preorder preorder traversal binary tree distinct values postorder postorder traversal same tree reconstruct return binary tree exist multiple answers return any them example input preorder postorder output example input preorder postorder output constraints preorderlength preorderi preorderlength values preorder unique postorderlength preorderlength postorderi postorderlength values postorder unique guaranteed preorder postorder preorder traversal postorder traversal same binary tree

leafsimilar trees consider leaves binary tree left order values those leaves form leaf value sequence example given tree above leaf value sequence two binary trees considered leafsimilar their leaf value sequence same return true only two given trees head nodes root root leafsimilar example input root nullnull root nullnullnullnullnullnull output true example input root root output false constraints number nodes each tree range both given trees values range

sum subsequence widths width sequence difference between maximum minimum elements sequence given array integers nums return sum widths nonempty subsequences nums since answer may very large return modulo subsequence sequence derived array deleting some elements without changing order remaining elements example subsequence array example input nums output explanation subsequences corresponding widths sum these widths example input nums output constraints numslength numsi

binary gap given positive integer find return longest distance between any two adjacent binary representation two adjacent return two adjacent only separating them possibly distance between two absolute difference between their bit positions example two distance example input output explanation binary first adjacent pair distance second adjacent pair distance answer largest these two distances which note not valid pair since separating two underlined example input output explanation binary not any adjacent pairs binary representation return example input output explanation binary constraints

uncommon words two sentences sentence string singlespace separated words where each word consists only lowercase letters word uncommon appears exactly once one sentences does not appear other sentence given two sentences return list uncommon words may return answer any order example input apple sweet apple sour output sweetsour example input apple apple banana output banana constraints slength slength consist lowercase english letters spaces not leading trailing spaces words separated single space

score parentheses given balanced parentheses string return score string score balanced parentheses string based following rule score score where balanced parentheses strings score where balanced parentheses string example input output example input output example input output constraints slength consists only balanced parentheses string

minimum number refueling stops car travels starting position destination which target miles east starting position gas stations along way gas stations represented array stations where stationsi positioni fueli indicates ith gas station positioni miles east starting position fueli liters gas car starts infinite tank gas which initially startfuel liters fuel uses one liter gas per one mile drives when car reaches gas station may stop refuel transferring gas station car return minimum number refueling stops car must order reach destination cannot reach destination return note car reaches gas station fuel left car refuel car reaches destination fuel left considered arrived example input target startfuel stations output explanation reach target without refueling example input target startfuel stations output explanation not reach target even first gas station example input target startfuel stations output explanation start liters fuel drive position expending liters fuel refuel liters liters gas drive position position expending liters fuel refuel liters liters gas drive reach target made refueling stops along way return constraints target startfuel stationslength positioni positioni target fueli

beautiful array array nums length beautiful nums permutation integers range every index where numsk numsi numsj given integer return any beautiful array nums length least one valid answer given example input output example input output constraints

online election given two integer arrays persons times election ith vote cast personsi time timesi each query time find person leading election time votes cast time count our query case tie most recent vote tied candidates wins implement topvotedcandidate class topvotedcandidateint persons int times initializes object persons times arrays int qint returns number person leading election time according mentioned rules example input topvotedcandidate output null explanation topvotedcandidate topvotedcandidate new topvotedcandidate topvotedcandidateq return time votes leading topvotedcandidateq return time votes leading topvotedcandidateq return time votes leading ties most recent vote topvotedcandidateq return topvotedcandidateq return topvotedcandidateq return constraints personslength timeslength personslength personsi personslength timesi times sorted strictly increasing order times most calls made

minimum increment array unique given integer array nums one move pick index where numslength increment numsi return minimum number moves every value nums unique test cases generated answer fits bit integer example input nums output explanation after move array could example input nums output explanation after moves array could shown less moves impossible array unique values constraints numslength numsi

median two sorted arrays given two sorted arrays nums nums size respectively return median two sorted arrays overall run time complexity should olog example input nums nums output explanation merged array median example input nums nums output explanation merged array median constraints numslength numslength numsi numsi

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

validate stack sequences given two integer arrays pushed popped each distinct values return true could result sequence push pop operations initially empty stack false otherwise example input pushed popped output true explanation might following sequence push push push push pop push pop pop pop pop example input pushed popped output false explanation cannot popped before constraints pushedlength pushedi elements pushed unique poppedlength pushedlength popped permutation pushed

reveal cards increasing order given integer array deck deck cards where every card unique integer integer ith card decki order deck any order want initially cards start face down unrevealed one deck following steps repeatedly cards revealed take top card deck reveal take out deck cards deck put next top card deck bottom deck unrevealed cards back step otherwise stop return ordering deck would reveal cards increasing order note first entry answer considered top deck example input deck output explanation get deck order order does not matter reorder after reordering deck starts where top deck reveal move bottom deck reveal move bottom deck reveal move bottom deck reveal move bottom deck reveal move bottom deck reveal move bottom deck reveal since cards revealed increasing order answer correct example input deck output constraints decklength decki values deck unique

number music playlists your music player contains different songs want listen goal songs not necessarily different your trip avoid boredom create playlist every song played least once song only played again only other songs played given goal return number possible playlists create since answer very large return modulo example input goal output explanation possible playlists example input goal output explanation possible playlists example input goal output explanation possible playlists constraints goal

find shortest superstring given array strings words return smallest string contains each string words substring multiple valid strings smallest length return any them may assume string words substring another string words example input words alexlovesleetcode output alexlovesleetcode explanation permutations alexlovesleetcode would also accepted example input words catgctaagtgctattcaatgcatc output gctaagttcatgcatc constraints wordslength wordsilength wordsi consists lowercase english letters strings words unique

unique email addresses every valid email consists local name domain name separated sign besides lowercase letters email may contain one more example aliceleetcodecom alice local name leetcodecom domain name add periods between some characters local name part email address mail sent forwarded same address without dots local name note rule does not apply domain names example alicezleetcodecom alicezleetcodecom forward same email address add plus local name everything after first plus sign ignored allows certain emails filtered note rule does not apply domain names example mynameemailcom forwarded myemailcom possible use both these rules same time given array strings emails where send one email each emailsi return number different addresses receive mails example input emails testemailalexleetcodecomtestemailbobcathyleetcodecomtestemaildavidleetcodecom output explanation testemailleetcodecom testemailleetcodecom receive mails example input emails aleetcodecombleetcodecomcleetcodecom output constraints emailslength emailsilength emailsi consist lowercase english letters each emailsi contains exactly one character local domain names nonempty local names not start character domain names end com suffix

range sum bst given root node binary search tree two integers low high return sum values nodes value inclusive range low high example input root null low high output explanation nodes range example input root null low high output explanation nodes range constraints number nodes tree range nodeval low high nodeval unique

complete binary tree inserter complete binary tree binary tree which every level except possibly last completely filled nodes far left possible design algorithm insert new node complete binary tree keeping complete after insertion implement cbtinserter class cbtinsertertreenode root initializes data structure root complete binary tree int insertint inserts treenode tree value nodeval val tree remains complete returns value parent inserted treenode treenode getroot returns root node tree example input cbtinserter insert insert getroot output null explanation cbtinserter cbtinserter new cbtinserter cbtinserterinsert return cbtinserterinsert return cbtinsertergetroot return constraints number nodes tree range nodeval root complete binary tree val most calls made insert getroot

sort array parity given array integers nums half integers nums odd other half even sort array whenever numsi odd odd whenever numsi even even return any answer array satisfies condition example input nums output explanation would also accepted example input nums output constraints numslength numslength even half integers nums even numsi follow could solve inplace

binary subarrays sum given binary array nums integer goal return number nonempty subarrays sum goal subarray contiguous part array example input nums goal output explanation subarrays bolded underlined below example input nums goal output constraints numslength numsi either goal numslength

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

minimum add parentheses valid parentheses string valid only empty string written concatenated where valid strings written where valid string given parentheses string one move insert parenthesis any position string example insert opening parenthesis closing parenthesis return minimum number moves required valid example input output example input output constraints slength either

minimize malware spread given network nodes represented adjacency matrix graph where ith node directly connected jth node graphij some nodes initial initially infected malware whenever two nodes directly connected least one those two nodes infected malware both nodes infected malware spread malware continue more nodes infected manner suppose minitial final number nodes infected malware entire network after spread malware stops remove exactly one node initial return node removed would minimize minitial multiple nodes could removed minimize minitial return such node smallest index note node removed initial list infected nodes might infected later due malware spread example input graph initial output example input graph initial output example input graph initial output constraints graphlength graphilength graphij graphij graphji graphii initiallength initiali integers initial unique

sort array given array integers nums sort array ascending order return must solve problem without using any builtin functions onlogn time complexity smallest space complexity possible example input nums output explanation after sorting array positions some numbers not changed example while positions other numbers changed example example input nums output explanation note values nums not necessairly unique constraints numslength numsi

maximum sum circular subarray given circular integer array nums length return maximum possible sum nonempty subarray nums circular array means end array connects beginning array formally next element numsi numsi previous element numsi numsi subarray may only include each element fixed buffer nums most once formally subarray numsi numsi numsj does not exist example input nums output explanation subarray maximum sum example input nums output explanation subarray maximum sum example input nums output explanation subarray maximum sum constraints numslength numsi

sum subarray minimums given array integers arr find sum minb where ranges over every contiguous subarray arr since answer may large return answer modulo example input arr output explanation subarrays minimums sum example input arr output constraints arrlength arri

snakes ladders given integer matrix board where cells labeled boustrophedon style starting bottom left board boardn alternating direction each row start square board each move starting square curr following choose destination square next label range curr mincurr choice simulates result standard sided die roll always most destinations regardless size board next snake ladder must move destination snake ladder otherwise move next game ends when reach square board square row column snake ladder boardrc destination snake ladder boardrc squares not snake ladder note only take snake ladder most once per move destination snake ladder start another snake ladder not follow subsequent snake ladder example suppose board first move your destination square follow ladder square but not follow subsequent ladder return least number moves required reach square not possible reach square return example input board output explanation beginning start square row column decide move square must take ladder square decide move square must take snake square decide move square must take ladder square decide move square ending game lowest possible number moves reach last square return example input board output constraints boardlength boardilength boardij either range squares labeled not any ladders snakes

sum multiplicity given integer array arr integer target return number tuples such arri arrj arrk target answer very large return modulo example input arr target output explanation enumerating values arri arrj arrk occurs times occurs times occurs times occurs times example input arr target output explanation arri arrj arrk occurs times choose one ways two ways example input arr target output explanation occured one time array return constraints arrlength arri target

smallest range given integer array nums integer each index where numslength change numsi either numsi numsi score nums difference between maximum minimum elements nums return minimum score nums after changing values each index example input nums output explanation score maxnums minnums example input nums output explanation change nums score maxnums minnums example input nums output explanation change nums score maxnums minnums constraints numslength numsi

online stock span design algorithm collects daily price quotes some stock returns span stocks price current day span stocks price one day maximum number consecutive days starting day going backward which stock price less than equal price day example prices stock last four days price stock today span today because starting today price stock less than equal consecutive days also prices stock last four days price stock today span today because starting today price stock less than equal consecutive days implement stockspanner class stockspanner initializes object class int nextint price returns span stocks price given todays price price example input stockspanner next next next next next next next output null explanation stockspanner stockspanner new stockspanner stockspannernext return stockspannernext return stockspannernext return stockspannernext return stockspannernext return stockspannernext return because last prices todays price less than equal todays price stockspannernext return constraints price most calls made next

three equal parts given array arr which consists only zeros ones divide array three nonempty parts such these parts represent same binary value possible return any such arr arr arri first part arri arri arrj second part arrj arrj arrarrlength third part three parts equal binary values not possible return note entire part used when considering what binary value represents example represents decimal not also leading zeros allowed represent same value example input arr output example input arr output example input arr output constraints arrlength arri

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

partition array disjoint intervals given integer array nums partition two contiguous subarrays left every element left less than equal every element left nonempty left smallest possible size return length left after such partitioning test cases generated such partitioning exists example input nums output explanation left example input nums output explanation left constraints numslength numsi least one valid answer given input

reverse only letters given string reverse string according following rules characters not english letters remain same position english letters lowercase uppercase should reversed return after reversing example input abcd output dcba example input abcdefghij output jihgfedcba example input testngleetcodeq output qedocteelgntset constraints slength consists characters ascii values range does not contain

delete columns sorted given array strings strs same length strings arranged such one each line making grid example strs abc bce cae arranged follows abc bce cae want delete columns not sorted lexicographically above example indexed columns sorted while column not would delete column return number columns delete example input strs cbadafghi output explanation grid looks follows cba daf ghi columns sorted but column not only need delete column example input strs output explanation grid looks follows column only column sorted not delete any columns example input strs zyxwvutsr output explanation grid looks follows zyx wvu tsr columns not sorted delete constraints strslength strsilength strsi consists lowercase english letters

flip string monotone increasing binary string monotone increasing consists some number possibly none followed some number also possibly none given binary string flip changing return minimum number flips monotone increasing example input output explanation flip last digit get example input output explanation flip get alternatively example input output explanation flip get constraints slength either

cat mouse game undirected graph played two players mouse cat who alternate turns graph given follows grapha list nodes such edge graph mouse starts node goes first cat starts node goes second hole node each players turn they must travel along one edge graph meets where they example mouse node must travel any node graph additionally not allowed cat travel hole node game end three ways ever cat occupies same node mouse cat wins ever mouse reaches hole mouse wins ever position repeated players same position previous turn same players turn move game draw given graph assuming both players play optimally return mouse wins game cat wins game game draw example input graph output example input graph output constraints graphlength graphilength graphlength graphij graphlength graphij graphi unique mouse cat always move

smallest range given integer array nums integer one operation choose any index where numslength change numsi numsi where integer range apply operation most once each index score nums difference between maximum minimum elements nums return minimum score nums after applying mentioned operation most once each index example input nums output explanation score maxnums minnums example input nums output explanation change nums score maxnums minnums example input nums output explanation change nums score maxnums minnums constraints numslength numsi

knight dialer chess knight unique movement may move two squares vertically one square horizontally two squares horizontally one square vertically both forming shape possible movements chess knight shown diagaram chess knight move indicated chess diagram below chess knight phone pad shown below knight only stand numeric cell blue cell given integer return how many distinct phone numbers length dial allowed place knight any numeric cell initially should perform jumps dial number length jumps should valid knight jumps answer may very large return answer modulo example input output explanation need dial number length placing knight over any numeric cell cells sufficient example input output explanation valid number dial example input output explanation please take care mod constraints

minimize malware spread given network nodes represented adjacency matrix graph where ith node directly connected jth node graphij some nodes initial initially infected malware whenever two nodes directly connected least one those two nodes infected malware both nodes infected malware spread malware continue more nodes infected manner suppose minitial final number nodes infected malware entire network after spread malware stops remove exactly one node initial completely removing any connections node any other node return node removed would minimize minitial multiple nodes could removed minimize minitial return such node smallest index example input graph initial output example input graph initial output example input graph initial output constraints graphlength graphilength graphij graphij graphji graphii initiallength initiali integers initial unique

most stones removed same row column plane place stones some integer coordinate points each coordinate point may most one stone stone removed shares either same row same column another stone not removed given array stones length where stonesi represents location ith stone return largest possible number stones removed example input stones output explanation one way remove stones follows remove stone because shares same row remove stone because shares same column remove stone because shares same row remove stone because shares same column remove stone because shares same row stone cannot removed since does not share rowcolumn another stone plane example input stones output explanation one way moves follows remove stone because shares same row remove stone because shares same column remove stone because shares same row stones cannot removed since they not share rowcolumn another stone plane example input stones output explanation only stone plane cannot remove constraints stoneslength two stones same coordinate point

string match permutation perm integers integers range represented string length where permi permi permi permi given string reconstruct permutation perm return multiple valid permutations perm return any them example input idid output example input iii output example input ddi output constraints slength either

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

bag tokens initial power power initial score bag tokens where tokensi value ith token indexed your goal maximize your total score potentially playing each token one two ways your current power least tokensi may play ith token face losing tokensi power gaining score your current score least may play ith token face down gaining tokensi power losing score each token may played most once any order not play tokens return largest possible score achieve after playing any number tokens example input tokens power output explanation playing only token bag impossible because either too little power too little score example input tokens power output explanation play token face your power becomes score becomes need play token since cannot play face add your score example input tokens power output explanation play tokens order get score play token face your power becomes score becomes play token face down your power becomes score becomes play token face your power becomes score becomes play token face your power becomes score becomes constraints tokenslength tokensi power

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

numbers most given digit set given array digits which sorted nondecreasing order write numbers using each digitsi many times want example digits may write numbers such return number positive integers generated less than equal given integer example input digits output explanation numbers written example input digits output explanation write one digit numbers two digit numbers three digit numbers four digit numbers five digit numbers six digit numbers seven digit numbers eight digit numbers nine digit numbers total integers written using digits array example input digits output constraints digitslength digitsilength digitsi digit values digits unique digits sorted nondecreasing order

minimum area rectangle given array points plane points where pointsi return minimum area rectangle formed these points sides parallel axes not any such rectangle return example input points output example input points output constraints pointslength pointsilength given points unique

valid mountain array given array integers arr return true only valid mountain array recall arr mountain array only arrlength exists some arrlength such arr arr arri arri arri arri arrarrlength example input arr output false example input arr output false example input arr output true constraints arrlength arri

reorder data log files given array logs each log spacedelimited string words where first word identifier two types logs letterlogs words except identifier consist lowercase english letters digitlogs words except identifier consist digits reorder these logs letterlogs come before digitlogs letterlogs sorted lexicographically their contents their contents same sort them lexicographically their identifiers digitlogs maintain their relative ordering return final order logs example input logs dig let art candig let own kit diglet art zero output let art canlet art zerolet own kit digdig dig explanation letterlog contents different their ordering art art zero own kit dig digitlogs relative order dig dig example input logs act carzo off key doga act zoo output act cara act zooab off key doga constraints logslength logsilength tokens logsi separated single space logsi guaranteed identifier least one word after identifier

word subsets given two string arrays words words string subset string every letter occurs multiplicity example wrr subset warrior but not subset world string words universal every string words subset return array universal strings words may return answer any order example input words amazonapplefacebookgoogleleetcode words output facebookgoogleleetcode example input words amazonapplefacebookgoogleleetcode words output applegoogleleetcode constraints wordslength wordslength wordsilength wordsilength wordsi wordsi consist only lowercase english letters strings words unique

fruit baskets visiting farm single row fruit trees arranged left trees represented integer array fruits where fruitsi type fruit ith tree produces want collect much fruit possible however owner some strict rules must follow only two baskets each basket only hold single type fruit limit amount fruit each basket hold starting any tree your choice must pick exactly one fruit every tree start tree while moving picked fruits must fit one your baskets once reach tree fruit cannot fit your baskets must stop given integer array fruits return maximum number fruits pick example input fruits output explanation pick trees example input fruits output explanation pick trees started first tree would only pick trees example input fruits output explanation pick trees started first tree would only pick trees constraints fruitslength fruitsi fruitslength

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

largest time given digits given array arr digits find latest hour time made using each digit exactly once hour times formatted hhmm where between between earliest hour time latest return latest hour time hhmm format valid time made return empty string example input arr output explanation valid hour times these times latest example input arr output explanation valid hour times not valid constraints arrlength arri

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

distinct subsequences given string return number distinct nonempty subsequences since answer may very large return modulo subsequence string new string formed original string deleting some none characters without disturbing relative positions remaining characters ace subsequence abcde while aec not example input abc output explanation distinct subsequences abc example input aba output explanation distinct subsequences aba example input aaa output explanation distinct subsequences aaa constraints slength consists lowercase english letters

long pressed name your friend typing his name keyboard sometimes when typing character key might get long pressed character typed more times examine typed characters keyboard return true possible your friends name some characters possibly none being long pressed example input name alex typed aaleex output true explanation alex long pressed example input name saeed typed ssaaedd output false explanation must pressed twice but not typed output constraints namelength typedlength name typed consist only lowercase english letters

minimum falling path sum given array integers matrix return minimum sum any falling path matrix falling path starts any element first row chooses element next row either directly below diagonally leftright specifically next element position row col row col row col row col example input matrix output explanation two falling paths minimum sum shown example input matrix output explanation falling path minimum sum shown constraints matrixlength matrixilength matrixij

kind deck cards given integer array deck where decki represents number written ith card partition cards one more groups such each group exactly cards where cards one group same integer written them return true such partition possible false otherwise example input deck output true explanation possible partition example input deck output false explanation possible partition constraints decklength decki

super palindromes lets say positive integer superpalindrome palindrome also square palindrome given two positive integers left represented strings return number superpalindromes integers inclusive range left example input left output explanation superpalindromes note not superpalindrome but not palindrome example input left output constraints leftlength rightlength left consist only digits left cannot leading zeros left represent integers range left less than equal

stamping sequence given two strings stamp target initially string length targetlength one turn place stamp over replace every letter corresponding letter stamp example stamp abc target abcba initially one turn place stamp index obtain abc place stamp index obtain abc place stamp index obtain abc note stamp must fully contained boundaries order stamp cannot place stamp index want convert target using most targetlength turns return array index leftmost letter being stamped each turn cannot obtain target within targetlength turns return empty array example input stamp abc target ababc output explanation initially place stamp index get abc place stamp index get ababc would also accepted answer some other answers example input stamp abca target aabcaca output explanation initially place stamp index get abca place stamp index get abcabca place stamp index get aabcaca constraints stamplength targetlength stamp target consist lowercase english letters

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

number recent calls recentcounter class which counts number recent requests within certain time frame implement recentcounter class recentcounter initializes counter zero recent requests int pingint adds new request time where represents some time milliseconds returns number requests happened past milliseconds new request specifically return number requests happened inclusive range guaranteed every call ping uses strictly larger value than previous call example input recentcounter ping ping ping ping output null explanation recentcounter recentcounter new recentcounter recentcounterping requests range return recentcounterping requests range return recentcounterping requests range return recentcounterping requests range return constraints each test case call ping strictly increasing values most calls made ping

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest bridge given binary matrix grid where represents land represents water island directionally connected group not connected any other exactly two islands grid may change connect two islands form one island return smallest number must flip connect two islands example input grid output example input grid output example input grid output constraints gridlength gridilength gridij either exactly two islands grid

valid permutations sequence given string length where either means decreasing means increasing permutation perm integers integers range called valid permutation valid permi permi permi permi return number valid permutations perm since answer may large return modulo example input did output explanation valid permutations example input output constraints slength either

sort array parity given integer array nums move even integers beginning array followed odd integers return any array satisfies condition example input nums output explanation outputs would also accepted example input nums output constraints numslength numsi

pancake sorting given array integers arr sort array performing series pancake flips one pancake flip following steps choose integer where arrlength reverse subarray arrk indexed example arr performed pancake flip choosing reverse subarray arr after pancake flip return array kvalues corresponding sequence pancake flips sort arr any valid answer sorts array within arrlength flips judged correct example input arr output explanation perform pancake flips values starting state arr after flip arr after flip arr after flip arr after flip arr which sorted example input arr output explanation input already sorted need flip anything note other answers such would also accepted constraints arrlength arri arrlength integers arr unique arr permutation integers arrlength

binary tree cameras given root binary tree install cameras tree nodes where each camera node monitor parent itself immediate children return minimum number cameras needed monitor nodes tree example input root null output explanation one camera enough monitor nodes placed shown example input root nullnullnullnull output explanation least two cameras needed monitor nodes tree above image shows one valid configurations camera placement constraints number nodes tree range nodeval

interval list intersections given two lists closed intervals firstlist secondlist where firstlisti starti endi secondlistj startj endj each list intervals pairwise disjoint sorted order return intersection these two interval lists closed interval denotes set real numbers intersection two closed intervals set real numbers either empty represented closed interval example intersection example input firstlist secondlist output example input firstlist secondlist output constraints firstlistlength secondlistlength firstlistlength secondlistlength starti endi endi starti startj endj endj startj

squares sorted array given integer array nums sorted nondecreasing order return array squares each number sorted nondecreasing order example input nums output explanation after squaring array becomes after sorting becomes example input nums output constraints numslength numsi nums sorted nondecreasing order follow squaring each element sorting new array very trivial could find solution using different approach

triples bitwise equal zero given integer array nums return number triples triple triple indices such numslength numslength numslength numsi numsj numsk where represents bitwiseand operator example input nums output explanation could choose following triples example input nums output constraints numslength numsi

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

available captures rook chessboard exactly one white rook some number white bishops black pawns empty squares when rook moves chooses one four cardinal directions north east south west moves direction chooses stop reaches edge board captures black pawn blocked white bishop rook considered attacking pawn rook capture pawn rooks turn number available captures white rook number pawns rook attacking return number available captures white rook example input board prpp output explanation example rook attacking pawns example input board pppppppbpppbrbpppbppppppp output explanation bishops blocking rook attacking any pawns example input board pppprpbbp output explanation rook attacking pawns positions constraints boardlength boardilength boardij either exactly one cell boardij

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

add arrayform integer arrayform integer num array representing digits left order example num array form given num arrayform integer integer return arrayform integer num example input num output explanation example input num output explanation example input num output explanation constraints numlength numi num does not contain any leading zeros except zero itself

numbers same consecutive differences given two integers return array integers length where difference between every two consecutive digits may return answer any order note integers should not leading zeros integers not allowed example input output explanation note not valid number because leading zeroes example input output constraints

univalued binary tree binary tree univalued every node tree same value given root binary tree return true given tree univalued false otherwise example input root null output true example input root output false constraints number nodes tree range nodeval

closest points origin given array points where pointsi represents point plane integer return closest points origin distance between two points plane euclidean distance may return answer any order answer guaranteed unique except order example input points output explanation distance between origin sqrt distance between origin sqrt since sqrt sqrt closer origin only want closest points origin answer example input points output explanation answer would also accepted constraints pointslength

minimum cost merge stones piles stones arranged row ith pile stonesi stones move consists merging exactly consecutive piles one pile cost move equal total number stones these piles return minimum cost merge piles stones one pile impossible return example input stones output explanation start merge cost left merge cost left merge cost left total cost minimum possible example input stones output explanation after any merge operation piles left cant merge anymore task impossible example input stones output explanation start merge cost left merge cost left total cost minimum possible constraints stoneslength stonesi

string without aaa bbb given two integers return any string such length contains exactly letters exactly letters substring aaa does not occur substring bbb does not occur example input output abb explanation abb bab bba correct answers example input output aabaa constraints guaranteed such exists given

delete columns sorted given array strings strs same length may choose any deletion indices delete characters those indices each string example strs abcdefuvwxyz deletion indices final array after deletions bef vyz suppose chose set deletion indices answer such after deletions final array elements lexicographic order strs strs strs strsn return minimum possible value answerlength example input strs cabbac output explanation after deleting first column strs strs lexicographic order strs strs strs require least deletion since initially strs not lexicographic order answer example input strs xcybza output explanation strs already lexicographic order not need delete anything note rows strs not necessarily lexicographic order not necessarily true strs strs example input strs zyxwvutsr output explanation delete every column constraints strslength strsilength strsi consists lowercase english letters

smallest string starting leaf given root binary tree where each node value range representing letters return lexicographically smallest string starts leaf tree ends root reminder any shorter prefix string lexicographically smaller example lexicographically smaller than aba leaf node node children example input root output dba example input root output adz example input root nullnull output abc constraints number nodes tree range nodeval

flip binary tree match preorder traversal given root binary tree nodes where each node uniquely assigned value also given sequence values voyage which desired preorder traversal binary tree any node binary tree flipped swapping left subtrees example flipping node following effect flip smallest number nodes preorder traversal tree matches voyage return list values flipped nodes may return answer any order impossible flip nodes tree preorder traversal match voyage return list example input root voyage output explanation impossible flip nodes such preorder traversal matches voyage example input root voyage output explanation flipping node swaps nodes preorder traversal matches voyage example input root voyage output explanation trees preorder traversal already matches voyage nodes need flipped constraints number nodes tree voyagelength nodeval voyagei values tree unique values voyage unique

distribute coins binary tree given root binary tree nodes where each node tree nodeval coins coins total whole tree one move may choose two adjacent nodes move one coin one node another move may parent child child parent return minimum number moves required every node exactly one coin example input root output explanation root tree move one coin left child one coin child example input root output explanation left child root move two coins root taking two moves move one coin root tree child constraints number nodes tree nodeval sum nodeval

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

broken calculator broken calculator integer startvalue display initially one operation multiply number display subtract number display given two integers startvalue target return minimum number operations needed display target calculator example input startvalue target output explanation use double operation decrement operation example input startvalue target output explanation use decrement double example input startvalue target output explanation use double decrement double constraints startvalue target

check completeness binary tree given root binary tree determine complete binary tree complete binary tree every level except possibly last completely filled nodes last level far left possible between nodes inclusive last level example input root output true explanation every level before last full levels nodevalues nodes last level far left possible example input root null output false explanation node value isnt far left possible constraints number nodes tree range nodeval

least operators express number given single positive integer write expression form where each operator etc either addition subtraction multiplication division example might write which value when writing such expression adhere following conventions division operator returns rational numbers parentheses placed anywhere use usual order operations multiplication division happen before addition subtraction not allowed use unary negation operator example valid expression only uses subtraction but not because uses negation would write expression least number operators such expression equals given target return least number operators used example input target output explanation expression contains operations example input target output explanation expression contains operations example input target output explanation expression contains operations constraints target

number squareful arrays array squareful sum every pair adjacent elements perfect square given integer array nums return number permutations nums squareful two permutations perm perm different some index such permi permi example input nums output explanation valid permutations example input nums output constraints numslength numsi

array doubled pairs given integer array even length arr return true possible reorder arr such arr arr every lenarr false otherwise example input arr output false example input arr output false example input arr output true explanation take two groups form constraints arrlength arrlength even arri

satisfiability equality equations given array strings equations represent relationships between variables where each string equationsi length takes one two different forms xiyi xiyihere lowercase letters not necessarily different represent oneletter variable names return true possible assign integers variable names satisfy given equations false otherwise example input equations abba output false explanation assign say first equation satisfied but not second way assign variables satisfy both equations example input equations baab output true explanation could assign satisfy both equations constraints equationslength equationsilength equationsi lowercase letter equationsi either equationsi equationsi lowercase letter

maximum binary tree maximum tree tree where every node value greater than any other value subtree given root maximum binary tree integer val previous problem given tree constructed list root constructa recursively following constructa routine empty return null otherwise let largest element create root node value left child root constructa child root constructai aalength return root note not given directly only root node root constructa suppose copy value val appended guaranteed unique values return constructb example input root nullnull val output nullnullnull explanation example input root null val output nullnull explanation example input root null val output null explanation constraints number nodes tree range nodeval values tree unique val

equal rational numbers given two strings each which represents nonnegative rational number return true only they represent same number strings may use parentheses denote repeating part rational number rational number represented using three parts integerpart nonrepeatingpart repeatingpart number represented one following three ways integerpart example integerpartnonrepeatingpart example integerpartnonrepeatingpartrepeatingpart example repeating portion decimal expansion conventionally denoted within pair round brackets example example input output true explanation because represents represents strings represent same number example input output true example input output true explanation represents repeated forever which equals see link explanation represents number which formed correctly integerpart nonrepeatingpart constraints each part consists only digits integerpart does not leading zeros except zero itself integerpartlength nonrepeatingpartlength repeatingpartlength

vowel spellchecker given wordlist want implement spellchecker converts query word correct word given query word spell checker handles two categories spelling mistakes capitalization query matches word wordlist caseinsensitive query word returned same case case wordlist example wordlist yellow query yellow correct yellow example wordlist yellow query yellow correct yellow example wordlist yellow query yellow correct yellow vowel errors after replacing vowels query word any vowel individually matches word wordlist caseinsensitive query word returned same case match wordlist example wordlist yellow query yollow correct yellow example wordlist yellow query yeellow correct match example wordlist yellow query yllw correct match addition spell checker operates under following precedence rules when query exactly matches word wordlist casesensitive should return same word back when query matches word capitlization should return first such match wordlist when query matches word vowel errors should return first such match wordlist query matches wordlist should return empty string given some queries return list words answer where answeri correct word query queriesi example input wordlist kitekiteharehare queries kitekitekitehareharehearhearketikeetketo output kitekitekitehareharekitekite example input wordlist yellow queries yellow output yellow constraints wordlistlength querieslength wordlistilength queriesilength wordlisti queriesi consist only only english letters

verifying alien dictionary alien language surprisingly they also use english lowercase letters but possibly different order order alphabet some permutation lowercase letters given sequence words written alien language order alphabet return true only given words sorted lexicographically alien language example input words helloleetcode order hlabcdefgijkmnopqrstuvwxyz output true explanation comes before language sequence sorted example input words wordworldrow order worldabcefghijkmnpqstuvxyz output false explanation comes after language words words sequence unsorted example input words appleapp order abcdefghijklmnopqrstuvwxyz output false explanation first three characters app match second string shorter size according lexicographical rules apple app because where defined blank character which less than any other character more info constraints wordslength wordsilength orderlength characters wordsi order english lowercase letters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

vertical order traversal binary tree given root binary tree calculate vertical order traversal binary tree each node position row col left children positions row col row col respectively root tree vertical order traversal binary tree list toptobottom orderings each column index starting leftmost column ending rightmost column may multiple nodes same row same column such case sort these nodes their values return vertical order traversal binary tree example input root nullnull output explanation column only node column column nodes column order top bottom column only node column column only node column example input root output explanation column only node column column only node column column nodes column top comes first same position order them their value before column only node column column only node column example input root output explanation case exact same example but nodes swapped note solution remains same since same location should ordered their values constraints number nodes tree range nodeval

largest component size common factor given integer array unique positive integers nums consider following graph numslength nodes labeled nums numsnumslength undirected edge between numsi numsj numsi numsj share common factor greater than return size largest connected component graph example input nums output example input nums output example input nums output constraints numslength numsi values nums unique

odd even jump given integer array arr some starting index series jumps jumps series called oddnumbered jumps jumps series called evennumbered jumps note jumps numbered not indices may jump forward index index following way oddnumbered jumps jumps jump index such arri arrj arrj smallest possible value multiple such indices only jump smallest such index evennumbered jumps jumps jump index such arri arrj arrj largest possible value multiple such indices only jump smallest such index may case some index legal jumps starting index good starting index reach end array index arrlength jumping some number times possibly more than once return number good starting indices example input arr output explanation starting index our jump since arr smallest arr arr arr arr greater equal arr cannot jump any more starting index our jump cannot jump any more starting index our jump reached end starting index reached end already total different starting indices where reach end some number jumps example input arr output explanation starting index jumps our jump oddnumbered first jump because arr smallest value arr arr arr arr greater than equal arr our jump evennumbered jump because arr largest value arr arr arr less than equal arr arr also largest value but smaller index only jump not our jump oddnumbered jump because arr smallest value arr arr greater than equal arr cant jump starting index not good similar manner deduce starting index jump reach end starting index jump cant jump anymore starting index jump reach end starting index already end total different starting indices where reach end some number jumps example input arr output explanation reach end starting indices constraints arrlength arri

delete columns sorted iii given array strings strs same length may choose any deletion indices delete characters those indices each string example strs abcdefuvwxyz deletion indices final array after deletions bef vyz suppose chose set deletion indices answer such after deletions final array every string row lexicographic order strs strs strsstrslength strs strs strsstrslength return minimum possible value answerlength example input strs babcabbazb output explanation after deleting columns final array strs both these rows individually lexicographic order strs strs strs strs note strs strs array strs not necessarily lexicographic order example input strs edcba output explanation delete less than columns only row not lexicographically sorted example input strs ghidefabc output explanation rows already lexicographically sorted constraints strslength strsilength strsi consists lowercase english letters

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

regions cut slashes grid composed squares where each square consists blank space these characters divide square contiguous regions given grid grid represented string array return number regions note backslash characters escaped represented example input grid output example input grid output example input grid output explanation recall because characters escaped refers refers constraints gridlength gridilength gridij either

maximum width ramp ramp integer array nums pair which numsi numsj width such ramp given integer array nums return maximum width ramp nums ramp nums return example input nums output explanation maximum width ramp achieved nums nums example input nums output explanation maximum width ramp achieved nums nums constraints numslength numsi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

prison cells after days prison cells row each cell either occupied vacant each day whether cell occupied vacant changes according following rules cell two adjacent neighbors both occupied both vacant cell becomes occupied otherwise becomes vacant note because prison row first last cells row cant two adjacent neighbors given integer array cells where cellsi ith cell occupied cellsi ith cell vacant given integer return state prison after days such changes described above example input cells output explanation following table summarizes state prison each day day day day day day day day day example input cells output constraints cellslength cellsi either

sum even numbers after queries given integer array nums array queries where queriesi vali indexi each query first apply numsindexi numsindexi vali print sum even values nums return integer array answer where answeri answer ith query example input nums queries output explanation beginning array after adding nums array sum even values after adding nums array sum even values after adding nums array sum even values after adding nums array sum even values example input nums queries output constraints numslength numsi querieslength vali indexi numslength

number islands given binary grid grid which represents map land water return number islands island surrounded water formed connecting adjacent lands horizontally vertically may assume four edges grid surrounded water example input grid output example input grid output constraints gridlength gridilength gridij

flip equivalent binary trees binary tree define flip operation follows choose any node swap left child subtrees binary tree flip equivalent binary tree only equal after some number flip operations given roots two binary trees root root return true two trees flip equivalent false otherwise example input root nullnullnull root nullnullnullnullnull output true explanation flipped nodes values example input root root output true example input root root output false constraints number nodes each tree range each tree unique node values range

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

minimum area rectangle given array points plane points where pointsi return minimum area any rectangle formed these points sides not necessarily parallel axes not any such rectangle return answers within actual answer accepted example input points output explanation minimum area rectangle occurs area example input points output explanation minimum area rectangle occurs area example input points output explanation possible rectangle form these points constraints pointslength pointsilength given points unique

cousins binary tree given root binary tree unique values values two different nodes tree return true nodes corresponding values tree cousins false otherwise two nodes binary tree cousins they same depth different parents note binary tree root node depth children each depth node depth example input root output false example input root nullnull output true example input root null output false constraints number nodes tree range nodeval each node unique value exist tree

unique paths iii given integer array grid where gridij could representing starting square exactly one starting square representing ending square exactly one ending square representing empty squares walk over representing obstacles cannot walk over return number directional walks starting square ending square walk over every nonobstacle square exactly once example input grid output explanation following two paths example input grid output explanation following four paths example input grid output explanation path walks over every empty square exactly once note starting ending square anywhere grid constraints gridlength gridilength gridij exactly one starting cell one ending cell

longest turbulent subarray given integer array arr return length maximum size turbulent subarray arr subarray turbulent comparison sign flips between each adjacent pair elements subarray more formally subarray arri arri arrj arr said turbulent only arrk arrk when odd arrk arrk when even arrk arrk when even arrk arrk when odd example input arr output explanation arr arr arr arr arr example input arr output example input arr output constraints arrlength arri

tallest billboard installing billboard want largest height billboard two steel supports one each side each steel support must equal height given collection rods welded together example rods lengths weld them together support length return largest possible height your billboard installation cannot support billboard return example input rods output explanation two disjoint subsets which same sum example input rods output explanation two disjoint subsets which same sum example input rods output explanation billboard cannot supported return constraints rodslength rodsi sumrodsi

subarray sums divisible given integer array nums integer return number nonempty subarrays sum divisible subarray contiguous part array example input nums output explanation subarrays sum divisible example input nums output constraints numslength numsi

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

factorial trailing zeroes given integer return number trailing zeroes note example input output explanation trailing zero example input output explanation one trailing zero example input output constraints follow could write solution works logarithmic time complexity

powerful integers given three integers bound return list powerful integers value less than equal bound integer powerful represented some integers may return answer any order your answer each value should occur most once example input bound output explanation example input bound output constraints bound

time based keyvalue store design timebased keyvalue data structure store multiple values same key different time stamps retrieve keys value certain timestamp implement timemap class timemap initializes object data structure void setstring key string value int timestamp stores key key value value given time timestamp string getstring key int timestamp returns value such set called previously timestampprev timestamp multiple such values returns value associated largest timestampprev values returns example input timemap set get get set get get foo bar foo foo foo bar foo foo output null null bar bar null bar bar explanation timemap timemap new timemap timemapsetfoo bar store key foo value bar along timestamp timemapgetfoo return bar timemapgetfoo return bar since value corresponding foo timestamp timestamp only value timestamp bar timemapsetfoo bar store key foo value bar along timestamp timemapgetfoo return bar timemapgetfoo return bar constraints keylength valuelength key value consist lowercase english letters digits timestamp timestamps timestamp set strictly increasing most calls made set get

minimum number consecutive bit flips given binary array nums integer kbit flip choosing subarray length nums simultaneously changing every subarray every subarray return minimum number kbit flips required array not possible return subarray contiguous part array example input nums output explanation flip nums flip nums example input nums output explanation matter how flip subarrays size cannot array become example input nums output explanation flip numsnumsnums nums becomes flip numsnumsnums nums becomes flip numsnumsnums nums becomes constraints numslength numslength

rotting oranges given grid where each cell one three values representing empty cell representing fresh orange representing rotten orange every minute any fresh orange directionally adjacent rotten orange becomes rotten return minimum number minutes must elapse cell fresh orange impossible return example input grid output example input grid output explanation orange bottom left corner row column never rotten because rotting only happens directionally example input grid output explanation since already fresh oranges minute answer constraints gridlength gridilength gridij

nrepeated element size array given integer array nums following properties numslength nums contains unique elements exactly one element nums repeated times return element repeated times example input nums output example input nums output example input nums output constraints numslength numsi nums contains unique elements one them repeated exactly times

minimum cost tickets planned some train traveling one year advance days year which travel given integer array days each day integer train tickets sold three different ways day pass sold costs dollars day pass sold costs dollars day pass sold costs dollars passes allow many days consecutive travel example get day pass day travel days return minimum number dollars need travel every day given list days example input days costs output explanation example here one way buy passes lets travel your travel plan day bought day pass costs which covered day day bought day pass costs which covered days day bought day pass costs which covered day total spent covered days your travel example input days costs output explanation example here one way buy passes lets travel your travel plan day bought day pass costs which covered days day bought day pass costs which covered day total spent covered days your travel constraints dayslength daysi days strictly increasing order costslength costsi

largest perimeter triangle given integer array nums return largest perimeter triangle nonzero area formed three these lengths impossible form any triangle nonzero area return example input nums output explanation form triangle three side lengths example input nums output explanation cannot use side lengths form triangle cannot use side lengths form triangle cannot use side lengths form triangle cannot use any three side lengths form triangle nonzero area return constraints numslength numsi

find town judge town people labeled rumor one these people secretly town judge town judge exists town judge trusts nobody everybody except town judge trusts town judge exactly one person satisfies properties given array trust where trusti representing person labeled trusts person labeled trust relationship does not exist trust array such trust relationship does not exist return label town judge town judge exists identified return otherwise example input trust output example input trust output example input trust output constraints trustlength trustilength pairs trust unique

subarrays different integers given integer array nums integer return number good subarrays nums good array array where number different integers array exactly example different integers subarray contiguous part array example input nums output explanation subarrays formed exactly different integers example input nums output explanation subarrays formed exactly different integers constraints numslength numsi numslength

uncrossed lines given two integer arrays nums nums write integers nums nums order they given two separate horizontal lines may draw connecting lines straight line connecting two numbers numsi numsj such numsi numsj line draw does not intersect any other connecting nonhorizontal line note connecting line cannot intersect even endpoints each number only belong one connecting line return maximum number connecting lines draw way example input nums nums output explanation draw uncrossed lines diagram cannot draw uncrossed lines because line nums nums intersect line nums nums example input nums nums output example input nums nums output constraints numslength numslength numsi numsj

second highest salary sql schema table employee column name type int salary int primary key column table each row table contains information about salary employee write sql query report second highest salary employee table second highest salary query should report null query result format following example example input employee table salary output secondhighestsalary example input employee table salary output secondhighestsalary null

longest duplicate substring given string consider duplicated substrings contiguous substrings occur more times occurrences may overlap return any duplicated substring longest possible length does not duplicated substring answer example input banana output ana example input abcd output constraints slength consists lowercase english letters

minimum domino rotations equal row row dominoes topsi bottomsi represent top bottom halves ith domino domino tile two numbers one each half tile may rotate ith domino topsi bottomsi swap values return minimum number rotations values tops same values bottoms same cannot done return example input tops bottoms output explanation first figure represents dominoes given tops bottoms before any rotations rotate second fourth dominoes every value top row equal indicated second figure example input tops bottoms output explanation case not possible rotate dominoes one row values equal constraints topslength bottomslength topslength topsi bottomsi

smallest integer divisible given positive integer need find length smallest positive integer such divisible only contains digit return length such return note may not fit bit signed integer example input output explanation smallest answer which length example input output explanation such positive integer divisible example input output explanation smallest answer which length constraints

recover tree preorder traversal run preorder depthfirst search dfs root binary tree each node traversal output dashes where depth node output value node depth node depth immediate child depth root node node only one child child guaranteed left child given output traversal traversal recover tree return root example input traversal output example input traversal output nullnullnull example input traversal output null constraints number nodes original tree range nodeval

binary search tree greater sum tree given root binary search tree bst convert greater tree such every key original bst changed original key plus sum keys greater than original key bst reminder binary search tree tree satisfies these constraints left subtree node contains only nodes keys less than nodes key subtree node contains only nodes keys greater than nodes key both left subtrees must also binary search trees example input root nullnullnullnullnullnull output nullnullnullnullnullnull example input root null output null constraints number nodes tree range nodeval values tree unique note question same httpsleetcodecomproblemsconvertbsttogreatertree

convert base given integer return binary string representing representation base note returned string should not leading zeros unless string example input output explantion example input output explantion example input output explantion constraints

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

grid illumination grid size where each cell grid lamp initially turned off given array lamp positions lamps where lampsi rowi coli indicates lamp gridrowicoli turned even same lamp listed more than once turned when lamp turned illuminates cell other cells same row column diagonal also given another array queries where queriesj rowj colj jth query determine whether gridrowjcolj illuminated not after answering jth query turn off lamp gridrowjcolj adjacent lamps they exist lamp adjacent cell shares either side corner gridrowjcolj return array integers ans where ansj should cell jth query illuminated lamp not example input lamps queries output explanation initial grid lamps turned off above picture see grid after turning lamp grid turning lamp grid query asks lamp grid illuminated not blue square illuminated set ans turn off lamps red square query asks lamp grid illuminated not blue square not illuminated set ans turn off lamps red rectangle example input lamps queries output example input lamps queries output constraints lampslength querieslength lampsilength rowi coli queriesjlength rowj colj

construct binary search tree preorder traversal given array integers preorder which represents preorder traversal bst binary search tree construct tree return root guaranteed always possible find binary search tree given requirements given test cases binary search tree binary tree where every node any descendant nodeleft value strictly less than nodeval any descendant noderight value strictly greater than nodeval preorder traversal binary tree displays value node first traverses nodeleft traverses noderight example input preorder output null example input preorder output null constraints preorderlength preorderi values preorder unique

max consecutive ones iii given binary array nums integer return maximum number consecutive array flip most example input nums output explanation bolded numbers flipped longest subarray underlined example input nums output explanation bolded numbers flipped longest subarray underlined constraints numslength numsi either numslength

find peak element peak element element strictly greater than neighbors given indexed integer array nums find peak element return index array contains multiple peaks return index any peaks may imagine nums numsn other words element always considered strictly greater than neighbor outside array must write algorithm runs olog time example input nums output explanation peak element your function should return index number example input nums output explanation your function return either index number where peak element index number where peak element constraints numslength numsi numsi numsi valid

video stitching given series video clips sporting event lasted time seconds these video clips overlapping each other varying lengths each video clip described array clips where clipsi starti endi indicates ith clip started starti ended endi cut these clips segments freely example clip cut segments return minimum number clips needed cut clips segments cover entire sporting event time task impossible return example input clips time output explanation take clips total clips reconstruct sporting event follows cut segments segments which cover sporting event example input clips time output explanation cannot cover only example input clips time output explanation take clips constraints clipslength starti endi time

binary string substrings representing given binary string positive integer return true binary representation integers range substrings false otherwise substring contiguous sequence characters within string example input output true example input output false constraints slength either

camelcase matching given array strings queries string pattern return boolean array answer where answeri true queriesi matches pattern false otherwise query word queriesi matches pattern insert lowercase english letters pattern equals query may insert each character any position may not insert any characters example input queries foobarfoobartestfootballframebufferforcefeedback pattern output truefalsetruetruefalse explanation foobar generated football generated oot framebuffer generated rame uffer example input queries foobarfoobartestfootballframebufferforcefeedback pattern foba output truefalsetruefalsefalse explanation foobar generated football generated example input queries foobarfoobartestfootballframebufferforcefeedback pattern fobat output falsetruefalsefalsefalse explanation foobartest generated est constraints patternlength querieslength queriesilength queriesi pattern consist english letters

actors directors who cooperated least three times sql schema table actordirector column name type actorid int directorid int timestamp int timestamp primary key column table write sql query report provides pairs actorid directorid where actor cooperated director least three times return result table any order query result format following example example input actordirector table actorid directorid timestamp output actorid directorid explanation only pair where they cooperated exactly times

pairs songs total durations divisible given list songs where ith song duration timei seconds return number pairs songs which their total duration seconds divisible formally want number indices such timei timej example input time output explanation three pairs total duration divisible time time total duration time time total duration time time total duration example input time output explanation three pairs total duration which divisible constraints timelength timei

sum root leaf binary numbers given root binary tree where each node value each roottoleaf path represents binary number starting most significant bit example path could represent binary which leaves tree consider numbers represented path root leaf return sum these numbers test cases generated answer fits bits integer example input root output explanation example input root output constraints number nodes tree range nodeval

capacity ship packages within days conveyor belt packages must shipped one port another within days days ith package conveyor belt weight weightsi each day load ship packages conveyor belt order given weights may not load more weight than maximum weight capacity ship return least weight capacity ship result packages conveyor belt being shipped within days days example input weights days output explanation ship capacity minimum ship packages days day day day day day note cargo must shipped order given using ship capacity splitting packages parts not allowed example input weights days output explanation ship capacity minimum ship packages days day day day example input weights days output explanation day day day day constraints days weightslength weightsi

next greater node linked list given head linked list nodes each node list find value next greater node each node find value first node next strictly larger value than return integer array answer where answeri value next greater node ith node indexed ith node does not next greater node set answeri example input head output example input head output constraints number nodes list nodeval

longest arithmetic subsequence given array nums integers return length longest arithmetic subsequence nums note subsequence array derived another array deleting some elements without changing order remaining elements sequence seq arithmetic seqi seqi same value seqlength example input nums output explanation whole array arithmetic sequence steps length example input nums output explanation longest arithmetic subsequence example input nums output explanation longest arithmetic subsequence constraints numslength numsi

number enclaves given binary matrix grid where represents sea cell represents land cell move consists walking one land cell another adjacent directionally land cell walking off boundary grid return number land cells grid which cannot walk off boundary grid any number moves example input grid output explanation three enclosed one not enclosed because boundary example input grid output explanation either boundary reach boundary constraints gridlength gridilength gridij either

consecutive numbers sql schema table logs column name type int num varchar primary key table autoincrement column write sql query find numbers appear least three times consecutively return result table any order query result format following example example input logs table num output consecutivenums explanation only number appears consecutively least three times

remove outermost parentheses valid parentheses string either empty where valid parentheses strings represents string concatenation example valid parentheses strings valid parentheses string primitive nonempty does not exist way split nonempty valid parentheses strings given valid parentheses string consider primitive decomposition where primitive valid parentheses strings return after removing outermost parentheses every primitive string primitive decomposition example input output explanation input string primitive decomposition after removing outer parentheses each part example input output explanation input string primitive decomposition after removing outer parentheses each part example input output explanation input string primitive decomposition after removing outer parentheses each part constraints slength either valid parentheses string

robot bounded circle infinite plane robot initially stands faces north note north direction positive direction yaxis south direction negative direction yaxis east direction positive direction xaxis west direction negative direction xaxis robot receive one three instructions straight unit turn degrees left anticlockwise direction turn degrees clockwise direction robot performs instructions given order repeats them forever return true only exists circle plane such robot never leaves circle example input instructions ggllgg output true explanation robot initially facing north direction move one step position direction north move one step position direction north turn degrees anticlockwise position direction west turn degrees anticlockwise position direction south move one step position direction south move one step position direction south repeating instructions robot goes cycle based return true example input instructions output false explanation robot initially facing north direction move one step position direction north move one step position direction north repeating instructions keeps advancing north direction does not cycles based return false example input instructions output true explanation robot initially facing north direction move one step position direction north turn degrees anticlockwise position direction west move one step position direction west turn degrees anticlockwise position direction south move one step position direction south turn degrees anticlockwise position direction east move one step position direction east turn degrees anticlockwise position direction north repeating instructions robot goes cycle based return true constraints instructionslength instructionsi

last stone weight given array integers stones where stonesi weight ith stone playing game stones each turn choose any two stones smash them together suppose stones weights result smash both stones destroyed stone weight destroyed stone weight new weight end game most one stone left return smallest possible weight left stone stones left return example input stones output explanation combine get array converts combine get array converts combine get array converts combine get array converts optimal value example input stones output constraints stoneslength stonesi

minimum score triangulation polygon convex nsided polygon where each vertex integer value given integer array values where valuesi value ith vertex clockwise order triangulate polygon triangles each triangle value triangle product values vertices total score triangulation sum these values over triangles triangulation return smallest possible total score achieve some triangulation polygon example input values output explanation polygon already triangulated score only triangle example input values output explanation two triangulations possible scores minimum score example input values output explanation minimum score triangulation score constraints valueslength valuesi

maximize sum array after negations given integer array nums integer modify array following way choose index replace numsi numsi should apply process exactly times may choose same index multiple times return largest possible sum array after modifying way example input nums output explanation choose index nums becomes example input nums output explanation choose indices nums becomes example input nums output explanation choose indices nums becomes constraints numslength numsi

stream characters design algorithm accepts stream characters checks suffix these characters string given array strings words example words abc xyz stream added four characters one one your algorithm should detect suffix xyz characters axyz matches xyz words implement streamchecker class streamcheckerstring words initializes object strings array words boolean querychar letter accepts new character stream returns true any nonempty suffix stream forms word words example input streamchecker query query query query query query query query query query query query output null false false false true false true false false false false false true explanation streamchecker streamchecker new streamcheckercd streamcheckerquerya return false streamcheckerqueryb return false streamcheckerqueryc return false streamcheckerqueryd return true because wordlist streamcheckerquerye return false streamcheckerqueryf return true because wordlist streamcheckerqueryg return false streamcheckerqueryh return false streamcheckerqueryi return false streamcheckerqueryj return false streamcheckerqueryk return false streamcheckerqueryl return true because wordlist constraints wordslength wordsilength wordsi consists lowercase english letters letter lowercase english letter most calls made query

partition array maximum sum given integer array arr partition array contiguous subarrays length most after partitioning each subarray their values changed become maximum value subarray return largest sum given array after partitioning test cases generated answer fits bit integer example input arr output explanation arr becomes example input arr output example input arr output constraints arrlength arri arrlength

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

two city scheduling company planning interview people given array costs where costsi acosti bcosti cost flying ith person city acosti cost flying ith person city bcosti return minimum cost fly every person city such exactly people arrive each city example input costs output explanation first person goes city cost second person goes city cost third person goes city cost fourth person goes city cost total minimum cost half people interviewing each city example input costs output example input costs output constraints costslength costslength costslength even acosti bcosti

maximum sum two nonoverlapping subarrays given integer array nums two integers firstlen secondlen return maximum sum elements two nonoverlapping subarrays lengths firstlen secondlen array length firstlen could occur before after array length secondlen but they nonoverlapping subarray contiguous part array example input nums firstlen secondlen output explanation one choice subarrays length length example input nums firstlen secondlen output explanation one choice subarrays length length example input nums firstlen secondlen output explanation one choice subarrays length length constraints firstlen secondlen firstlen secondlen firstlen secondlen numslength numsi

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

matrix cells distance order given four integers row cols rcenter ccenter rows cols matrix cell coordinates rcenter ccenter return coordinates cells matrix sorted their distance rcenter ccenter smallest distance largest distance may return answer any order satisfies condition distance between two cells example input rows cols rcenter ccenter output explanation distances other cells example input rows cols rcenter ccenter output explanation distances other cells answer would also accepted correct example input rows cols rcenter ccenter output explanation distances other cells other answers would also accepted correct such constraints rows cols rcenter rows ccenter cols

complement base integer complement integer integer get when flip binary representation example integer binary complement which integer given integer return complement example input output explanation binary complement binary which base example input output explanation binary complement binary which base example input output explanation binary complement binary which base constraints note question same httpsleetcodecomproblemsnumbercomplement

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

customers who bought products sql schema table customer column name type customerid int productkey int primary key table may contain duplicates customerid not null productkey foreign key product table table product column name type productkey int productkey primary key column table write sql query report customer ids customer table bought products product table return result table any order query result format following example example input customer table customerid productkey product table productkey output customerid explanation customers who bought products customers ids

find common characters given string array words return array characters show strings within words duplicates may return answer any order example input words bellalabelroller output ell example input words coollockcook output constraints wordslength wordsilength wordsi consists lowercase english letters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

remove adjacent duplicates string given string consisting lowercase english letters duplicate removal consists choosing two adjacent equal letters removing them repeatedly duplicate removals longer return final string after such duplicate removals made proven answer unique example input abbaca output explanation example abbaca could remove since letters adjacent equal only possible move result move string aaca which only possible final string example input azxxzy output constraints slength consists lowercase english letters

maximum difference between node ancestor given root binary tree find maximum value which exist different nodes where aval bval ancestor node ancestor either any child equal any child ancestor example input root nullnullnull output explanation various ancestornode differences some which given below possible differences maximum value obtained example input root nullnull output constraints number nodes tree range nodeval

valid boomerang given array points where pointsi represents point plane return true these points boomerang boomerang set three points distinct not straight line example input points output true example input points output false constraints pointslength pointsilength

coloring border given integer matrix grid three integers row col color each value grid represents color grid square location two squares belong same connected component they same color next each other any directions border connected component squares connected component either directionally adjacent square not component boundary grid first last row column should color border connected component contains square gridrowcol color return final grid example input grid row col color output example input grid row col color output example input grid row col color output constraints gridlength gridilength gridij color row col

fraction recurring decimal given two integers representing numerator denominator fraction return fraction string format fractional part repeating enclose repeating part parentheses multiple answers possible return any them guaranteed length answer string less than given inputs example input numerator denominator output example input numerator denominator output example input numerator denominator output constraints numerator denominator denominator

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

clumsy factorial factorial positive integer product positive integers less than equal example factorial clumsy factorial using integers decreasing order swapping out multiply operations fixed rotation operations multiply divide add subtract order example clumsy however these operations applied using usual order operations arithmetic multiplication division steps before any addition subtraction steps multiplication division steps processed left additionally division use floor division such given integer return clumsy factorial example input output explanation example input output explanation constraints

best sightseeing pair given integer array values where valuesi represents value ith sightseeing spot two sightseeing spots distance between them score pair sightseeing spots valuesi valuesj sum values sightseeing spots minus distance between them return maximum score pair sightseeing spots example input values output explanation valuesi valuesj example input values output constraints valueslength valuesi

numbers repeated digits given integer return number positive integers range least one repeated digit example input output explanation only positive number least repeated digit example input output explanation positive numbers atleast repeated digit example input output constraints

escape large maze million million grid xyplane coordinates each grid square start source square want reach target square also array blocked squares where each blockedi represents blocked square coordinates each move walk one square north east south west square not array blocked squares also not allowed walk outside grid return true only possible reach target square source square sequence valid moves example input blocked source target output false explanation target square inaccessible starting source square because cannot move cannot move north east because those squares blocked cannot move south west because cannot outside grid example input blocked source target output true explanation because blocked cells possible reach target square constraints blockedlength blockedilength sourcelength targetlength source target guaranteed source target not blocked

flower planting adjacent gardens labeled array paths where pathsi describes bidirectional path between garden garden each garden want plant one types flowers gardens most paths coming leaving your task choose flower type each garden such any two gardens connected path they different types flowers return any such choice array answer where answeri type flower planted ith garden flower types denoted guaranteed answer exists example input paths output explanation gardens different types gardens different types gardens different types valid answer other valid answers include example input paths output example input paths output constraints pathslength pathsilength every garden most paths coming leaving

moving stones consecutive three stones different positions xaxis given three integers positions stones one move pick stone endpoint either lowest highest position stone move unoccupied position between those endpoints formally lets say stones currently positions pick stone either position position move stone integer position game ends when cannot any more moves stones three consecutive positions return integer array answer length where answer minimum number moves play answer maximum number moves play example input output explanation move stone move stone example input output explanation cannot any moves example input output explanation move stone move stone constraints different values

partition array three parts equal sum given array integers arr return true partition array three nonempty parts equal sums formally partition array find indexes arr arr arri arri arri arrj arrj arrj arrarrlength example input arr output true explanation example input arr output false example input arr output true explanation constraints arrlength arri

longest string chain given array words where each word consists lowercase english letters worda predecessor wordb only insert exactly one letter anywhere worda without changing order other characters equal wordb example abc predecessor abac while cba not predecessor bcad word chain sequence words word word wordk where word predecessor word word predecessor word single word trivially word chain return length longest possible word chain words chosen given list words example input words abbabcabdabdca output explanation one longest word chains ababdabdca example input words xbcpcxbcfxbcxbcpcxbc output explanation words put word chain xbc cxbc pcxbc pcxbcf example input words abcddbqca output explanation trivial word chain abcd one longest word chains abcddbqca not valid word chain because ordering letters changed constraints wordslength wordsilength wordsi only consists lowercase english letters

repeated dna sequences dna sequence composed series nucleotides abbreviated example acgaattccg dna sequence when studying dna useful identify repeated sequences within dna given string represents dna sequence return letterlong sequences substrings occur more than once dna molecule may return answer any order example input aaaaacccccaaaaaccccccaaaaagggttt output aaaaaccccccccccaaaaa example input aaaaaaaaaaaaa output aaaaaaaaaa constraints slength either

moving stones consecutive some stones different positions xaxis given integer array stones positions stones call stone endpoint stone smallest largest position one move pick endpoint stone move unoccupied position longer endpoint stone particular stones say stones cannot move endpoint stone position since moving any position such keep stone endpoint stone game ends when cannot any more moves stones three consecutive positions return integer array answer length where answer minimum number moves play answer maximum number moves play example input stones output explanation move one move finish game move two moves finish game example input stones output explanation move finish game move finish game notice cannot move finish game because would illegal move constraints stoneslength stonesi values stones unique

check word valid after substitutions given string determine valid string valid starting empty string transform after performing following operation any number times insert string abc any position more formally becomes tleft abc tright where tleft tright note tleft tright may empty return true valid string otherwise return false example input aabcbc output true explanation abc aabcbc aabcbc valid example input abcabcababcc output true explanation abc abcabc abcabcabc abcabcababcc abcabcababcc valid example input abccba output false explanation impossible get abccba using operation constraints slength consists letters

divisor game alice bob take turns playing game alice starting first initially number chalkboard each players turn player makes move consisting choosing any replacing number chalkboard also player cannot move they lose game return true only alice wins game assuming both players play optimally example input output true explanation alice chooses bob more moves example input output false explanation alice chooses bob chooses alice more moves constraints

last stone weight given array integers stones where stonesi weight ith stone playing game stones each turn choose heaviest two stones smash them together suppose heaviest two stones weights result smash both stones destroyed stone weight destroyed stone weight new weight end game most one stone left return weight last remaining stone stones left return example input stones output explanation combine get array converts combine get array converts combine get array converts combine get array converts value last stone example input stones output constraints stoneslength stonesi

binary prefix divisible given binary array nums indexed define number whose binary representation subarray numsi mostsignificantbit leastsignificantbit example nums return array booleans answer where answeri true divisible example input nums output truefalsefalse explanation input numbers binary which base only first number divisible answer true example input nums output falsefalsefalse constraints numslength numsi either

project employees sql schema table project column name type projectid int employeeid int projectid employeeid primary key table employeeid foreign key employee table each row table indicates employee employeeid working project projectid table employee column name type employeeid int name varchar experienceyears int employeeid primary key table guaranteed experienceyears not null each row table contains information about one employee write sql query reports average experience years employees each project rounded digits return result table any order query result format following example example input project table projectid employeeid employee table employeeid name experienceyears khaled ali john doe output projectid averageyears explanation average experience years first project second project

distant barcodes warehouse row barcodes where ith barcode barcodesi rearrange barcodes two adjacent barcodes equal may return any answer guaranteed answer exists example input barcodes output example input barcodes output constraints barcodeslength barcodesi

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

product sales analysis sql schema table sales column name type saleid int productid int year int quantity int price int saleid year primary key table productid foreign key product table each row table shows sale product productid certain year note price per unit table product column name type productid int productname varchar productid primary key table each row table indicates product name each product write sql query reports productname year price each saleid sales table return resulting table any order query result format following example example input sales table saleid productid year quantity price product table productid productname nokia apple samsung output productname year price nokia nokia apple explanation saleid conclude nokia sold year saleid conclude nokia sold year saleid conclude apple sold year

smallest subsequence distinct characters given string return lexicographically smallest subsequence contains distinct characters exactly once example input bcabc output abc example input cbacdcbc output acdb constraints slength consists lowercase english letters note question same httpsleetcodecomproblemsremoveduplicateletters

largest number given list nonnegative integers nums arrange them such they form largest number return since result may very large need return string instead integer example input nums output example input nums output constraints numslength numsi

product sales analysis iii sql schema table sales column name type saleid int productid int year int quantity int price int saleid year primary key table productid foreign key product table each row table shows sale product productid certain year note price per unit table product column name type productid int productname varchar productid primary key table each row table indicates product name each product write sql query selects product year quantity price first year every product sold return resulting table any order query result format following example example input sales table saleid productid year quantity price product table productid productname nokia apple samsung output productid firstyear quantity price

letter tile possibilities tiles where each tile one letter tilesi printed return number possible nonempty sequences letters using letters printed those tiles example input tiles aab output explanation possible sequences aab aba baa example input tiles aaabbc output example input tiles output constraints tileslength tiles consists uppercase english letters

greatest common divisor strings two strings say divides only concatenated itself one more times given two strings str str return largest string such divides both str str example input str abcabc str abc output abc example input str ababab str abab output example input str leet str code output constraints strlength strlength str str consist english uppercase letters

car pooling car capacity empty seats vehicle only drives east cannot turn around drive west given integer capacity array trips where tripsi numpassengersi fromi toi indicates ith trip numpassengersi passengers locations pick them drop them off fromi toi respectively locations given number kilometers due east cars initial location return true possible pick drop off passengers given trips false otherwise example input trips capacity output false example input trips capacity output true constraints tripslength tripsilength numpassengersi fromi toi capacity

flip columns maximum number equal rows given binary matrix matrix choose any number columns matrix flip every cell column change value cell vice versa return maximum number rows values equal after some number flips example input matrix output explanation after flipping values row values equal example input matrix output explanation after flipping values first column both rows equal values example input matrix output explanation after flipping values first two columns last two rows equal values constraints matrixlength matrixilength matrixij either

occurrences after bigram given two strings first second consider occurrences some text form first second third where second comes immediately after first third comes immediately after second return array words third each occurrence first second third example input text alice good girl she good student first second good output girlstudent example input text rock first second output werock constraints textlength text consists lowercase english letters spaces words text separated single space firstlength secondlength first second consist lowercase english letters

sales analysis iii sql schema table product column name type productid int productname varchar unitprice int productid primary key table each row table indicates name price each product table sales column name type sellerid int productid int buyerid int saledate date quantity int price int table primary key repeated rows productid foreign key product table each row table contains some information about one sale write sql query reports products only sold first quarter between inclusive return result table any order query result format following example example input product table productid productname unitprice iphone sales table sellerid productid buyerid saledate quantity price output productid productname explanation product only sold spring product sold spring but also sold after spring product sold after spring return only product product only sold spring

shortest common supersequence given two strings str str return shortest string both str str subsequences multiple valid strings return any them string subsequence string deleting some number characters possibly results string example input str abac str cab output cabac explanation str abac subsequence cabac because delete first str cab subsequence cabac because delete last answer provided shortest such string satisfies these properties example input str aaaaaaaa str aaaaaaaa output aaaaaaaa constraints strlength strlength str str consist lowercase english letters

number submatrices sum target given matrix target return number nonempty submatrices sum target submatrix set cells matrixxy two submatrices different they some coordinate different example example input matrix target output explanation four submatrices only contain example input matrix target output explanation two submatrices plus two submatrices plus submatrix example input matrix target output constraints matrixlength matrixlength matrixi target

statistics large sample given large sample integers range since sample large represented array count where countk number times appears sample calculate following statistics minimum minimum element sample maximum maximum element sample mean average sample calculated total sum elements divided total number elements median sample odd number elements median middle element once sample sorted sample even number elements median average two middle elements once sample sorted mode number appears most sample guaranteed unique return statistics sample array floatingpoint numbers minimum maximum mean median mode answers within actual answer accepted example input count output explanation sample represented count minimum maximum respectively mean since size sample even median average two middle elements which mode appears most sample example input count output explanation sample represented count minimum maximum respectively mean display purposes output shows rounded number since size sample odd median middle element mode appears most sample constraints countlength counti sumcount mode sample count represents unique

find minimum rotated sorted array suppose array length sorted ascending order rotated between times example array nums might become rotated times rotated times notice rotating array time results array given sorted rotated array nums unique elements return minimum element array must write algorithm runs olog time example input nums output explanation original array rotated times example input nums output explanation original array rotated times example input nums output explanation original array rotated times constraints numslength numsi integers nums unique nums sorted rotated between times

find mountain array problem interactive problem may recall array arr mountain array only arrlength exists some arrlength such arr arr arri arri arri arri arrarrlength given mountain array mountainarr return minimum index such mountainarrgetindex target such index does not exist return cannot access mountain array directly may only access array using mountainarray interface mountainarraygetk returns element array index indexed mountainarraylength returns length array submissions making more than calls mountainarrayget judged wrong answer also any solutions attempt circumvent judge result disqualification example input array target output explanation exists array index index return minimum index which example input array target output explanation does not exist array return constraints mountainarrlength target mountainarrgetindex

height checker school trying take annual photo students students asked stand single file line nondecreasing order height let ordering represented integer array expected where expectedi expected height ith student line given integer array heights representing current order students standing each heightsi height ith student line indexed return number indices where heightsi expectedi example input heights output explanation heights expected indices not match example input heights output explanation heights expected indices not match example input heights output explanation heights expected indices match constraints heightslength heightsi

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

previous permutation one swap given array positive integers arr not necessarily distinct return lexicographically largest permutation smaller than arr made exactly one swap cannot done return same array note swap exchanges positions two numbers arri arrj example input arr output explanation swapping example input arr output explanation already smallest permutation example input arr output explanation swapping constraints arrlength arri

adding two negabinary numbers given two numbers arr arr base return result adding them together each number given array format array most significant bit least significant bit example arr represents number number arr array format also guaranteed leading zeros either arr arr return result adding arr arr same format array leading zeros example input arr arr output explanation arr represents arr represents output represents example input arr arr output example input arr arr output constraints arrlength arrlength arri arri arr arr leading zeros

insufficient nodes root leaf paths given root binary tree integer limit delete insufficient nodes tree simultaneously return root resulting binary tree node insufficient every root leaf path intersecting node sum strictly less than limit leaf node children example input root limit output nullnullnull example input root nullnullnull limit output nullnullnullnull example input root nullnull limit output null constraints number nodes tree range nodeval limit

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

lexicographically smallest equivalent string given two strings same length string basestr say equivalent characters example abc cde equivalent characters follow usual rules any equivalence relation reflexivity symmetry implies transitivity implies example given equivalency information abc cde acd aab equivalent strings basestr eed aab lexicographically smallest equivalent string basestr return lexicographically smallest equivalent string basestr using equivalency information example input parker morris basestr parser output makkek explanation based equivalency information group their characters krs characters each group equivalent sorted lexicographical order answer makkek example input hello world basestr hold output hdld explanation based equivalency information group their characters deo only second letter basestr changed answer hdld example input leetcode programs basestr sourcecode output aauaaaaada explanation group equivalent characters aoersc letters basestr except transformed answer aauaaaaada constraints slength slength basestr slength slength basestr consist lowercase english letters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

grumpy bookstore owner bookstore owner store open minutes every minute some number customers enter store given integer array customers length where customersi number customer enters store start ith minute those customers leave after end minute some minutes bookstore owner grumpy given binary array grumpy where grumpyi bookstore owner grumpy ith minute otherwise when bookstore owner grumpy customers minute not satisfied otherwise they satisfied bookstore owner knows secret technique keep themselves not grumpy minutes consecutive minutes but only use once return maximum number customers satisfied day example input customers grumpy minutes output explanation bookstore owner keeps themselves not grumpy last minutes maximum number customers satisfied example input customers grumpy minutes output constraints customerslength grumpylength minutes customersi grumpyi either

word frequency write bash script calculate frequency each word text file wordstxt simplicity sake may assume wordstxt contains only lowercase characters space characters each word must consist lowercase characters only words separated one more whitespace characters example assume wordstxt following content day sunny sunny your script should output following sorted descending frequency sunny day note dont worry about handling ties guaranteed each words frequency count unique could write oneline using unix pipes

duplicate zeros given fixedlength integer array arr duplicate each occurrence zero shifting remaining elements note elements beyond length original array not written above modifications input array place not return anything example input arr output explanation after calling your function input array modified example input arr output explanation after calling your function input array modified constraints arrlength arri

brace expansion under grammar given below strings represent set lowercase words let rexpr denote set words expression represents grammar best understood simple examples single letters represent singleton set containing word when take commadelimited list two more expressions take union possibilities rabc abc rabbc abc notice final set only contains each word most once when concatenate two expressions take set possible concatenations between two words where first word comes first expression second word comes second expression rabcd acadbcbd rabcdefgh abdfg abdfh abefg abefh acdfg acdfh acefg acefh formally three rules our grammar every lowercase letter expressions expressions where denotes concatenation denotes cartesian product given expression representing set words under given grammar return sorted list words expression represents example input expression abcde output acadaebcbdbe example input expression azabcabz output aabacz explanation each distinct word written only once final answer constraints expressionlength expressioni consists lowercase english letters given expression represents set words based grammar given description

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

largest values labels set items given two integer arrays values labels where value label ith element valuesi labelsi respectively also given two integers numwanted uselimit choose subset elements such size subset less than equal numwanted most uselimit items same label score subset sum values subset return maximum score subset example input values labels numwanted uselimit output explanation subset chosen first third fifth items example input values labels numwanted uselimit output explanation subset chosen first second third items example input values labels numwanted uselimit output explanation subset chosen first fourth items constraints valueslength labelslength valuesi labelsi numwanted uselimit

longest wellperforming interval given hours list number hours worked per day given employee day considered tiring day only number hours worked strictly greater than wellperforming interval interval days which number tiring days strictly larger than number nontiring days return length longest wellperforming interval example input hours output explanation longest wellperforming interval example input hours output constraints hourslength hoursi

number equivalent domino pairs given list dominoes dominoesi equivalent dominoesj only either one domino rotated equal another domino return number pairs which dominoeslength dominoesi equivalent dominoesj example input dominoes output example input dominoes output constraints dominoeslength dominoesilength dominoesij

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

snapshot array implement snapshotarray supports following interface snapshotarrayint length initializes arraylike data structure given length initially each element equals void setindex val sets element given index equal val int snap takes snapshot array returns snapid total number times called snap minus int getindex snapid returns value given index time took snapshot given snapid example input snapshotarraysetsnapsetget output nullnullnull explanation snapshotarray snapshotarr new snapshotarray set length snapshotarrset set array snapshotarrsnap take snapshot return snapid snapshotarrset snapshotarrget get value array snapid return constraints length index length val snapid total number times call snap most calls made set snap get

minimum cost tree leaf values given array arr positive integers consider binary trees such each node either children values arr correspond values each leaf inorder traversal tree value each nonleaf node equal product largest leaf value left subtree respectively possible binary trees considered return smallest possible sum values each nonleaf node guaranteed sum fits bit integer node leaf only zero children example input arr output explanation two possible trees shown first nonleaf node sum second nonleaf node sum example input arr output constraints arrlength arri guaranteed answer fits bit signed integer less than

trapping rain water given nonnegative integers representing elevation map where width each bar compute how much water trap after raining example input height output explanation above elevation map black section represented array case units rain water blue section being trapped example input height output constraints heightlength heighti

rising temperature sql schema table weather column name type int recorddate date temperature int primary key table table contains information about temperature certain day write sql query find dates higher temperatures compared previous dates yesterday return result table any order query result format following example example input weather table recorddate temperature output explanation temperature higher than previous day temperature higher than previous day

corporate flight bookings flights labeled given array flight bookings bookings where bookingsi firsti lasti seatsi represents booking flights firsti lasti inclusive seatsi seats reserved each flight range return array answer length where answeri total number seats reserved flight example input bookings output explanation flight labels booking reserved booking reserved booking reserved total seats answer example input bookings output explanation flight labels booking reserved booking reserved total seats answer constraints bookingslength bookingsilength firsti lasti seatsi

longest common subsequence given two strings text text return length their longest common subsequence common subsequence return subsequence string new string generated original string some characters none deleted without changing relative order remaining characters example ace subsequence abcde common subsequence two strings subsequence common both strings example input text abcde text ace output explanation longest common subsequence ace length example input text abc text abc output explanation longest common subsequence abc length example input text abc text def output explanation such common subsequence result constraints textlength textlength text text consist only lowercase english characters

lowest common ancestor deepest leaves given root binary tree return lowest common ancestor deepest leaves recall node binary tree leaf only children depth root tree depth node depth each children lowest common ancestor set nodes node largest depth such every node subtree root example input root nullnull output explanation return node value colored yellow diagram nodes coloured blue deepest leafnodes tree note nodes also leaf nodes but depth them but depth nodes example input root output explanation root deepest node tree lca itself example input root null output explanation deepest leaf node tree lca one node itself constraints number nodes tree range nodeval values nodes tree unique note question same httpsleetcodecomproblemssmallestsubtreewithallthedeepestnodes

nth tribonacci number tribonacci sequence defined follows given return value example input output explanation example input output constraints answer guaranteed fit within bit integer answer

stone game alice bob continue their games piles stones number piles arranged row each pile positive integer number stones pilesi objective game end most stones alice bob take turns alice starting first initially each players turn player take stones first remaining piles where set maxm game continues stones taken assuming alice bob play optimally return maximum number stones alice get example input piles output explanation alice takes one pile beginning bob takes two piles alice takes piles again alice get piles total alice takes two piles beginning bob take three piles left case alice get piles total return since larger example input piles output constraints pileslength pilesi

decrease elements array zigzag given array nums integers move consists choosing any element decreasing array zigzag array either every evenindexed element greater than adjacent elements every oddindexed element greater than adjacent elements return minimum number moves transform given array nums zigzag array example input nums output explanation decrease example input nums output constraints numslength numsi

distribute candies people distribute some number candies row numpeople people following way give candy first person candies second person give candies last person back start row giving candies first person candies second person give candies last person process repeats giving one more candy each time moving start row after reach end run out candies last person receive our remaining candies not necessarily one more than previous gift return array length numpeople sum candies represents final distribution candies example input candies numpeople output explanation first turn ans array second turn ans array third turn ans array fourth turn ans because only one candy left final array example input candies numpeople output explanation first turn ans array second turn ans array third turn ans array fourth turn ans final array constraints candies numpeople

relative sort array given two arrays arr arr elements arr distinct elements arr also arr sort elements arr such relative ordering items arr same arr elements not appear arr should placed end arr ascending order example input arr arr output example input arr arr output constraints arrlength arrlength arri arri elements arr distinct each arri arr

alphabet board path alphabet board start position corresponding character board here board abcde fghij klmno pqrst uvwxy shown diagram below may following moves moves our position one row position exists board moves our position down one row position exists board moves our position left one column position exists board moves our position one column position exists board adds character boardrc our current position answer here only positions exist board positions letters them return sequence moves makes our answer equal target minimum number moves may return any path does example input target leet output ddruurrrddd example input target code output rrddrruulr constraints targetlength target consists only english lowercase letters

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

customers who never order sql schema table customers column name type int name varchar primary key column table each row table indicates name customer table orders column name type int customerid int primary key column table customerid foreign key customers table each row table indicates order customer who ordered write sql query report customers who never order anything return result table any order query result format following example example input customers table name joe henry sam max orders table customerid output customers henry max

building two kinds threads oxygen hydrogen your goal group these threads form water molecules barrier where each thread wait complete molecule formed hydrogen oxygen threads given releasehydrogen releaseoxygen methods respectively which allow them pass barrier these threads should pass barrier groups three they must immediately bond each other form water molecule must guarantee threads one molecule bond before any other threads next molecule other words oxygen thread arrives barrier when hydrogen threads present must wait two hydrogen threads hydrogen thread arrives barrier when other threads present must wait oxygen thread another hydrogen thread not worry about matching threads explicitly threads not necessarily know which other threads they paired key threads pass barriers complete sets examine sequence threads bind divide them groups three each group should contain one oxygen two hydrogen threads write synchronization code oxygen hydrogen molecules enforces these constraints example input water hoh output hho explanation hoh ohh also valid answers example input water oohhhh output hhohho explanation hohhho ohhhho hhohoh hohhoh ohhhoh hhoohh hohohh ohhohh also valid answers constraints waterlength wateri either exactly water exactly water

shortest path alternating colors given integer number nodes directed graph where nodes labeled each edge red blue graph could selfedges parallel edges given two arrays rededges blueedges where rededgesi indicates directed red edge node node graph blueedgesj indicates directed blue edge node node graph return array answer length where each answerx length shortest path node node such edge colors alternate along path such path does not exist example input rededges blueedges output example input rededges blueedges output constraints rededgeslength blueedgeslength rededgesilength blueedgesjlength

article views sql schema table views column name type articleid int authorid int viewerid int viewdate date primary key table may duplicate rows each row table indicates some viewer viewed article written some author some date note equal authorid viewerid indicate same person write sql query find authors viewed least one their own articles return result table sorted ascending order query result format following example example input views table articleid authorid viewerid viewdate output

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

parsing boolean expression boolean expression expression evaluates either true false one following shapes evaluates true evaluates false subexpr evaluates logical not inner expression subexpr subexpr subexpr subexprn evaluates logical inner expressions subexpr subexpr subexprn where subexpr subexpr subexprn evaluates logical inner expressions subexpr subexpr subexprn where given string expression represents boolean expression return evaluation expression guaranteed given expression valid follows given rules example input expression output false explanation first evaluate expression evaluate expression finally return false example input expression ffft output true explanation evaluation false false false true true example input expression output true explanation first evaluate false true false expression evaluate not false true return true constraints expressionlength expressioni one following characters

smallest sufficient team project list required skills reqskills list people ith person peoplei contains list skills person consider sufficient team set people such every required skill reqskills least one person team who skill represent these teams index each person example team represents people skills people people people return any sufficient team smallest possible size represented index each person may return answer any order guaranteed answer exists example input reqskills javanodejsreactjs people javanodejsnodejsreactjs output example input reqskills algorithmsmathjavareactjscsharpaws people algorithmsmathjavaalgorithmsmathreactjsjavacsharpawsreactjscsharpcsharpmathawsjava output constraints reqskillslength reqskillsilength reqskillsi consists lowercase english letters strings reqskills unique peoplelength peopleilength peopleijlength peopleij consists lowercase english letters strings peoplei unique every skill peoplei skill reqskills guaranteed sufficient team exists

user activity past days sql schema table activity column name type userid int sessionid int activitydate date activitytype enum primary key table may duplicate rows activitytype column enum type opensession endsession scrolldown sendmessage table shows user activities social media website note each session belongs exactly one user write sql query find daily active user count period days ending inclusively user active someday they made least one activity day return result table any order query result format following example example input activity table userid sessionid activitydate activitytype opensession scrolldown endsession opensession sendmessage endsession opensession sendmessage endsession opensession endsession output day activeusers explanation note not care about days zero active users

largest bordered square given grid return number elements largest square subgrid border such subgrid doesnt exist grid example input grid output example input grid output constraints gridlength gridlength gridij

longest chunked palindrome decomposition given string text should split substrings subtext subtext subtextk such subtexti nonempty string concatenation substrings equal text subtext subtext subtextk text subtexti subtextk valid values return largest possible value example input text ghiabcdefhelloadamhelloabcdefghi output explanation split string ghiabcdefhelloadamhelloabcdefghi example input text merchant output explanation split string merchant example input text antaprezatepzapreanta output explanation split string antaprezatepzapreanta constraints textlength text consists only lowercase english characters

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

delete duplicate emails sql schema table person column name type int email varchar primary key column table each row table contains email emails not contain uppercase letters write sql query delete duplicate emails keeping only one unique email smallest note supposed write delete statement not select one after running your script answer shown person table driver first compile run your piece code show person table final order person table does not matter query result format following example example input person table email johnexamplecom bobexamplecom johnexamplecom output email johnexamplecom bobexamplecom explanation johnexamplecom repeated two times keep row smallest

print order suppose class public class foo public void first printfirst public void second printsecond public void third printthird same instance foo passed three different threads thread call first thread call second thread call third design mechanism modify program ensure second executed after first third executed after second note not know how threads scheduled operating system even though numbers input seem imply ordering input format see mainly ensure our tests comprehensiveness example input nums output firstsecondthird explanation three threads being fired asynchronously input means thread calls first thread calls second thread calls third firstsecondthird correct output example input nums output firstsecondthird explanation input means thread calls first thread calls third thread calls second firstsecondthird correct output constraints nums permutation

filling bookcase shelves given array books where booksi thicknessi heighti indicates thickness height ith book also given integer shelfwidth want place these books order onto bookcase shelves total width shelfwidth choose some books place shelf such sum their thickness less than equal shelfwidth build another level shelf bookcase total height bookcase increased maximum height books put down repeat process more books place note each step above process order books place same order given sequence books example ordered list books might place first second book onto first shelf third book second shelf fourth fifth book last shelf return minimum possible height total bookshelf after placing shelves manner example input books shelfwidth output explanation sum heights shelves notice book number does not first shelf example input books shelfwidth output constraints bookslength thicknessi shelfwidth heighti

maximum absolute value expression given two arrays integers equal lengths return maximum value arri arrj arri arrj where maximum taken over arrlength example input arr arr output example input arr arr output constraints arrlength arrlength arri arri

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

maximum nesting depth two valid parentheses strings string valid parentheses string denoted vps only consists characters only empty string written concatenated where vpss written where vps similarly define nesting depth depths any vps follows depth deptha maxdeptha depthb where vpss depth deptha where vps example vpss nesting depths not vpss given vps seq split two disjoint subsequences such vpss alength blength seqlength choose any such such maxdeptha depthb minimum possible value return answer array length seqlength encodes such choice answeri seqi part else answeri note even though multiple answers may exist may return any them example input seq output example input seq output constraints seqsize

binary tree coloring game two players play turn based game binary tree given root binary tree number nodes tree odd each node distinct value initially first player names value second player names value first player colors node value red second player colors node value blue players take turns starting first player each turn player chooses node their color red player blue player colors uncolored neighbor chosen node either left child child parent chosen node only player cannot choose such node way they must pass their turn both players pass their turn game ends winner player colored more nodes second player possible choose such ensure win game return true not possible return false example input root output true explanation second player choose node value example input root output false constraints number nodes tree odd nodeval values tree unique

defanging address given valid ipv address return defanged version address defanged address replaces every period example input address output example input address output constraints given address valid ipv address

path zigzag labelled binary tree infinite binary tree where every node two children nodes labelled row order odd numbered rows first third fifth labelling left while even numbered rows second fourth sixth labelling left given label node tree return labels path root tree node label example input label output example input label output constraints label

print zero even odd function printnumber called integer parameter prints console example calling printnumber prints console given instance class zeroevenodd three functions zero even odd same instance zeroevenodd passed three different threads thread calls zero should only output thread calls even should only output even numbers thread calls odd should only output odd numbers modify given class output series where length series must implement zeroevenodd class zeroevenoddint initializes object number represents numbers should printed void zeroprintnumber calls printnumber output one zero void evenprintnumber calls printnumber output one even number void oddprintnumber calls printnumber output one odd number example input output explanation three threads being fired asynchronously one them calls zero other calls even last one calls odd correct output example input output constraints

tenth line given text file filetxt print line file example assume filetxt following content line line line line line line line line line line your script should output tenth line which line note file contains less than lines what should output theres least three different solutions try explore possibilities

print foobar alternately suppose given following code class foobar public void foo int printfoo public void bar int printbar same instance foobar passed two different threads thread call foo while thread call bar modify given program output foobar times example input output foobar explanation two threads being fired asynchronously one them calls foo while other calls bar foobar being output time example input output foobarfoobar explanation foobar being output times constraints

delete nodes return forest given root binary tree each node tree distinct value after deleting nodes value todelete left forest disjoint union trees return roots trees remaining forest may return result any order example input root todelete output null example input root null todelete output constraints number nodes given tree most each node distinct value between todeletelength todelete contains distinct values between

critical connections network servers numbered connected undirected servertoserver connections forming network where connectionsi represents connection between servers any server reach other servers directly indirectly network critical connection connection removed some servers unable reach some other server return critical connections network any order example input connections output explanation also accepted example input connections output constraints connectionslength repeated connections

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

maximum level sum binary tree given root binary tree level root level children return smallest level such sum values nodes level maximal example input root nullnull output explanation level sum level sum level sum return level maximum sum which level example input root nullnullnullnull output constraints number nodes tree range nodeval

number dice rolls target sum dice each die faces numbered given three integers target return number possible ways out total ways roll dice sum faceup numbers equals target since answer may too large return modulo example input target output explanation throw one die faces only one way get sum example input target output explanation throw two dice each faces ways get sum example input target output explanation answer must returned modulo constraints target

day year given string date representing gregorian calendar date formatted yyyymmdd return day number year example input date output explanation given date day year example input date output constraints datelength date date other dateis digits date represents calendar date between jan dec

invalid transactions transaction possibly invalid amount exceeds occurs within minutes another transaction same name different city given array strings transaction where transactionsi consists commaseparated values representing name time minutes amount city transaction return list transactions possibly invalid may return answer any order example input transactions alicemtvalicebeijing output alicemtvalicebeijing explanation first transaction invalid because second transaction occurs within difference minutes same name different city similarly second one invalid too example input transactions alicemtvalicemtv output alicemtv example input transactions alicemtvbobmtv output bobmtv constraints transactionslength each transactionsi takes form nametimeamountcity each name city consist lowercase english letters lengths between each time consist digits represent integer between each amount consist digits represent integer between

dinner plate stacks infinite number stacks arranged row numbered left each stacks same maximum capacity implement dinnerplates class dinnerplatesint capacity initializes object maximum capacity stacks capacity void pushint val pushes given integer val leftmost stack size less than capacity int pop returns value top rightmost nonempty stack removes stack returns stacks empty int popatstackint index returns value top stack given index index removes stack returns stack given index empty example input dinnerplates push push push push push popatstack push push popatstack popatstack pop pop pop pop pop output null null null null null null null null explanation dinnerplates dinnerplates initialize capacity dpush dpush dpush dpush dpush stacks dpopatstack returns stacks dpush stacks dpush stacks dpopatstack returns stacks dpopatstack returns stacks dpop returns stacks dpop returns stacks dpop returns stacks dpop returns stacks dpop returns stacks constraints capacity val index most calls made push pop popatstack

day week given date return corresponding day week date input given three integers representing day month year respectively return answer one following values sunday monday tuesday wednesday thursday friday saturday example input day month year output saturday example input day month year output sunday example input day month year output sunday constraints given dates valid dates between years

dungeon game demons captured princess imprisoned her bottomright corner dungeon dungeon consists rooms laid out grid our valiant knight initially positioned topleft room must fight his way dungeon rescue princess knight initial health point represented positive integer any point his health point drops below dies immediately some rooms guarded demons represented negative integers knight loses health entering these rooms other rooms either empty represented contain magic orbs increase knights health represented positive integers reach princess quickly possible knight decides move only rightward downward each step return knights minimum initial health rescue princess note any room contain threats powerups even first room knight enters bottomright room where princess imprisoned example input dungeon output explanation initial health knight must least follows optimal path down down example input dungeon output constraints dungeonlength dungeonilength dungeonij

maximum subarray sum one deletion given array integers return maximum sum nonempty subarray contiguous elements most one element deletion other words want choose subarray optionally delete one element least one element left sum remaining elements maximum possible note subarray needs nonempty after deleting one element example input arr output explanation because choose drop subarray becomes maximum value example input arr output explanation choose maximum sum example input arr output explanation final subarray needs nonempty cant choose delete get empty subarray sum equals constraints arrlength arri

compare strings frequency smallest character let function frequency lexicographically smallest character nonempty string example dcce because lexicographically smallest character which frequency given array strings words another array query strings queries each query queriesi count number words words such fqueriesi each words return integer array answer where each answeri answer ith query example input queries cbd words zaaaz output explanation first query fcbd fzaaaz fcbd fzaaaz example input queries bbbcc words aaaaaaaaaa output explanation first query only fbbb faaaa second query both faaa faaaa both fcc constraints querieslength wordslength queriesilength wordsilength queriesij wordsij consist lowercase english letters

online majority element subarray design data structure efficiently finds majority element given subarray majority element subarray element occurs threshold times more subarray implementing majoritychecker class majoritycheckerint arr initializes instance class given array arr int queryint left int int threshold returns element subarray arrleftright occurs least threshold times such element exists example input majoritychecker query query query output null explanation majoritychecker majoritychecker new majoritychecker majoritycheckerquery return majoritycheckerquery return majoritycheckerquery return constraints arrlength arri left arrlength threshold left threshold left most calls made query

reverse substrings between each pair parentheses given string consists lower case english letters brackets reverse strings each pair matching parentheses starting innermost one your result should not contain any brackets example input abcd output dcba example input ulovei output iloveu explanation substring love reversed first whole string reversed example input edetocel output leetcode explanation first reverse substring etco finally whole string constraints slength only contains lower case english characters parentheses guaranteed parentheses balanced

minimum absolute difference given array distinct integers arr find pairs elements minimum absolute difference any two elements return list pairs ascending orderwith respect pairs each pair follows arr equals minimum absolute difference any two elements arr example input arr output explanation minimum absolute difference list pairs difference equal ascending order example input arr output example input arr output constraints arrlength arri

reformat department table sql schema table department column name type int revenue int month varchar month primary key table table information about revenue each department per month month values janfebmaraprmayjunjulaugsepoctnovdec write sql query reformat table such department column revenue column each month return result table any order query result format following example example input department table revenue month jan jan feb feb mar output janrevenue febrevenue marrevenue decrevenue null null null null null null null explanation revenue apr dec null note result table columns department months

number valid words each puzzle respect given puzzle string word valid both following conditions satisfied word contains first letter puzzle each letter word letter puzzle example puzzle abcdefg valid words faced cabbage baggage while invalid words beefed does not include based includes which not puzzle return array answer where answeri number words given word list words valid respect puzzle puzzlesi example input words aaaaasasableabilityacttactoraccess puzzles aboveyzabrodyzabsluteabsoryzactreszgaswxyz output explanation valid word aboveyz aaaa valid word abrodyz aaaa valid words abslute aaaa asas able valid words absoryz aaaa asas valid words actresz aaaa asas actt access valid words gaswxyz cause none words list contains letter example input words applepleasplease puzzles aelwxyzaelpxyzaelpsxysaelpxyxaelpsy output constraints wordslength wordsilength puzzleslength puzzlesilength wordsi puzzlesi consist lowercase english letters each puzzlesi does not contain repeated characters

far land possible given grid containing only values where represents water represents land find water cell such distance nearest land cell maximized return distance land water exists grid return distance used problem manhattan distance distance between two cells example input grid output explanation cell far possible land distance example input grid output explanation cell far possible land distance constraints gridlength gridilength gridij

product price given date sql schema table products column name type productid int newprice int changedate date productid changedate primary key table each row table indicates price some product changed new price some date write sql query find prices products assume price products before any change return result table any order query result format following example example input products table productid newprice changedate output productid price

distance between bus stops bus stops numbered form circle know distance between pairs neighboring stops where distancei distance between stops number bus goes along both directions clockwise counterclockwise return shortest distance between given start destination stops example input distance start destination output explanation distance between minimum example input distance start destination output explanation distance between minimum example input distance start destination output explanation distance between minimum constraints distancelength start destination distancei

excel sheet column title given integer columnnumber return corresponding column title appears excel sheet example example input columnnumber output example input columnnumber output example input columnnumber output constraints columnnumber

monthly transactions sql schema table transactions column name type int country varchar state enum amount int transdate date primary key table table information about incoming transactions state column enum type approved declined write sql query find each month country number transactions their total amount number approved transactions their total amount return result table any order query result format following example example input transactions table country state amount transdate approved declined approved approved output month country transcount approvedcount transtotalamount approvedtotalamount

last substring lexicographical order given string return last substring lexicographical order example input abab output bab explanation substrings aba abab bab lexicographically maximum substring bab example input leetcode output tcode constraints slength contains only lowercase english letters

palindrome substring given string array queries where queriesi lefti righti may rearrange substring sleftirighti each query choose them replace any lowercase english letter substring possible palindrome string after operations above result query true otherwise result false return boolean array answer where answeri result ith query queriesi note each letter counted individually replacement example sleftirighti aaa only replace two letters also note query modifies initial string example input abcda queries output truefalsefalsetruetrue explanation queries substring palidrome queries substring not palidrome queries substring abcd not palidrome after replacing only character queries substring abcd could changed abba which palidrome also changed baab first rearrange bacd replace queries substring abcda could changed abcba which palidrome example input lyb queries output falsetrue constraints slength querieslength lefti righti slength slength consists lowercase english letters

maximum number balloons given string text want use characters text form many instances word balloon possible use each character text most once return maximum number instances formed example input text nlaebolko output example input text loonbalxballpoon output example input text leetcode output constraints textlength text consists lower case english letters only

array strictly increasing given two integer arrays arr arr return minimum number operations possibly zero needed arr strictly increasing one operation choose two indices arrlength arrlength assignment arri arrj way arr strictly increasing return example input arr arr output explanation replace arr example input arr arr output explanation replace replace arr example input arr arr output explanation cant arr strictly increasing constraints arrlength arrlength arri arri

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

prime arrangements return number permutations prime numbers prime indices indexed recall integer prime only greater than cannot written product two positive integers both smaller than since answer may large return answer modulo example input output explanation example valid permutation but not because prime number index example input output constraints

swap longest repeated character substring given string text swap two characters text return length longest substring repeated characters example input text ababa output explanation swap first last last first longest repeated character substring aaa length example input text aaabaaa output explanation swap last first get longest repeated character substring aaaaaa length example input text aaaaa output explanation need swap longest repeated character substring aaaaa length constraints textlength text consist lowercase english characters only

remove zero sum consecutive nodes linked list given head linked list repeatedly delete consecutive sequences nodes sum such sequences after doing return head final linked list may return any such answer note examples below sequences serializations listnode objects example input head output note answer would also accepted example input head output example input head output constraints given linked list contain between nodes each node linked list nodeval

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

best time buy sell stock given integer array prices where pricesi price given stock ith day integer find maximum profit achieve may complete most transactions may buy most times sell most times note may not engage multiple transactions simultaneously must sell stock before buy again example input prices output explanation buy day price sell day price profit example input prices output explanation buy day price sell day price profit buy day price sell day price profit constraints priceslength pricesi

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

kconcatenation maximum sum given integer array arr integer modify array repeating times example arr modified array return maximum subarray sum modified array note length subarray sum case answer very large return answer modulo example input arr output example input arr output example input arr output constraints arrlength arri

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

immediate food delivery sql schema table delivery column name type deliveryid int customerid int orderdate date customerprefdeliverydate date deliveryid primary key table table holds information about food delivery customers orders some date specify preferred delivery date same order date after customers preferred delivery date same order date order called immediate otherwise called scheduled first order customer order earliest order date customer made guaranteed customer precisely one first order write sql query find percentage immediate orders first orders customers rounded decimal places query result format following example example input delivery table deliveryid customerid orderdate customerprefdeliverydate output immediatepercentage explanation customer first order delivery scheduled customer first order delivery immediate customer first order delivery scheduled customer first order delivery immediate half customers immediate first orders

market analysis sql schema table users column name type userid int joindate date favoritebrand varchar userid primary key table table info users online shopping website where users sell buy items table orders column name type orderid int orderdate date itemid int buyerid int sellerid int orderid primary key table itemid foreign key items table buyerid sellerid foreign keys users table table items column name type itemid int itembrand varchar itemid primary key table write sql query find each user join date number orders they made buyer return result table any order query result format following example example input users table userid joindate favoritebrand lenovo samsung orders table orderid orderdate itemid buyerid sellerid items table itemid itembrand samsung lenovo output buyerid joindate ordersin

fizz buzz multithreaded four functions printfizz prints word fizz console printbuzz prints word buzz console printfizzbuzz prints word fizzbuzz console printnumber prints given integer console given instance class fizzbuzz four functions fizz buzz fizzbuzz number same instance fizzbuzz passed four different threads thread calls fizz should output word fizz thread calls buzz should output word buzz thread calls fizzbuzz should output word fizzbuzz thread calls number should only output integers modify given class output series fizz buzz where ith token indexed series fizzbuzz divisible fizz divisible not buzz divisible not not divisible implement fizzbuzz class fizzbuzzint initializes object number represents length sequence should printed void fizzprintfizz calls printfizz output fizz void buzzprintbuzz calls printbuzz output buzz void fizzbuzzprintfizzbuzz calls printfizzbuzz output fizzbuzz void numberprintnumber calls printnumber output numbers example input output fizzbuzzfizzfizzbuzzfizzfizzbuzz example input output fizzbuzz constraints

find words formed characters given array strings words string chars string good formed characters chars each character only used once return sum lengths good strings words example input words catbthattree chars atach output explanation strings formed cat hat answer example input words helloworldleetcode chars welldonehoneyr output explanation strings formed hello world answer constraints wordslength wordsilength charslength wordsi chars consist lowercase english letters

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

design skiplist design skiplist without using any builtin libraries skiplist data structure takes ologn time add erase search comparing treap redblack tree which same function performance code length skiplist comparatively short idea behind skiplists simple linked lists example skiplist containing want add skiplist works way artyom kalinin bysa via wikimedia commons see many layers skiplist each layer sorted linked list help top layers add erase search faster than proven average time complexity each operation ologn space complexity see more about skiplist httpsenwikipediaorgwikiskiplist implement skiplist class skiplist initializes object skiplist bool searchint target returns true integer target exists skiplist false otherwise void addint num inserts value num skiplist bool eraseint num removes value num skiplist returns true num does not exist skiplist nothing return false exist multiple num values removing any one them fine note duplicates may exist skiplist your code needs handle situation example input skiplist add add add search add search erase erase search output null null null null false null true false true false explanation skiplist skiplist new skiplist skiplistadd skiplistadd skiplistadd skiplistsearch return false skiplistadd skiplistsearch return true skiplisterase return false not skiplist skiplisterase return true skiplistsearch return false already erased constraints num target most calls made search add erase

reverse bits reverse bits given bits unsigned integer note note some languages such java unsigned integer type case both input output given signed integer type they should not affect your implementation integers internal binary representation same whether signed unsigned java compiler represents signed integers using complement notation example above input represents signed integer output represents signed integer example input output explanation input binary string represents unsigned integer return which binary representation example input output explanation input binary string represents unsigned integer return which binary representation constraints input must binary string length follow function called many times how would optimize

circular permutation binary representation given integers start your task return any permutation such start differ only one bit their binary representation must also differ only one bit their binary representation example input start output explanation binary representation permutation adjacent element differ one bit another valid permutation example input start output explanation binary representation permutation constraints start

ugly number iii ugly number positive integer divisible given four integers return nth ugly number example input output explanation ugly numbers example input output explanation ugly numbers example input output explanation ugly numbers constraints guaranteed result range

remove subfolders filesystem given list folders folder return folders after removing subfolders those folders may return answer any order folderi located within another folderj called subfolder format path one more concatenated strings form followed one more lowercase english letters example leetcode leetcodeproblems valid paths while empty string not example input folder aabcdcdecf output acdcf explanation folders subfolder cde inside folder our filesystem example input folder aabcabd output explanation folders abc abd removed because they subfolders example input folder abcabcaabd output abcabcaabd constraints folderlength folderilength folderi contains only lowercase letters folderi always starts character each folder name unique

unique number occurrences given array integers arr return true number occurrences each value array unique false otherwise example input arr output true explanation value occurrences two values same number occurrences example input arr output false example input arr output true constraints arrlength arri

remove adjacent duplicates string given string integer duplicate removal consists choosing adjacent equal letters removing them causing left side deleted substring concatenate together repeatedly duplicate removals longer return final string after such duplicate removals made guaranteed answer unique example input abcd output abcd explanation theres nothing delete example input deeedbbcccbdaa output explanation first delete eee ccc get ddbbbdaa delete bbb get dddaa finally delete ddd get example input pbbcggttciiippooaais output constraints slength only contains lowercase english letters

sort items groups respecting dependencies items each belonging zero one groups where groupi group ith item belongs equal ith item belongs group items groups zero indexed group item belonging return sorted list items such items belong same group next each other sorted list some relations between these items where beforeitemsi list containing items should come before ith item sorted array left ith item return any solution more than one solution return empty list solution example input group beforeitems output example input group beforeitems output explanation same example except needs before sorted list constraints grouplength beforeitemslength groupi beforeitemsilength beforeitemsij beforeitemsij beforeitemsi does not contain duplicates elements

path maximum gold gold mine grid size each cell mine integer representing amount gold cell empty return maximum amount gold collect under conditions every time located cell collect gold cell your position walk one step left down cant visit same cell more than once never visit cell gold start stop collecting gold any position grid some gold example input grid output explanation path get maximum gold example input grid output explanation path get maximum gold constraints gridlength gridilength gridij most cells containing gold

queries quality percentage sql schema table queries column name type queryname varchar result varchar position int rating int primary key table may duplicate rows table contains information collected some queries database position column value rating column value query rating less than poor query define query quality average ratio between query rating position also define poor query percentage percentage queries rating less than write sql query find each queryname quality poorquerypercentage both quality poorquerypercentage should rounded decimal places return result table any order query result format following example example input queries table queryname result position rating dog golden retriever dog german shepherd dog mule cat shirazi cat siamese cat sphynx output queryname quality poorquerypercentage dog cat explanation dog queries quality dog queries poor querypercentage cat queries quality equals cat queries poor querypercentage

replace substring balanced string given string length containing only four kinds characters string said balanced each characters appears times where length string return minimum length substring replaced any other string same length balanced already balanced return example input qwer output explanation already balanced example input qqwe output explanation need replace rqwe qrwe balanced example input qqqw output explanation replace first constraints slength multiple contains only

minimum remove valid parentheses given string lowercase english characters your task remove minimum number parentheses any positions resulting parentheses string valid return any valid string formally parentheses string valid only empty string contains only lowercase characters written concatenated where valid strings written where valid string example input leetcode output leetcode explanation leetcode leetcode would also accepted example input abcd output abcd example input output explanation empty string also valid constraints slength either lowercase english letter

intersection two linked lists given heads two singly linkedlists heada headb return node which two lists intersect two linked lists intersection return null example following two linked lists begin intersect node test cases generated such cycles anywhere entire linked structure note linked lists must retain their original structure after function returns custom judge inputs judge given follows your program not given these inputs intersectval value node where intersection occurs intersected node lista first linked list listb second linked list skipa number nodes skip ahead lista starting head get intersected node skipb number nodes skip ahead listb starting head get intersected node judge create linked structure based these inputs pass two heads heada headb your program correctly return intersected node your solution accepted example input intersectval lista listb skipa skipb output intersected explanation intersected nodes value note must not two lists intersect head reads head reads nodes before intersected node nodes before intersected node note intersected nodes value not because nodes value node node different node references other words they point two different locations memory while nodes value node node point same location memory example input intersectval lista listb skipa skipb output intersected explanation intersected nodes value note must not two lists intersect head reads head reads nodes before intersected node node before intersected node example input intersectval lista listb skipa skipb output intersection explanation head reads head reads since two lists not intersect intersectval must while skipa skipb arbitrary values explanation two lists not intersect return null constraints number nodes lista number nodes listb nodeval skipa skipb intersectval lista listb not intersect intersectval listaskipa listbskipb lista listb intersect follow could write solution runs time use only memory

tiling rectangle fewest squares given rectangle size return minimum number integersided squares tile rectangle example input output explanation squares necessary cover rectangle squares square example input output example input output constraints

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

check good array given array nums positive integers your task select some subset nums multiply each element integer add these numbers array said good obtain sum array any possible subset multiplicand return true array good otherwise return false example input nums output true explanation pick numbers example input nums output true explanation pick numbers example input nums output false constraints numslength numsi

count number nice subarrays given array integers nums integer continuous subarray called nice odd numbers return number nice subarrays example input nums output explanation only subarrays odd numbers example input nums output explanation odd numbers array example input nums output constraints numslength numsi numslength

last person fit bus sql schema table queue column name type personid int personname varchar weight int turn int personid primary key column table table information about people waiting bus personid turn columns contain numbers where number rows table turn determines order which people board bus where turn denotes first person board turnn denotes last person board weight weight person kilograms queue people waiting board bus however bus weight limit kilograms may some people who cannot board write sql query find personname last person fit bus without exceeding weight limit test cases generated such first person does not exceed weight limit query result format following example example input queue table personid personname weight turn alice bob alex john cena winston marie output personname john cena explanation folowing table ordered turn simplicity turn name weight total weight alice alex john cena last person board marie cannot board bob winston

minimum swaps strings equal given two strings equal length consisting letters only your task these two strings equal each other swap any two characters belong different strings which means swap return minimum number swaps required equal return impossible example input output explanation swap example input output explanation swap swap note cannot swap equal cause only swap chars different strings example input output constraints slength slength slength slength only contain

airplane seat assignment probability passengers board airplane exactly seats first passenger lost ticket picks seat randomly but after rest passengers take their own seat available pick other seats randomly when they find their seat occupied return probability nth person gets his own seat example input output explanation first person only get first seat example input output explanation second person probability get second seat when first person gets first seat constraints

longest arithmetic subsequence given difference given integer array arr integer difference return length longest subsequence arr which arithmetic sequence such difference between adjacent elements subsequence equals difference subsequence sequence derived arr deleting some elements without changing order remaining elements example input arr difference output explanation longest arithmetic subsequence example input arr difference output explanation longest arithmetic subsequence any single element example input arr difference output explanation longest arithmetic subsequence constraints arrlength arri difference

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

minimum moves reach target rotations grid snake spans cells starts moving top left corner grid empty cells represented zeros blocked cells represented ones snake wants reach lower corner one move snake move one cell blocked cells move keeps horizontalvertical position snake move down one cell blocked cells move keeps horizontalvertical position snake rotate clockwise horizontal position two cells under both empty case snake moves rotate counterclockwise vertical position two cells both empty case snake moves return minimum number moves reach target way reach target return example input grid output explanation one possible solution rotate clockwise down down down down rotate counterclockwise down example input grid output constraints gridij guaranteed snake starts empty cells

employees earning more than their managers sql schema table employee column name type int name varchar salary int managerid int primary key column table each row table indicates employee their name salary their manager write sql query find employees who earn more than their managers return result table any order query result format following example example input employee table name salary managerid joe henry sam null max null output employee joe explanation joe only employee who earns more than his manager

maximum equal frequency given array nums positive integers return longest possible length array prefix nums such possible remove exactly one element prefix every number appeared same number occurrences after removing one element remaining elements considered every appeared number same number ocurrences example input nums output explanation subarray length remove nums get each number appear exactly twice example input nums output constraints numslength numsi

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

maximum length concatenated string unique characters given array strings arr string formed concatenation subsequence arr unique characters return maximum possible length subsequence array derived another array deleting some elements without changing order remaining elements example input arr unique output explanation valid concatenations uniq ique maximum length example input arr characters output explanation possible longest valid concatenations chaers cha ers acters act ers example input arr abcdefghijklmnopqrstuvwxyz output explanation only string arr characters constraints arrlength arrilength arri contains only lowercase english letters

minimum cost move chips same position chips where position ith chip positioni need move chips same position one step change position ith chip positioni positioni positioni cost positioni positioni cost return minimum cost needed move chips same position example input position output explanation first step move chip position position cost second step move chip position position cost total cost example input position output explanation move two chips position position each move cost total cost example input position output constraints positionlength positioni

get equal substrings within budget given two strings same length integer maxcost want change changing ith character ith character costs absolute difference between ascii values characters return maximum length substring changed same corresponding substring cost less than equal maxcost substring changed corresponding substring return example input abcd bcdf maxcost output explanation abc change bcd costs maximum length example input abcd cdef maxcost output explanation each character costs change character maximum length example input abcd acde maxcost output explanation cannot any change maximum length constraints slength tlength slength maxcost consist only lowercase english letters

smallest string swaps given string array pairs indices string pairs where pairsi indicates indicesindexed string swap characters any pair indices given pairs any number times return lexicographically smallest string changed after using swaps example input dcab pairs output bacd explaination swap bcad swap bacd example input dcab pairs output abcd explaination swap bcad swap acbd swap abcd example input cba pairs output abc explaination swap bca swap bac swap abc constraints slength pairslength pairsi pairsi slength only contains lower case english letters

split string balanced strings balanced strings those equal quantity characters given balanced string split some number substrings such each substring balanced return maximum number balanced strings obtain example input rlrrllrlrl output explanation split rrll each substring contains same number example input rlrrrllrll output explanation split rrrllrll each substring contains same number note cannot split because substrings not balanced example input llllrrrr output explanation split llllrrrr constraints slength either balanced string

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

queens attack king indexed chessboard multiple black queens one white king given integer array queens where queensi xqueeni yqueeni represents position ith black queen chessboard also given integer array king length where king xking yking represents position white king return coordinates black queens directly attack king may return answer any order example input queens king output explanation diagram above shows three queens directly attack king three queens cannot attack king marked red dashes example input queens king output explanation diagram above shows three queens directly attack king three queens cannot attack king marked red dashes constraints queenslength queensilength kinglength xqueeni yqueeni xking yking given positions unique

remove nth node end list given head linked list remove nth node end list return head example input head output example input head output example input head output constraints number nodes list nodeval follow could one pass

binary search tree iterator implement bstiterator class represents iterator over inorder traversal binary search tree bst bstiteratortreenode root initializes object bstiterator class root bst given part constructor pointer should initialized nonexistent number smaller than any element bst boolean hasnext returns true exists number traversal pointer otherwise returns false int next moves pointer returns number pointer notice initializing pointer nonexistent smallest number first call next return smallest element bst may assume next calls always valid least next number inorder traversal when next called example input bstiterator next next hasnext next hasnext next hasnext next hasnext null null output null true true true false explanation bstiterator bstiterator new bstiterator null null bstiteratornext return bstiteratornext return bstiteratorhasnext return true bstiteratornext return bstiteratorhasnext return true bstiteratornext return bstiteratorhasnext return true bstiteratornext return bstiteratorhasnext return false constraints number nodes tree range nodeval most calls made hasnext next follow could implement next hasnext run average time use memory where height tree

maximum profit job scheduling jobs where every job scheduled done starttimei endtimei obtaining profit profiti youre given starttime endtime profit arrays return maximum profit take such two jobs subset overlapping time range choose job ends time able start another job starts time example input starttime endtime profit output explanation subset chosen first fourth job time range get profit example input starttime endtime profit output explanation subset chosen first fourth fifth job profit obtained example input starttime endtime profit output constraints starttimelength endtimelength profitlength starttimei endtimei profiti

dining philosophers five silent philosophers sit round table bowls spaghetti forks placed between each pair adjacent philosophers each philosopher must alternately think eat however philosopher only eat spaghetti when they both left forks each fork held only one philosopher philosopher use fork only not being used another philosopher after individual philosopher finishes eating they need put down both forks forks become available others philosopher take fork their one their left they become available but cannot start eating before getting both forks eating not limited remaining amounts spaghetti stomach space infinite supply infinite demand assumed design discipline behaviour concurrent algorithm such philosopher starve each forever continue alternate between eating thinking assuming philosopher know when others may want eat think problem statement image above taken wikipediaorg philosophers ids numbered clockwise order implement function void wantstoeatphilosopher pickleftfork pickrightfork eat putleftfork putrightfork where philosopher philosopher who wants eat pickleftfork pickrightfork functions call pick corresponding forks philosopher eat function call let philosopher eat once picked both forks putleftfork putrightfork functions call put down corresponding forks philosopher philosophers assumed thinking long they not asking eat function not being called their number five threads each representing philosopher simultaneously use one object your class simulate process function may called same philosopher more than once even before last call ends example input output explanation number times each philosopher call function output array describes calls made functions controlling forks eat function format outputi three integers philosopher specifies fork left specifies operation pick put eat constraints

dice roll simulation die simulator generates random number each roll introduced constraint generator such cannot roll number more than rollmaxi indexed consecutive times given array integers rollmax integer return number distinct sequences obtained exact rolls since answer may too large return modulo two sequences considered different least one element differs each other example input rollmax output explanation rolls die constraints die possible combinations case looking rollmax array numbers appear most once consecutively sequences cannot occur final answer example input rollmax output example input rollmax output constraints rollmaxlength rollmaxi

count vowels permutation given integer your task count how many strings length formed under following rules each character lower case vowel each vowel may only followed each vowel may only followed each vowel may not followed another each vowel may only followed each vowel may only followed since answer may too large return modulo example input output explanation possible strings example input output explanation possible strings example input output constraints

find positive integer solution given equation given callable function hidden formula value reverse engineer formula return positive integer pairs where fxy may return pairs any order while exact formula hidden function monotonically increasing function interface defined interface customfunction public returns some positive integer two positive integers based formula int fint int judge your solution follows judge list hidden implementations customfunction along way generate answer key valid pairs specific judge receive two inputs functionid determine which implementation test your code target judge call your findsolution compare your results answer key your results match answer key your solution accepted example input functionid output explanation hidden formula functionid following positive integer values equal example input functionid output explanation hidden formula functionid following positive integer values equal constraints functionid guaranteed solutions range also guaranteed fit bit signed integer

cells odd values matrix matrix initialized also array indices where each indicesi represents indexed location perform some increment operations matrix each location indicesi both following increment cells row increment cells column given indices return number oddvalued cells matrix after applying increment locations indices example input indices output explanation initial matrix after applying first increment becomes final matrix which contains odd numbers example input indices output explanation final matrix odd numbers final matrix constraints indiceslength follow could solve indiceslength time only extra space

shift grid given grid size integer need shift grid times one shift operation element gridij moves gridij element gridin moves gridi element gridm moves grid return grid after applying shift operation times example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

remove covered intervals given array intervals where intervalsi represent interval remove intervals covered another interval list interval covered interval only return number remaining intervals example input intervals output explanation interval covered removed example input intervals output constraints intervalslength intervalsilength given intervals unique

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

minimum time visiting points plane points integer coordinates pointsi return minimum time seconds visit points order given points move according these rules second either move vertically one unit move horizontally one unit move diagonally sqrt units other words move one unit vertically one unit horizontally second visit points same order they appear array allowed pass points appear later order but these not count visits example input points output explanation one optimal path time seconds time seconds total time seconds example input points output constraints pointslength pointsilength pointsi pointsi

excel sheet column number given string columntitle represents column title appears excel sheet return corresponding column number example example input columntitle output example input columntitle output example input columntitle output constraints columntitlelength columntitle consists only uppercase english letters columntitle range fxshrxw

maximum candies get boxes boxes labeled given four arrays status candies keys containedboxes where statusi ith box open ith box closed candiesi number candies ith box keysi list labels boxes open after opening ith box containedboxesi list boxes found inside ith box given integer array initialboxes contains labels boxes initially take candies any open box use keys open new boxes also use boxes find return maximum number candies get following rules above example input status candies keys containedboxes initialboxes output explanation initially given box find candies boxes box closed not key open box find candies key box box box find candies box but not find key box box remain closed total number candies collected candy example input status candies keys containedboxes initialboxes output explanation initially box opening find boxes their keys total number candies constraints statuslength candieslength keyslength containedboxeslength statusi either candiesi keysilength keysij values keysi unique containedboxesilength containedboxesij values containedboxesi unique each box contained one box most initialboxeslength initialboxesi

replace elements greatest element side given array arr replace every element array greatest element elements replace last element after doing return array example input arr output explanation index greatest element index index index greatest element index index index greatest element index index index greatest element index index index greatest element index index index elements index put example input arr output explanation elements index constraints arrlength arri

number burgers waste ingredients given two integers tomatoslices cheeseslices ingredients different burgers follows jumbo burger tomato slices cheese slice small burger tomato slices cheese slice return totaljumbo totalsmall number remaining tomatoslices equal number remaining cheeseslices equal not possible remaining tomatoslices cheeseslices equal return example input tomatoslices cheeseslices output explantion one jumbo burger small burgers need tomato cheese remaining ingredients example input tomatoslices cheeseslices output explantion way use ingredients small jumbo burgers example input tomatoslices cheeseslices output explantion making jumbo burger cheese remaining making small burgers cheese remaining constraints tomatoslices cheeseslices

sum mutated array closest target given integer array arr target value target return integer value such when change integers larger than value given array equal value sum array gets close possible absolute difference target case tie return minimum such integer notice answer not neccesarilly number arr example input arr target output explanation when using arr converts which sums optimal answer example input arr target output example input arr target output constraints arrlength arri target

shortest path grid obstacles elimination given integer matrix grid where each cell either empty obstacle move down left empty cell one step return minimum number steps walk upper left corner lower corner given eliminate most obstacles not possible find such walk return example input grid output explanation shortest path without eliminating any obstacle shortest path one obstacle elimination position such path example input grid output explanation need eliminate least two obstacles find such walk constraints gridlength gridilength gridij either grid gridm

average selling price sql schema table prices column name type productid int startdate date enddate date price int productid startdate enddate primary key table each row table indicates price productid period startdate enddate each productid two overlapping periods means two intersecting periods same productid table unitssold column name type productid int purchasedate date units int primary key table may contain duplicates each row table indicates date units productid each product sold write sql query find average selling price each product averageprice should rounded decimal places return result table any order query result format following example example input prices table productid startdate enddate price unitssold table productid purchasedate units output productid averageprice explanation average selling price total price product number products sold average selling price product average selling price product

reconstruct row binary matrix given following details matrix columns rows matrix binary matrix which means each element matrix sum elements thupper row given upper sum elements stlower row given lower sum elements ith columnindexed colsumi where colsum given integer array length your task reconstruct matrix upper lower colsum return integer array more than one valid solution any them accepted valid solution exists return empty array example input upper lower colsum output explanation also correct answers example input upper lower colsum output example input upper lower colsum output constraints colsumlength upper lower colsumlength colsumi

maximum number occurrences substring given string return maximum number occurrences any substring under following rules number unique characters substring must less than equal maxletters substring size must between minsize maxsize inclusive example input aababcaab maxletters minsize maxsize output explanation substring aab occurrences original string satisfies conditions unique letters size between minsize maxsize example input aaaa maxletters minsize maxsize output explanation substring aaa occur times string overlap constraints slength maxletters minsize maxsize min slength consists only lowercase english letters

maximum score words formed letters given list words list single letters might repeating score every character return maximum score any valid set words formed using given letters wordsi cannot used two more times not necessary use characters letters each letter only used once score letters given score score score respectively example input words dogcatdadgood letters aacdddgoo score output explanation score given letters form words dad good score words dad dog only get score example input words xxxzaxbxcx letters zabcxxx score output explanation score given letters form words score word xxxz only get score example input words leetcode letters letcod score output explanation letter only used once constraints wordslength wordsilength letterslength lettersilength scorelength scorei wordsi lettersi contains only lower case english letters

number ways stay same place after some steps pointer index array size arrlen each step move position left position array stay same place pointer should not placed outside array any time given two integers steps arrlen return number ways such your pointer index after exactly steps steps since answer may too large return modulo example input steps arrlen output explanation differents ways stay index after steps left stay stay left stay left stay stay stay example input steps arrlen output explanation differents ways stay index after steps left stay stay example input steps arrlen output constraints steps arrlen

department top three salaries sql schema table employee column name type int name varchar salary int departmentid int primary key column table departmentid foreign key department table each row table indicates name salary employee also contains their department table department column name type int name varchar primary key column table each row table indicates department name companys executives interested seeing who earns most money each companys departments high earner department employee who salary top three unique salaries department write sql query find employees who high earners each departments return result table any order query result format following example example input employee table name salary departmentid joe henry sam max janet randy department table name sales output department employee salary max joe randy sales henry sales sam explanation department max earns highest unique salary both randy joe earn secondhighest unique salary earns thirdhighest unique salary sales department henry earns highest salary sam earns secondhighest salary thirdhighest salary only two employees

element appearing more than sorted array given integer array sorted nondecreasing order exactly one integer array occurs more than time return integer example input arr output example input arr output constraints arrlength arri

find smallest divisor given threshold given array integers nums integer threshold choose positive integer divisor divide array sum divisions result find smallest divisor such result mentioned above less than equal threshold each result division rounded nearest integer greater than equal element example test cases generated answer example input nums threshold output explanation get sum divisor divisor get sum divisor sum example input nums threshold output constraints numslength numsi numslength threshold

palindrome partitioning iii given string containing lowercase letters integer need first change some characters other lowercase english letters divide nonempty disjoint substrings such each substring palindrome return minimal number characters need change divide string example input abc output explanation split string change character palindrome example input aabbc output explanation split string them palindrome example input leetcode output constraints slength only contains lowercase english letters

count square submatrices ones given matrix ones zeros return how many square submatrices ones example input matrix output explanation squares side squares side square side total number squares example input matrix output explanation squares side square side total number squares constraints arrlength arrlength arrij

minimum number flips convert binary matrix zero matrix given binary matrix mat one step choose one cell flip four neighbors they exist flip changing pair cells called neighbors they share one edge return minimum number steps required convert mat zero matrix cannot binary matrix matrix cells equal only zero matrix matrix cells equal example input mat output explanation one possible solution flip finally shown example input mat output explanation given matrix zero matrix not need change example input mat output explanation given matrix cannot zero matrix constraints matlength matilength matij either

divide array sets consecutive numbers given array integers nums positive integer check whether possible divide array sets consecutive numbers return true possible otherwise return false example input nums output true explanation array divided example input nums output true explanation array divided example input nums output false explanation each array should divided subarrays size constraints numslength numsi note question same httpsleetcodecomproblemshandofstraights

maximum side length square sum less than equal threshold given matrix mat integer threshold return maximum sidelength square sum less than equal threshold return such square example input mat threshold output explanation maximum side length square sum less than shown example input mat threshold output constraints matlength matilength matij threshold

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

find winner tic tac toe game tictactoe played two players grid rules tictactoe players take turns placing characters empty squares first player always places characters while second player always places characters characters always placed empty squares never filled ones game ends when three same nonempty character filling any row column diagonal game also ends squares nonempty more moves played game over given integer array moves where movesi rowi coli indicates ith move played gridrowicoli return winner game exists case game ends draw return draw movements play return pending assume moves valid follows rules tictactoe grid initially empty play first example input moves output explanation wins they always play first example input moves output explanation wins example input moves output draw explanation game ends draw since moves constraints moveslength movesilength rowi coli repeated elements moves moves follow rules tic tac toe

group people given group size they belong people split some unknown number groups each person labeled unique given integer array groupsizes where groupsizesi size group person example groupsizes person must group size return list groups such each person group size groupsizesi each person should appear exactly one group every person must group multiple answers return any them guaranteed least one valid solution given input example input groupsizes output explanation first group size groupsizes second group size groupsizes groupsizes groupsizes third group size groupsizes groupsizes groupsizes other possible solutions example input groupsizes output constraints groupsizeslength groupsizesi

find minimum rotated sorted array suppose array length sorted ascending order rotated between times example array nums might become rotated times rotated times notice rotating array time results array given sorted rotated array nums may contain duplicates return minimum element array must decrease overall operation steps much possible example input nums output example input nums output constraints numslength numsi nums sorted rotated between times follow problem similar find minimum rotated sorted array but nums may contain duplicates would affect runtime complexity how why

search suggestions system given array strings products string searchword design system suggests most three product names products after each character searchword typed suggested products should common prefix searchword more than three products common prefix return three lexicographically minimums products return list lists suggested products after each character searchword typed example input products mobilemousemoneypotmonitormousepad searchword mouse output mobilemoneypotmonitormobilemoneypotmonitormousemousepadmousemousepadmousemousepad explanation products sorted lexicographically mobilemoneypotmonitormousemousepad after typing products match show user mobilemoneypotmonitor after typing mou mous mouse system suggests mousemousepad example input products havana searchword havana output havanahavanahavanahavanahavanahavana explanation only word havana always suggested while typing search word constraints productslength productsilength sumproductsilength strings products unique productsi consists lowercase english letters searchwordlength searchword consists lowercase english letters

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

sequential digits integer sequential digits only each digit number one more than previous digit return sorted list integers range low high inclusive sequential digits example input low high output example input low high output constraints low high

count servers communicate given map server center represented integer matrix grid where means cell server means server two servers said communicate they same row same column return number servers communicate any other server example input grid output explanation servers communicate others example input grid output explanation three servers communicate least one other server example input grid output explanation two servers first row communicate each other two servers third column communicate each other server bottom corner cant communicate any other server constraints gridlength gridilength gridij

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

number closed islands given grid consists land water island maximal directionally connected group closed island island totally left top bottom surrounded return number closed islands example input grid output explanation islands gray closed because they completely surrounded water group example input grid output example input grid output constraints gridlength gridlength gridij

greatest sum divisible three given integer array nums return maximum possible sum elements array such divisible three example input nums output explanation pick numbers their sum maximum sum divisible example input nums output explanation since not divisible not pick any number example input nums output explanation pick numbers their sum maximum sum divisible constraints numslength numsi

minimum moves move box their target location storekeeper game which player pushes boxes around warehouse trying get them target locations game represented grid characters grid where each element wall floor box your task move box target position under following rules character represents player player move down left grid floor empty cell character represents floor which means free cell walk character represents wall which means obstacle impossible walk only one box one target cell grid box moved adjacent free cell standing next box moving direction box push player cannot walk box return minimum number pushes move box target way reach target return example input grid output explanation return only number times box pushed example input grid output example input grid output explanation push box down left left constraints gridlength gridilength grid contains only characters only one character grid

students examinations sql schema table students column name type studentid int studentname varchar studentid primary key table each row table contains name one student school table subjects column name type subjectname varchar subjectname primary key table each row table contains name one subject school table examinations column name type studentid int subjectname varchar primary key table may contain duplicates each student students table takes every course subjects table each row table indicates student studentid attended exam subjectname write sql query find number times each student attended each exam return result table ordered studentid subjectname query result format following example example input students table studentid studentname alice bob john alex subjects table subjectname math physics programming examinations table studentid subjectname math physics programming programming physics math math programming physics math math output studentid studentname subjectname attendedexams alice math alice physics alice programming bob math bob physics bob programming alex math alex physics alex programming john math john physics john programming explanation result table should contain students subjects alice attended math exam times physics exam times programming exam time bob attended math exam time programming exam time did not attend physics exam alex did not attend any exams john attended math exam time physics exam time programming exam time

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

two sum input array sorted given indexed array integers numbers already sorted nondecreasing order find two numbers such they add specific target number let these two numbers numbersindex numbersindex where index index numberslength return indices two numbers index index added one integer array index index length tests generated such exactly one solution may not use same element twice your solution must use only constant extra space example input numbers target output explanation sum index index return example input numbers target output explanation sum index index return example input numbers target output explanation sum index index return constraints numberslength numbersi numbers sorted nondecreasing order target tests generated such exactly one solution

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

find numbers even number digits given array nums integers return how many them contain even number digits example input nums output explanation contains digits even number digits contains digits odd number digits contains digit odd number digits contains digit odd number digits contains digits even number digits only contain even number digits example input nums output explanation only contains even number digits constraints numslength numsi

find elements contaminated binary tree given binary tree following rules rootval treenodeval treenodeleft null treenodeleftval treenodeval treenoderight null treenoderightval binary tree contaminated which means treenodeval changed implement findelements class findelementstreenode root initializes object contaminated binary tree recovers bool findint target returns true target value exists recovered binary tree example input findelementsfindfind null output nullfalsetrue explanation findelements findelements new findelementsnull findelementsfind return false findelementsfind return true example input findelementsfindfindfind output nulltruetruefalse explanation findelements findelements new findelements findelementsfind return true findelementsfind return true findelementsfind return false example input findelementsfindfindfindfind nullnull output nulltruefalsefalsetrue explanation findelements findelements new findelementsnullnull findelementsfind return true findelementsfind return false findelementsfind return false findelementsfind return true constraints treenodeval height binary tree less than equal total number nodes between total calls find between target

iterator combination design combinationiterator class combinationiteratorstring characters int combinationlength initializes object string characters sorted distinct lowercase english letters number combinationlength arguments next returns next combination length combinationlength lexicographical order hasnext returns true only exists next combination example input combinationiterator next hasnext next hasnext next hasnext abc output null true true false explanation combinationiterator itr new combinationiteratorabc itrnext return itrhasnext return true itrnext return itrhasnext return true itrnext return itrhasnext return false constraints combinationlength characterslength characters characters unique most calls made next hasnext guaranteed calls function next valid

subtract product sum digits integer given integer number return difference between product digits sum digits example input output explanation product digits sum digits result example input output explanation product digits sum digits result constraints

convert binary number linked list integer given head which reference node singlylinked list value each node linked list either linked list holds binary representation number return decimal value number linked list most significant bit head linked list example input head output explanation base base example input head output constraints linked list not empty number nodes not exceed each nodes value either

minimum falling path sum given integer matrix grid return minimum sum falling path nonzero shifts falling path nonzero shifts choice exactly one element each row grid such two elements chosen adjacent rows same column example input grid output explanation possible falling paths falling path smallest sum answer example input grid output constraints gridlength gridilength gridij

get watched videos your friends people each person unique between given arrays watchedvideos friends where watchedvideosi friendsi contain list watched videos list friends respectively person level videos watched videos your friends level videos watched videos friends your friends general level videos watched videos people shortest path exactly equal given your level videos return list videos ordered their frequencies increasing videos same frequency order them alphabetically least greatest example input watchedvideos abcbcd friends level output explanation green color figure your friends yellow color figure person watchedvideos person watchedvideos frequencies watchedvideos your friends example input watchedvideos abcbcd friends level output explanation green color figure only friend your friends person yellow color figure constraints watchedvideoslength friendslength watchedvideosilength watchedvideosijlength friendsilength friendsij level friendsi contains friendsj contains

elements two binary search trees given two binary search trees root root return list containing integers both trees sorted ascending order example input root root output example input root null root output constraints number nodes each tree range nodeval

deepest leaves sum given root binary tree return sum values deepest leaves example input root nullnullnullnullnull output example input root nullnullnullnull output constraints number nodes tree range nodeval

number bits write function takes binary representation unsigned integer returns number bits also known hamming weight note note some languages such java unsigned integer type case input given signed integer type should not affect your implementation integers internal binary representation same whether signed unsigned java compiler represents signed integers using complement notation example input represents signed integer example input output explanation input binary string total three bits example input output explanation input binary string total one bit example input output explanation input binary string total thirty one bits constraints input must binary string length follow function called many times how would optimize

verbal arithmetic puzzle given equation represented words left side result side need check equation solvable under following rules each character decoded one digit two characters map same digit each wordsi result decoded one number without leading zeros sum numbers left side words equal number side result return true equation solvable otherwise return false example input words sendmore result money output true explanation map such send more money example input words sixsevenseven result twenty output true explanation map such six seven seven twenty example input words leetcode result point output false explanation possible mapping satisfy equation return false note two different characters cannot map same digit constraints wordslength wordsilength resultlength wordsi result contain only uppercase english letters number different characters used expression most

matrix block sum given matrix mat integer return matrix answer where each answerij sum elements matrc valid position matrix example input mat output example input mat output constraints matlength matilength matij

list products ordered period sql schema table products column name type productid int productname varchar productcategory varchar productid primary key table table contains data about companys products table orders column name type productid int orderdate date unit int primary key table may duplicate rows productid foreign key products table unit number products ordered orderdate write sql query get names products least units ordered february their amount return result table any order query result format following example example input products table productid productname productcategory leetcode solutions book jewels stringology book laptop lenovo laptop leetcode kit tshirt orders table productid orderdate unit output productname unit leetcode solutions leetcode kit explanation products productid ordered february total products productid ordered february total products productid ordered february total products productid not ordered february products productid ordered february total

shortest path binary matrix given binary matrix grid return length shortest clear path matrix clear path return clear path binary matrix path topleft cell bottomright cell such visited cells path adjacent cells path directionally connected they different they share edge corner length clear path number visited cells path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij

jump game given array integers arr initially positioned first index array one step jump index index where arrlength where where arri arrj return minimum number steps reach last index array notice not jump outside array any time example input arr output explanation need three jumps index note index last index array example input arr output explanation start index last index not need jump example input arr output explanation jump directly index index which last index array constraints arrlength arri

delete leaves given value given binary tree root integer target delete leaf nodes value target note once delete leaf node value target parent node becomes leaf node value target should also deleted need continue doing cannot example input root null target output nullnull explanation leaf nodes green value target removed picture left after removing new nodes become leaf nodes value target picture center example input root target output nullnull example input root nullnull target output explanation leaf nodes green value target removed each step constraints number nodes tree range nodeval target

minimum difficulty job schedule want schedule list jobs days jobs dependent work ith job finish jobs where finish least one task every day difficulty job schedule sum difficulties each day days difficulty day maximum difficulty job done day given integer array jobdifficulty integer difficulty ith job jobdifficultyi return minimum difficulty job schedule cannot find schedule jobs return example input jobdifficulty output explanation first day finish first jobs total difficulty second day finish last job total difficulty difficulty schedule example input jobdifficulty output explanation finish job per day free day cannot find schedule given jobs example input jobdifficulty output explanation schedule one job per day total difficulty constraints jobdifficultylength jobdifficultyi

decrypt string alphabet integer mapping given string formed digits want map english lowercase characters follows characters represented respectively characters represented respectively return string formed after mapping test cases generated unique mapping always exist example input output jkab explanation example input output acz constraints slength consists digits letter valid string such mapping always possible

maximum product splitted binary tree given root binary tree split binary tree two subtrees removing one edge such product sums subtrees maximized return maximum product sums two subtrees since answer may too large return modulo note need maximize answer before taking mod not after taking example input root output explanation remove red edge get binary trees sum their product example input root nullnullnull output explanation remove red edge get binary trees sum their product constraints number nodes tree range nodeval

filter restaurants veganfriendly price distance given array restaurants where restaurantsi idi ratingi veganfriendlyi pricei distancei filter restaurants using three filters veganfriendly filter either true meaning should only include restaurants veganfriendlyi set true false meaning include any restaurant addition filters maxprice maxdistance which maximum value price distance restaurants should consider respectively return array restaurant ids after filtering ordered rating highest lowest restaurants same rating order them highest lowest simplicity veganfriendlyi veganfriendly take value when true when false example input restaurants veganfriendly maxprice maxdistance output explanation restaurants restaurant rating veganfriendly price distance restaurant rating veganfriendly price distance restaurant rating veganfriendly price distance restaurant rating veganfriendly price distance restaurant rating veganfriendly price distance after filter restaurants veganfriendly maxprice maxdistance restaurant restaurant restaurant ordered rating highest lowest example input restaurants veganfriendly maxprice maxdistance output explanation restaurants same example but case filter veganfriendly restaurants considered example input restaurants veganfriendly maxprice maxdistance output constraints restaurantslength restaurantsilength idi ratingi pricei distancei maxprice maxdistance veganfriendlyi veganfriendly idi distinct

department highest salary sql schema table employee column name type int name varchar salary int departmentid int primary key column table departmentid foreign key department table each row table indicates name salary employee also contains their department table department column name type int name varchar primary key column table guaranteed department name not null each row table indicates department name write sql query find employees who highest salary each departments return result table any order query result format following example example input employee table name salary departmentid joe jim henry sam max department table name sales output department employee salary jim sales henry max explanation max jim both highest salary department henry highest salary sales department

reverse subarray maximize array value given integer array nums value array defined sum numsi numsi numslength allowed select any subarray given array reverse perform operation only once find maximum possible value final array example input nums output explanation reversing subarray array becomes whose value example input nums output constraints numslength numsi

decompress runlength encoded list given list nums integers representing list compressed runlength encoding consider each adjacent pair elements freq val numsi numsi each such pair freq elements value val concatenated sublist concatenate sublists left generate decompressed list return decompressed list example input nums output explanation first pair means freq val generate array second pair means freq val generate end concatenation example input nums output constraints numslength numslength numsi

movie rating sql schema table movies column name type movieid int title varchar movieid primary key table title name movie table users column name type userid int name varchar userid primary key table table movierating column name type movieid int userid int rating int createdat date movieid userid primary key table table contains rating movie user their review createdat users review date write sql query find name user who rated greatest number movies case tie return lexicographically smaller user name find movie name highest average rating february case tie return lexicographically smaller movie name query result format following example example input movies table movieid title avengers frozen joker users table userid name daniel monica maria james movierating table movieid userid rating createdat output results daniel frozen explanation daniel monica rated movies avengers frozen joker but daniel smaller lexicographically frozen joker rating average february but frozen smaller lexicographically

number paths max score given square board characters move board starting bottom square marked character need reach top left square marked character rest squares labeled either numeric character obstacle one move left upleft diagonally only obstacle return list two integers first integer maximum sum numeric characters collect second number such paths take get maximum sum taken modulo case path return example input board exs output example input board exs output example input board exxxs output constraints boardlength boardilength

check double exist given array arr integers check exist two indices such arrlength arri arrj example input arr output true explanation arri arrj example input arr output false explanation satisfy conditions constraints arrlength arri

find unique integers sum zero given integer return any array containing unique integers such they add example input output explanation these arrays also accepted example input output example input output constraints

maximum number given positive integer num consisting only digits return maximum number get changing most one digit becomes becomes example input num output explanation changing first digit results changing second digit results changing third digit results changing fourth digit results maximum number example input num output explanation changing last digit results maximum number example input num output explanation better not apply any change constraints num num consists only digits

minimum insertion steps string palindrome given string one step insert any character any index string return minimum number steps palindrome palindrome string one reads same backward forward example input zzazz output explanation string zzazz already palindrome not need any insertions example input mbadm output explanation string mbdadbm mdbabdm example input leetcode output explanation inserting characters string becomes leetcodocteel constraints slength consists lowercase english letters

minimum flips equal given positives numbers return minimum flips required some bits bitwise operation flip operation consists change any single bit change bit their binary representation example input output explanation after flips such example input output example input output constraints

jump game given array integers arr integer one step jump index index where arrlength where addition only jump index index arri arrj arri arrk indices between more formally mini maxi choose any index array start jumping return maximum number indices visit notice not jump outside array any time example input arr output explanation start index jump shown note start index only jump index cannot jump index because cannot jump index because index between index similarly cannot jump index index index example input arr output explanation start any index always cannot jump any index example input arr output explanation start index visit indicies constraints arrlength arri arrlength

transpose file given text file filetxt transpose content may assume each row same number columns each field separated character example filetxt following content name age alice ryan output following name alice ryan age

find city smallest number neighbors threshold distance cities numbered given array edges where edgesi fromi toi weighti represents bidirectional weighted edge between cities fromi toi given integer distancethreshold return city smallest number cities reachable some path whose distance most distancethreshold multiple such cities return city greatest number notice distance path connecting cities equal sum edges weights along path example input edges distancethreshold output explanation figure above describes graph neighboring cities distancethreshold each city city city city city city city city city city city city city city city cities neighboring cities distancethreshold but return city since greatest number example input edges distancethreshold output explanation figure above describes graph neighboring cities distancethreshold each city city city city city city city city city city city city city city city city city neighboring city distancethreshold constraints edgeslength edgesilength fromi toi weighti distancethreshold pairs fromi toi distinct

minimum distance type word using two fingers keyboard layout shown above plane where each english uppercase letter located some coordinate example letter located coordinate letter located coordinate letter located coordinate letter located coordinate given string word return minimum total distance type such string using only two fingers distance between coordinates note initial positions your two fingers considered free not count your total distance also your two fingers not start first letter first two letters example input word cake output explanation using two fingers one optimal way type cake finger letter cost finger letter cost distance letter letter finger letter cost finger letter cost distance letter letter total distance example input word happy output explanation using two fingers one optimal way type happy finger letter cost finger letter cost distance letter letter finger letter cost finger letter cost distance letter letter finger letter cost distance letter letter total distance constraints wordlength word consists uppercase english letters

sum nodes evenvalued grandparent given root binary tree return sum values nodes evenvalued grandparent nodes evenvalued grandparent return grandparent node parent parent exists example input root nullnullnullnull output explanation red nodes nodes evenvalue grandparent while blue nodes evenvalue grandparents example input root output constraints number nodes tree range nodeval

xor queries subarray given array arr positive integers also given array queries where queriesi lefti righti each query compute xor elements lefti righti arrlefti xor arrlefti xor xor arrrighti return array answer where answeri answer ith query example input arr queries output explanation binary representation elements array xor values queries xor xor xor xor xor example input arr queries output constraints arrlength querieslength arri queriesilength lefti righti arrlength

distinct echo substrings return number distinct nonempty substrings text written concatenation some string itself written where some string example input text abcabcabc output explanation substrings abcabc bcabca cabcab example input text leetcodeleetcode output explanation substrings leetcodeleetcode constraints textlength text only lowercase english letters

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

minimum number steps two strings anagram given two strings same length one step choose any character replace another character return minimum number steps anagram anagram string string contains same characters different same ordering example input bab aba output explanation replace first bba which anagram example input leetcode practice output explanation replace proper characters anagram example input anagram mangaar output explanation anagram mangaar anagrams constraints slength slength tlength consist lowercase english letters only

tweet counts per frequency social media company trying monitor activity their site analyzing number tweets occur select periods time these periods partitioned smaller time chunks based certain frequency every minute hour day example period seconds would partitioned following time chunks these frequencies every minute second chunks every hour second chunks every day second chunks notice last chunk may shorter than specified frequencys chunk size always end end time period above example design implement api help company their analysis implement tweetcounts class tweetcounts initializes tweetcounts object void recordtweetstring tweetname int time stores tweetname recorded time seconds listinteger gettweetcountsperfrequencystring freq string tweetname int starttime int endtime returns list integers representing number tweets tweetname each time chunk given period time starttime endtime seconds frequency freq freq one minute hour day representing frequency every minute hour day respectively example input tweetcountsrecordtweetrecordtweetrecordtweetgettweetcountsperfrequencygettweetcountsperfrequencyrecordtweetgettweetcountsperfrequency tweettweettweetminutetweetminutetweettweethourtweet output nullnullnullnullnull explanation tweetcounts tweetcounts new tweetcounts tweetcountsrecordtweettweet new tweet tweet time tweetcountsrecordtweettweet new tweet tweet time tweetcountsrecordtweettweet new tweet tweet time tweetcountsgettweetcountsperfrequencyminute tweet return chunk tweets tweetcountsgettweetcountsperfrequencyminute tweet return chunk tweets chunk tweet tweetcountsrecordtweettweet new tweet tweet time tweetcountsgettweetcountsperfrequencyhour tweet return chunk tweets constraints time starttime endtime endtime starttime most calls total recordtweet gettweetcountsperfrequency

restaurant growth sql schema table customer column name type customerid int name varchar visitedon date amount int customerid visitedon primary key table table contains data about customer transactions restaurant visitedon date which customer customerid visited restaurant amount total paid customer restaurant owner want analyze possible expansion least one customer every day write sql query compute moving average how much customer paid seven days window current day days before averageamount should rounded two decimal places return result table ordered visitedon ascending order query result format following example example input customer table customerid name visitedon amount jhon daniel jade khaled winston elvis anna maria jaze jhon jade output visitedon amount averageamount explanation moving average averageamount moving average averageamount moving average averageamount moving average averageamount

rank transform array given array integers arr replace each element rank rank represents how large element rank following rules rank integer starting larger element larger rank two elements equal their rank must same rank should small possible example input arr output explanation largest element smallest second smallest third smallest example input arr output explanation same elements share same rank example input arr output constraints arrlength arri

maximum gap given integer array nums return maximum difference between two successive elements sorted form array contains less than two elements return must write algorithm runs linear time uses linear extra space example input nums output explanation sorted form array either maximum difference example input nums output explanation array contains less than elements return constraints numslength numsi

number steps reduce number zero given integer num return number steps reduce zero one step current number even divide otherwise subtract example input num output explanation step even divide obtain step odd subtract obtain step even divide obtain step odd subtract obtain step even divide obtain step odd subtract obtain example input num output explanation step even divide obtain step even divide obtain step even divide obtain step odd subtract obtain example input num output constraints num

maximum students taking exam given matrix seats represent seats distributions classroom seat broken denoted character otherwise denoted character students see answers those sitting next left upper left upper but cannot see answers student sitting directly front behind him return maximum number students take exam together without any cheating being possible students must placed seats good condition example input seats output explanation teacher place students available seats they dont cheat exam example input seats output explanation place students available seats example input seats output explanation place students available seats column constraints seats contains only characters seatslength seatsilength

minimum number taps open water garden onedimensional garden xaxis garden starts point ends point length garden taps located points garden given integer integer array ranges length where rangesi indexed means ith tap water area rangesi rangesi open return minimum number taps should open water whole garden garden cannot watered return example input ranges output explanation tap point cover interval tap point cover interval tap point cover interval tap point cover interval tap point cover interval tap point cover interval opening only second tap water whole garden example input ranges output explanation even activate four taps cannot water whole garden constraints rangeslength rangesi

arithmetic progression sequence sequence numbers called arithmetic progression difference between any two consecutive elements same given array numbers arr return true array rearranged form arithmetic progression otherwise return false example input arr output true explanation reorder elements differences respectively between each consecutive elements example input arr output false explanation way reorder elements obtain arithmetic progression constraints arrlength arri

convert integer sum two nozero integers nozero integer positive integer does not contain any decimal representation given integer return list two integers where nozero integers test cases generated least one valid solution many valid solutions return any them example input output explanation let both nozero integers example input output explanation let both nozero integers note other valid answers accepted constraints

time needed inform employees company employees unique each employee head company one headid each employee one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed subordination relationships tree structure head company wants inform company employees urgent piece news inform his direct subordinates they inform their subordinates employees know about urgent news ith employee needs informtimei minutes inform his direct subordinates after informtimei minutes his direct subordinates start spreading news return number minutes needed inform employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company direct manager employees company needs minute inform them tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei employee subordinates guaranteed employees informed

remove palindromic subsequences given string consisting only letters single step remove one palindromic subsequence return minimum number steps given string empty string subsequence given string generated deleting some characters given string without changing order note subsequence does not necessarily need contiguous string called palindrome one reads same backward forward example input ababa output explanation already palindrome entirety removed single step example input abb output explanation abb remove palindromic subsequence example input baabb output explanation baabb remove palindromic subsequence baab constraints slength either

number subarrays size average greater than equal threshold given array integers arr two integers threshold return number subarrays size average greater than equal threshold example input arr threshold output explanation subarrays averages respectively other subarrays size averages less than threshold example input arr threshold output explanation first subarrays size averages greater than note averages not integers constraints arrlength arri arrlength threshold

number operations network connected computers numbered connected ethernet cables connections forming network where connectionsi represents connection between computers any computer reach any other computer directly indirectly network given initial computer network connections extract certain cables between two directly connected computers place them between any pair disconnected computers them directly connected return minimum number times need order computers connected not possible return example input connections output explanation remove cable between computer place between computers example input connections output example input connections output explanation not enough cables constraints connectionslength minn connectionsilength repeated connections two computers connected more than one cable

sort matrix diagonally matrix diagonal diagonal line cells starting some cell either topmost row leftmost column going bottomright direction reaching matrixs end example matrix diagonal starting mat where mat matrix includes cells mat mat mat given matrix mat integers sort each matrix diagonal ascending order return resulting matrix example input mat output example input mat output constraints matlength matilength matij

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

check straight line given array coordinates coordinatesi where represents coordinate point check these points straight line plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains duplicate point

print words vertically given string return words vertically same order which they appear words returned list strings complete spaces when necessary trailing spaces not allowed each word would put only one column one column only one word example input how output hayoroweu explanation each word printed vertically hay oro weu example input not output tbontboerooe explanation trailing spaces not allowed tbontb oerooe example input contest coming output cicoson constraints slength contains only upper case english letters guaranteed only one space between words

angle between hands clock given two numbers hour minutes return smaller angle degrees formed between hour minute hand answers within actual value accepted correct example input hour minutes output example input hour minutes output example input hour minutes output constraints hour minutes

jump game iii given array nonnegative integers arr initially positioned start index array when index jump arri arri check reach any index value notice not jump outside array any time example input arr start output true explanation possible ways reach index value index index index index index index index index index example input arr start output true explanation one possible way reach index value index index index index example input arr start output false explanation way reach index value constraints arrlength arri arrlength start arrlength

break palindrome given palindromic string lowercase english letters palindrome replace exactly one character any lowercase english letter resulting string not palindrome lexicographically smallest one possible return resulting string way replace character not palindrome return empty string string lexicographically smaller than string same length first position where differ character strictly smaller than corresponding character example abcc lexicographically smaller than abcd because first position they differ fourth character smaller than example input palindrome abccba output aaccba explanation many ways abccba not palindrome such zbccba aaccba abacba ways aaccba lexicographically smallest example input palindrome output explanation way replace single character not palindrome return empty string constraints palindromelength palindrome consists only lowercase english letters

reduce array size half given integer array arr choose set integers remove occurrences these integers array return minimum size set least half integers array removed example input arr output explanation choosing new array which size equal half size old array possible sets size choosing set not possible new array which size greater than half size old array example input arr output explanation only possible set choose new array empty constraints arrlength arrlength even arri

weakest rows matrix given binary matrix mat representing soldiers representing civilians soldiers positioned front civilians appear left each row row weaker than row one following true number soldiers row less than number soldiers row both rows same number soldiers return indices weakest rows matrix ordered weakest strongest example input mat output explanation number soldiers each row row row row row row rows ordered weakest strongest example input mat output explanation number soldiers each row row row row row rows ordered weakest strongest constraints matlength matilength matrixij either

number provinces cities some them connected while some not city connected directly city city connected directly city city connected indirectly city province group directly indirectly connected cities other cities outside group given matrix isconnected where isconnectedij ith city jth city directly connected isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij isconnectedii isconnectedij isconnectedji

detonate maximum bombs given list bombs range bomb defined area where effect felt area shape circle center location bomb bombs represented indexed integer array bombs where bombsi denote xcoordinate ycoordinate location ith bomb whereas denotes radius range may choose detonate single bomb when bomb detonated detonate bombs lie range these bombs further detonate bombs lie their ranges given list bombs return maximum number bombs detonated allowed detonate only one bomb example input bombs output explanation above figure shows positions ranges bombs detonate left bomb bomb not affected but detonate bomb both bombs detonated maximum bombs detonated max example input bombs output explanation detonating either bomb not detonate other bomb maximum number bombs detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb bombs detonated constraints bombslength bombsilength

